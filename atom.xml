<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>winter的博客</title>
  <icon>https://www.gravatar.com/avatar/36b85e5cdacaf8ee0195aca3538bf170</icon>
  <subtitle>coding is my life</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://winterchens.github.io/"/>
  <updated>2017-10-25T12:39:08.000Z</updated>
  <id>http://winterchens.github.io/</id>
  
  <author>
    <name>winter chen</name>
    <email>1085143002@qq.com</email>
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>layui完美分页，ajax请求分页（真分页） 【2.0版本】</title>
    <link href="http://winterchens.github.io/2017/10/25/layui-page-2.0/"/>
    <id>http://winterchens.github.io/2017/10/25/layui-page-2.0/</id>
    <published>2017-10-25T12:55:00.000Z</published>
    <updated>2017-10-25T12:39:08.000Z</updated>
    
    <content type="html"><![CDATA[<h3 id="注意"><a href="#注意" class="headerlink" title="注意"></a>注意</h3><p><strong>使用的layui版本为：layui-v2.0以上版本，如果v1.0版本请看我另外一篇博客 <a href="https://winterchens.github.io/2017/10/25/layui-page-1.0/"> 《layui完美分页，ajax请求分页（真分页）》</a></strong><br><a id="more"></a></p><p>最近因为以为学者在看了我上一篇关于layui分页的博客遇到了问题，原因是因为使用了新版本2.x，导致有一些属性改变了，所以出了这篇新版本的博客，本文是根据上一篇博客改变而成，如有疑问请联系我 email：1085143002@qq.com</p><h3 id="完整代码："><a href="#完整代码：" class="headerlink" title="完整代码："></a>完整代码：</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div><div class="line">109</div><div class="line">110</div><div class="line">111</div><div class="line">112</div><div class="line">113</div><div class="line">114</div><div class="line">115</div><div class="line">116</div><div class="line">117</div><div class="line">118</div><div class="line">119</div><div class="line">120</div><div class="line">121</div><div class="line">122</div><div class="line">123</div><div class="line">124</div><div class="line">125</div><div class="line">126</div><div class="line">127</div><div class="line">128</div><div class="line">129</div><div class="line">130</div><div class="line">131</div><div class="line">132</div><div class="line">133</div><div class="line">134</div><div class="line">135</div><div class="line">136</div><div class="line">137</div><div class="line">138</div><div class="line">139</div><div class="line">140</div><div class="line">141</div><div class="line">142</div><div class="line">143</div><div class="line">144</div><div class="line">145</div><div class="line">146</div><div class="line">147</div><div class="line">148</div><div class="line">149</div><div class="line">150</div><div class="line">151</div><div class="line">152</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">%@</span> <span class="attr">page</span> <span class="attr">language</span>=<span class="string">"java"</span> <span class="attr">contentType</span>=<span class="string">"text/html; charset=UTF-8"</span> <span class="attr">pageEncoding</span>=<span class="string">"UTF-8"</span>%&gt;</span></div><div class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"en"</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">"renderer"</span> <span class="attr">content</span>=<span class="string">"webkit"</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">"X-UA-Compatible"</span> <span class="attr">content</span>=<span class="string">"IE=edge,chrome=1"</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">"viewport"</span> <span class="attr">content</span>=<span class="string">"width=device-width, initial-scale=1, maximum-scale=1"</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">"apple-mobile-web-app-status-bar-style"</span> <span class="attr">content</span>=<span class="string">"black"</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">"apple-mobile-web-app-capable"</span> <span class="attr">content</span>=<span class="string">"yes"</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">"format-detection"</span> <span class="attr">content</span>=<span class="string">"telephone=no"</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">link</span>  <span class="attr">rel</span>=<span class="string">"icon"</span> <span class="attr">href</span>=<span class="string">"static/images/titleLogo.png"</span>  /&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>门店管理后台<span class="tag">&lt;/<span class="name">title</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">"stylesheet"</span> <span class="attr">href</span>=<span class="string">"static/layui/plugins/layui/css/layui.css"</span> <span class="attr">media</span>=<span class="string">"all"</span> /&gt;</span></div><div class="line">    <span class="comment">&lt;!-- &lt;link rel="stylesheet" type="text/css" href="static/css/reset.css"&gt;</span></div><div class="line"><span class="comment">    &lt;link rel="stylesheet" type="text/css" href="static/css/commend.css"&gt; --&gt;</span></div><div class="line">    <span class="comment">&lt;!-- &lt;link rel="stylesheet" href="static/css/jqpagination.css" /&gt; --&gt;</span></div><div class="line">    <span class="comment">&lt;!-- &lt;link rel="stylesheet" type="text/css" href="static/css/shopCustomerManager.css"&gt; --&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span> <span class="attr">src</span>=<span class="string">"static/js/jquery-3.1.1.min.js"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span> <span class="attr">src</span>=<span class="string">"static/layui/plugins/layui/layui.js"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></div><div class="line">    <span class="comment">&lt;!-- &lt;script type="text/javascript" src="static/js/jquery.jqpagination.js"&gt;&lt;/script&gt; --&gt;</span></div><div class="line">   <span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span>&gt;</span><span class="undefined"></span></div><div class="line"><span class="undefined">   $(document).ready(function()&#123;</span></div><div class="line"><span class="undefined">     //ajax请求后台数据</span></div><div class="line"><span class="undefined">      getShopCustomerManagePageInfo();</span></div><div class="line"><span class="undefined">      </span></div><div class="line"><span class="undefined"></span></div><div class="line"><span class="undefined">     //点击搜索时 搜索数据</span></div><div class="line"><span class="undefined">     $("#selectButton").click(function()&#123; </span></div><div class="line"><span class="undefined">   getShopCustomerManagePageInfo();</span></div><div class="line"><span class="undefined">   currentPageAllAppoint = 1; //当点击搜索的时候，应该回到第一页</span></div><div class="line"><span class="undefined">   toPage();//然后进行分页的初始化</span></div><div class="line"><span class="undefined">   </span></div><div class="line"><span class="undefined">         &#125;)</span></div><div class="line"><span class="undefined">      toPage();</span></div><div class="line"><span class="undefined">   &#125;);</span></div><div class="line"><span class="undefined">   </span></div><div class="line"><span class="undefined">  //分页参数设置 这些全局变量关系到分页的功能</span></div><div class="line"><span class="undefined">   var startAllAppoint = 0;//开始页数</span></div><div class="line"><span class="undefined">   var limitAllAppoint = 10;//每页显示数据条数</span></div><div class="line"><span class="undefined">   var currentPageAllAppoint = 1;//当前页数</span></div><div class="line"><span class="undefined">   var dataLength = 0;//数据总条数</span></div><div class="line"><span class="undefined">   //ajax请求后台数据</span></div><div class="line"><span class="undefined">   function getShopCustomerManagePageInfo()&#123;</span></div><div class="line"><span class="undefined">   $.ajax(&#123;</span></div><div class="line"><span class="undefined">   type:"post",</span></div><div class="line"><span class="undefined">   async:false,</span></div><div class="line"><span class="undefined">   url:"list_shop_customers_info",</span></div><div class="line"><span class="undefined">   data:&#123;start:startAllAppoint, limit:limitAllAppoint,selectValue:$("#selectValue").val()&#125;,</span></div><div class="line"><span class="undefined">   success:function(data,status)&#123;</span></div><div class="line"><span class="undefined">   data=eval("("+data+")");</span></div><div class="line"><span class="undefined">   getShopCustomesInfo(data.root);</span></div><div class="line"><span class="undefined">   startAllAppoint = data.currentResult;//当前页数(后台返回)</span></div><div class="line"><span class="undefined">   dataLength  = data.total;//数据总条数</span></div><div class="line"><span class="undefined">   &#125;</span></div><div class="line"><span class="undefined">   &#125;);</span></div><div class="line"><span class="undefined">   </span></div><div class="line"><span class="undefined">   &#125;</span></div><div class="line"><span class="undefined">   </span></div><div class="line"><span class="undefined">   </span></div><div class="line"><span class="undefined">   </span></div><div class="line"><span class="undefined">   function getShopCustomesInfo(data)&#123;</span></div><div class="line"><span class="xml">   var s = "<span class="tag">&lt;<span class="name">tr</span>&gt;</span><span class="tag">&lt;<span class="name">th</span>&gt;</span>姓名<span class="tag">&lt;/<span class="name">th</span>&gt;</span><span class="tag">&lt;<span class="name">th</span>&gt;</span>性别<span class="tag">&lt;/<span class="name">th</span>&gt;</span><span class="tag">&lt;<span class="name">th</span>&gt;</span>电话<span class="tag">&lt;/<span class="name">th</span>&gt;</span><span class="tag">&lt;<span class="name">th</span>&gt;</span>备案楼盘<span class="tag">&lt;/<span class="name">th</span>&gt;</span><span class="tag">&lt;<span class="name">th</span>&gt;</span>已成交<span class="tag">&lt;/<span class="name">th</span>&gt;</span><span class="tag">&lt;<span class="name">th</span>&gt;</span>归属经纪人<span class="tag">&lt;/<span class="name">th</span>&gt;</span><span class="tag">&lt;<span class="name">th</span>&gt;</span>添加时间<span class="tag">&lt;/<span class="name">th</span>&gt;</span><span class="tag">&lt;/<span class="name">tr</span>&gt;</span>";</span></div><div class="line"><span class="undefined">   $.each(data,function(v,o)&#123;</span></div><div class="line"><span class="xml">   s+='<span class="tag">&lt;<span class="name">tr</span>&gt;</span><span class="tag">&lt;<span class="name">td</span>&gt;</span>'+o.cusName+'<span class="tag">&lt;/<span class="name">td</span>&gt;</span>';</span></div><div class="line"><span class="xml">   s+='<span class="tag">&lt;<span class="name">td</span>&gt;</span>'+o.cusSex+'<span class="tag">&lt;/<span class="name">td</span>&gt;</span>';</span></div><div class="line"><span class="xml">   s+='<span class="tag">&lt;<span class="name">td</span>&gt;</span>'+o.phone+'<span class="tag">&lt;/<span class="name">td</span>&gt;</span>';</span></div><div class="line"><span class="xml">   s+='<span class="tag">&lt;<span class="name">td</span>&gt;</span>'+o.records+'<span class="tag">&lt;/<span class="name">td</span>&gt;</span>';</span></div><div class="line"><span class="xml">   s+='<span class="tag">&lt;<span class="name">td</span>&gt;</span>'+o.alreadyDeal+'<span class="tag">&lt;/<span class="name">td</span>&gt;</span>';</span></div><div class="line"><span class="xml">   s+='<span class="tag">&lt;<span class="name">td</span>&gt;</span>'+o.theMedi+'<span class="tag">&lt;/<span class="name">td</span>&gt;</span>';</span></div><div class="line"><span class="xml">   s+='<span class="tag">&lt;<span class="name">td</span>&gt;</span>'+o.addTime+'<span class="tag">&lt;/<span class="name">td</span>&gt;</span><span class="tag">&lt;/<span class="name">tr</span>&gt;</span>';</span></div><div class="line"><span class="undefined">   &#125;);</span></div><div class="line"><span class="undefined"></span></div><div class="line"><span class="undefined">   if(data.length&gt;0)&#123;</span></div><div class="line"><span class="undefined">   $("#t_customerInfo").html(s);</span></div><div class="line"><span class="undefined">   &#125;else&#123;</span></div><div class="line"><span class="undefined">   $("#page1").hide();</span></div><div class="line"><span class="xml">   $("#t_customerInfo").html("<span class="tag">&lt;<span class="name">br</span>/&gt;</span><span class="tag">&lt;<span class="name">span</span> <span class="attr">style</span>=<span class="string">'width:10%;height:30px;display:block;margin:0 auto;'</span>&gt;</span>暂无数据<span class="tag">&lt;/<span class="name">span</span>&gt;</span>");</span></div><div class="line"><span class="undefined">   &#125;</span></div><div class="line"><span class="undefined">   </span></div><div class="line"><span class="undefined">   </span></div><div class="line"><span class="undefined">   &#125;</span></div><div class="line"><span class="undefined">   </span></div><div class="line"><span class="undefined">   </span></div><div class="line"><span class="undefined">   </span></div><div class="line"><span class="undefined">   function toPage()&#123;</span></div><div class="line"><span class="undefined">   </span></div><div class="line"><span class="undefined">   layui.use(['form', 'laypage', 'layedit','layer', 'laydate'], function() &#123;</span></div><div class="line"><span class="undefined">var form = layui.form(),</span></div><div class="line"><span class="undefined">layer = layui.layer,</span></div><div class="line"><span class="undefined">layedit = layui.layedit,</span></div><div class="line"><span class="undefined">laydate = layui.laydate,</span></div><div class="line"><span class="undefined">laypage = layui.laypage;</span></div><div class="line"><span class="undefined"></span></div><div class="line"><span class="undefined">var nums = 10;</span></div><div class="line"><span class="undefined">//调用分页</span></div><div class="line"><span class="undefined">  laypage(&#123;</span></div><div class="line"><span class="undefined">    cont: 'paged'</span></div><div class="line"><span class="undefined">    ,count: dataLength //这个是后台返回的数据的总条数</span></div><div class="line"><span class="undefined">    ,limit: limitAllAppoint   //每页显示的数据的条数,layui会根据count，limit进行分页的计算</span></div><div class="line"><span class="undefined">    ,curr: currentPageAllAppoint</span></div><div class="line"><span class="undefined">    ,skip: true</span></div><div class="line"><span class="undefined">    ,jump: function(obj, first)&#123;</span></div><div class="line"><span class="undefined">    </span></div><div class="line"><span class="undefined">    currentPageAllAppoint = obj.curr;</span></div><div class="line"><span class="undefined">    startAllAppoint = (obj.curr-1)*obj.limit;</span></div><div class="line"><span class="undefined">      //document.getElementById('biuuu_city_list').innerHTML = render(obj, obj.curr);</span></div><div class="line"><span class="undefined">      if(!first)&#123; //一定要加此判断，否则初始时会无限刷新</span></div><div class="line"><span class="undefined">      getShopCustomerManagePageInfo();//一定要把翻页的ajax请求放到这里，不然会请求两次。</span></div><div class="line"><span class="undefined">          //location.href = '?page='+obj.curr;</span></div><div class="line"><span class="undefined">        &#125;</span></div><div class="line"><span class="undefined">    &#125;</span></div><div class="line"><span class="undefined">  &#125;);</span></div><div class="line"><span class="undefined"></span></div><div class="line"><span class="undefined"></span></div><div class="line"><span class="undefined">&#125;);</span></div><div class="line"><span class="undefined">   &#125;;</span></div><div class="line"><span class="undefined">   </span></div><div class="line"><span class="undefined">   </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"admin-main"</span>&gt;</span></div><div class="line"></div><div class="line"></div><div class="line"><span class="tag">&lt;<span class="name">blockquote</span> <span class="attr">class</span>=<span class="string">"layui-elem-quote"</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">form</span> <span class="attr">class</span>=<span class="string">"layui-form"</span> <span class="attr">action</span>=<span class="string">""</span> &gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"layui-form-item"</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"layui-input-inline"</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">id</span>=<span class="string">"selectValue"</span> <span class="attr">lay-verify</span>=<span class="string">"required"</span> <span class="attr">placeholder</span>=<span class="string">"客户姓名，电话"</span> <span class="attr">autocomplete</span>=<span class="string">"off"</span> <span class="attr">class</span>=<span class="string">"layui-input"</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">button</span> <span class="attr">class</span>=<span class="string">"layui-btn"</span> <span class="attr">type</span>=<span class="string">"button"</span> <span class="attr">id</span>=<span class="string">"selectButton"</span>&gt;</span>搜索<span class="tag">&lt;/<span class="name">button</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">form</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">span</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"shop_customer_manager_page_info"</span>&gt;</span>显示所有客户<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">blockquote</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">fieldset</span> <span class="attr">class</span>=<span class="string">"layui-elem-field"</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">legend</span>&gt;</span>客户列表<span class="tag">&lt;/<span class="name">legend</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"layui-field-box layui-form"</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">table</span> <span class="attr">class</span>=<span class="string">"layui-table admin-table"</span> <span class="attr">id</span>=<span class="string">"t_customerInfo"</span>&gt;</span></div><div class="line"></div><div class="line"><span class="tag">&lt;/<span class="name">table</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">fieldset</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"admin-table-page"</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"paged"</span> <span class="attr">class</span>=<span class="string">"page"</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line"></div><div class="line">   </div><div class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></div></pre></td></tr></table></figure><h3 id="java代码："><a href="#java代码：" class="headerlink" title="java代码："></a>java代码：</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div></pre></td><td class="code"><pre><div class="line"></div><div class="line"><span class="comment">/**</span></div><div class="line"><span class="comment"> * shop 客户管理 list</span></div><div class="line"><span class="comment"> * <span class="doctag">@param</span> start</span></div><div class="line"><span class="comment"> * <span class="doctag">@param</span> limit</span></div><div class="line"><span class="comment"> * <span class="doctag">@param</span> selectValue</span></div><div class="line"><span class="comment"> */</span></div><div class="line"><span class="meta">@ResponseBody</span></div><div class="line"><span class="meta">@RequestMapping</span>(<span class="string">"/list_shop_customers_info"</span>)</div><div class="line"><span class="function"><span class="keyword">public</span> Object <span class="title">listShopCustomerInfo</span><span class="params">(Integer start, Integer limit, String selectValue)</span> </span>&#123;</div><div class="line">Page page = <span class="keyword">new</span> Page();</div><div class="line">page.setStart(start);</div><div class="line">page.setLimit(limit);</div><div class="line"><span class="comment">// 获取session中的用户信息</span></div><div class="line">User u = (User) <span class="keyword">this</span>.request.getSession().getAttribute(<span class="string">"userInfo"</span>);</div><div class="line"><span class="comment">// 获取持久化用户对象</span></div><div class="line">User user = userService.findById(u.getUserId());</div><div class="line"><span class="keyword">if</span> (user != <span class="keyword">null</span>) &#123;</div><div class="line">projectCustomerService.findShopCustomersByUser(user, selectValue, page);</div><div class="line"><span class="keyword">return</span> page;</div><div class="line">&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><h3 id="sevice层"><a href="#sevice层" class="headerlink" title="sevice层"></a>sevice层</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@Override</span></div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">findShopCustomersByUser</span><span class="params">(User user, String selectValue, Page page)</span> </span>&#123;</div><div class="line">List cmList = <span class="keyword">new</span> ArrayList&lt;&gt;();</div><div class="line"><span class="keyword">int</span> total = <span class="number">0</span>;</div><div class="line"><span class="keyword">if</span>(user!=<span class="keyword">null</span> &amp;&amp; user.getParentId()!=<span class="keyword">null</span> &amp;&amp; !user.getParentId().equals(<span class="string">""</span>))&#123;</div><div class="line">String hql = <span class="string">"from ShopCustomers as model where model.shopId = "</span> + Integer.parseInt(user.getParentId());</div><div class="line"><span class="keyword">if</span>(selectValue!=<span class="keyword">null</span> &amp;&amp; !selectValue.equals(<span class="string">""</span>))&#123;</div><div class="line">hql+=<span class="string">"and model.shopCustomerName like '%"</span> +selectValue+<span class="string">"%' or model.shopCustomerPhone like '%"</span> +selectValue+<span class="string">"%'"</span>;</div><div class="line">&#125;</div><div class="line">List&lt;ShopCustomers&gt; list = baseDao.findByHql(hql,page.getStart(),page.getLimit());</div><div class="line"><span class="keyword">for</span>(ShopCustomers sc : list)&#123;</div><div class="line">User u = (User) baseDao.loadById(User.class, sc.getUserId());</div><div class="line">String cGRSHql = <span class="string">"select count(*) from GuideRecords where shopCustomerId = '"</span>+sc.getShopCustomerId()+<span class="string">"'"</span>;</div><div class="line">String cDealHql = <span class="string">"select count(*) from GuideRecords where shopCustomerId = '"</span>+sc.getShopCustomerId()+<span class="string">"' and isDeal = 1"</span>;</div><div class="line"><span class="keyword">int</span> floorCounts = baseDao.countQuery(cGRSHql);<span class="comment">//备案楼盘数</span></div><div class="line"><span class="keyword">int</span> dealCounts = baseDao.countQuery(cDealHql);<span class="comment">//已成交数</span></div><div class="line">CustomerManager cm = <span class="keyword">new</span> CustomerManager();</div><div class="line">CustomerManager cmObj = cm.createCusManObj(sc,u);</div><div class="line">cmObj.setRecords(floorCounts);</div><div class="line">cmObj.setAlreadyDeal(dealCounts);</div><div class="line">cmList.add(cmObj);</div><div class="line">&#125;</div><div class="line">String cHql = <span class="string">"select count(*) "</span>+hql;</div><div class="line">total = baseDao.countQuery(cHql);</div><div class="line">&#125;</div><div class="line">page.setRoot(cmList);</div><div class="line">page.setTotal(total);</div><div class="line">&#125;</div></pre></td></tr></table></figure><h3 id="分页对象"><a href="#分页对象" class="headerlink" title="分页对象"></a>分页对象</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> com.sc.tradmaster.utils;</div><div class="line"></div><div class="line"><span class="keyword">import</span> java.util.List;</div><div class="line"><span class="comment">/**</span></div><div class="line"><span class="comment"> * 分页对象</span></div><div class="line"><span class="comment"> * <span class="doctag">@author</span> grl 2017-01-05</span></div><div class="line"><span class="comment"> *</span></div><div class="line"><span class="comment"> */</span></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Page</span> </span>&#123;</div><div class="line"><span class="comment">/** 总记录数 */</span></div><div class="line"><span class="keyword">private</span> <span class="keyword">int</span> total;</div><div class="line"><span class="comment">/** 分页结果 */</span></div><div class="line"><span class="keyword">private</span> List root;</div><div class="line"><span class="comment">/** 开始页码 */</span></div><div class="line"><span class="keyword">private</span> <span class="keyword">int</span> start;</div><div class="line"><span class="comment">/** 每页多少 */</span></div><div class="line"><span class="keyword">private</span> <span class="keyword">int</span> limit;</div><div class="line"><span class="comment">/** 查询条件 */</span></div><div class="line"><span class="keyword">private</span> String wheres;</div><div class="line"></div><div class="line"><span class="keyword">private</span> <span class="keyword">int</span> currentPage;<span class="comment">//当前页</span></div><div class="line"><span class="keyword">private</span> <span class="keyword">int</span> currentResult;<span class="comment">//当前记录起始索引</span></div><div class="line"><span class="keyword">private</span> <span class="keyword">int</span> totalPage;<span class="comment">//总页数</span></div><div class="line"></div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getCurrentPage</span><span class="params">()</span> </span>&#123;</div><div class="line"><span class="keyword">if</span>(currentPage&lt;=<span class="number">0</span>)</div><div class="line">currentPage = <span class="number">1</span>;</div><div class="line"><span class="keyword">return</span> currentPage;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setCurrentPage</span><span class="params">(<span class="keyword">int</span> currentPage)</span> </span>&#123;</div><div class="line"><span class="keyword">this</span>.currentPage = currentPage;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getCurrentResult</span><span class="params">()</span> </span>&#123;</div><div class="line">currentResult = (getCurrentPage()-<span class="number">1</span>)*getLimit();</div><div class="line"><span class="keyword">if</span>(currentResult&lt;<span class="number">0</span>)</div><div class="line">currentResult = <span class="number">0</span>;</div><div class="line"><span class="keyword">return</span> currentResult;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setCurrentResult</span><span class="params">(<span class="keyword">int</span> currentResult)</span> </span>&#123;</div><div class="line"><span class="keyword">this</span>.currentResult = currentResult;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getTotalPage</span><span class="params">()</span> </span>&#123;</div><div class="line"><span class="keyword">if</span>(total%limit==<span class="number">0</span>)</div><div class="line">totalPage = total/limit;</div><div class="line"><span class="keyword">else</span></div><div class="line">totalPage = total/limit+<span class="number">1</span>;</div><div class="line"><span class="keyword">return</span> totalPage;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setTotalPage</span><span class="params">(<span class="keyword">int</span> totalPage)</span> </span>&#123;</div><div class="line"><span class="keyword">this</span>.totalPage = totalPage;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getTotal</span><span class="params">()</span> </span>&#123;</div><div class="line"><span class="keyword">return</span> total;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setTotal</span><span class="params">(<span class="keyword">int</span> total)</span> </span>&#123;</div><div class="line"><span class="keyword">this</span>.total = total;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">public</span> List <span class="title">getRoot</span><span class="params">()</span> </span>&#123;</div><div class="line"><span class="keyword">return</span> root;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setRoot</span><span class="params">(List root)</span> </span>&#123;</div><div class="line"><span class="keyword">this</span>.root = root;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getStart</span><span class="params">()</span> </span>&#123;</div><div class="line"><span class="keyword">return</span> start;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setStart</span><span class="params">(<span class="keyword">int</span> start)</span> </span>&#123;</div><div class="line"><span class="keyword">this</span>.start = start;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getLimit</span><span class="params">()</span> </span>&#123;</div><div class="line"><span class="keyword">return</span> limit;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setLimit</span><span class="params">(<span class="keyword">int</span> limit)</span> </span>&#123;</div><div class="line"><span class="keyword">this</span>.limit = limit;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">public</span> String <span class="title">getWheres</span><span class="params">()</span> </span>&#123;</div><div class="line"><span class="keyword">return</span> wheres;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setWheres</span><span class="params">(String wheres)</span> </span>&#123;</div><div class="line"><span class="keyword">this</span>.wheres = wheres;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="meta">@Override</span></div><div class="line"><span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span> </span>&#123;</div><div class="line"><span class="keyword">return</span> start+<span class="string">" "</span>+total +<span class="string">" "</span> +root;</div><div class="line">&#125;</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure><p>如果遇到问题请联系我</p>]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;注意&quot;&gt;&lt;a href=&quot;#注意&quot; class=&quot;headerlink&quot; title=&quot;注意&quot;&gt;&lt;/a&gt;注意&lt;/h3&gt;&lt;p&gt;&lt;strong&gt;使用的layui版本为：layui-v2.0以上版本，如果v1.0版本请看我另外一篇博客 &lt;a href=&quot;https://winterchens.github.io/2017/10/25/layui-page-1.0/&quot;&gt; 《layui完美分页，ajax请求分页（真分页）》&lt;/a&gt;&lt;/strong&gt;&lt;br&gt;
    
    </summary>
    
      <category term="layui" scheme="http://winterchens.github.io/categories/layui/"/>
    
    
      <category term="layui" scheme="http://winterchens.github.io/tags/layui/"/>
    
  </entry>
  
  <entry>
    <title>layui完美分页，ajax请求分页（真分页）</title>
    <link href="http://winterchens.github.io/2017/10/25/layui-page-1.0/"/>
    <id>http://winterchens.github.io/2017/10/25/layui-page-1.0/</id>
    <published>2017-10-25T12:34:00.000Z</published>
    <updated>2017-10-25T12:39:29.000Z</updated>
    
    <content type="html"><![CDATA[<h3 id="注意"><a href="#注意" class="headerlink" title="注意"></a>注意</h3><p><strong>使用的layui版本为：layui-v1.0.9，现在新版本已经2.X了有些属性改变了，如果你的版本是2.0以上请参照我的博客：<a href="https://winterchens.github.io/2017/10/25/layui-page-2.0/">《 layui完美分页，ajax请求分页（真分页） 【2.0版本】》</a></strong><br><a id="more"></a></p><p>这几天在工作当中需要使用分页控件，然后研究了一下layui的分页控件，这个控件页面非常简洁，功能齐全，而且可以通过异步进行数据的分页，如果大家遇到什么问题可以联系我 email：1085143002@qq.com</p><h3 id="完整代码："><a href="#完整代码：" class="headerlink" title="完整代码："></a>完整代码：</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div><div class="line">109</div><div class="line">110</div><div class="line">111</div><div class="line">112</div><div class="line">113</div><div class="line">114</div><div class="line">115</div><div class="line">116</div><div class="line">117</div><div class="line">118</div><div class="line">119</div><div class="line">120</div><div class="line">121</div><div class="line">122</div><div class="line">123</div><div class="line">124</div><div class="line">125</div><div class="line">126</div><div class="line">127</div><div class="line">128</div><div class="line">129</div><div class="line">130</div><div class="line">131</div><div class="line">132</div><div class="line">133</div><div class="line">134</div><div class="line">135</div><div class="line">136</div><div class="line">137</div><div class="line">138</div><div class="line">139</div><div class="line">140</div><div class="line">141</div><div class="line">142</div><div class="line">143</div><div class="line">144</div><div class="line">145</div><div class="line">146</div><div class="line">147</div><div class="line">148</div><div class="line">149</div><div class="line">150</div><div class="line">151</div><div class="line">152</div><div class="line">153</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">%@</span> <span class="attr">page</span> <span class="attr">language</span>=<span class="string">"java"</span> <span class="attr">contentType</span>=<span class="string">"text/html; charset=UTF-8"</span> <span class="attr">pageEncoding</span>=<span class="string">"UTF-8"</span>%&gt;</span></div><div class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"en"</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">"renderer"</span> <span class="attr">content</span>=<span class="string">"webkit"</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">"X-UA-Compatible"</span> <span class="attr">content</span>=<span class="string">"IE=edge,chrome=1"</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">"viewport"</span> <span class="attr">content</span>=<span class="string">"width=device-width, initial-scale=1, maximum-scale=1"</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">"apple-mobile-web-app-status-bar-style"</span> <span class="attr">content</span>=<span class="string">"black"</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">"apple-mobile-web-app-capable"</span> <span class="attr">content</span>=<span class="string">"yes"</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">"format-detection"</span> <span class="attr">content</span>=<span class="string">"telephone=no"</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">link</span>  <span class="attr">rel</span>=<span class="string">"icon"</span> <span class="attr">href</span>=<span class="string">"static/images/titleLogo.png"</span>  /&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>门店管理后台<span class="tag">&lt;/<span class="name">title</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">"stylesheet"</span> <span class="attr">href</span>=<span class="string">"static/layui/plugins/layui/css/layui.css"</span> <span class="attr">media</span>=<span class="string">"all"</span> /&gt;</span></div><div class="line">    <span class="comment">&lt;!-- &lt;link rel="stylesheet" type="text/css" href="static/css/reset.css"&gt;</span></div><div class="line"><span class="comment">    &lt;link rel="stylesheet" type="text/css" href="static/css/commend.css"&gt; --&gt;</span></div><div class="line">    <span class="comment">&lt;!-- &lt;link rel="stylesheet" href="static/css/jqpagination.css" /&gt; --&gt;</span></div><div class="line">    <span class="comment">&lt;!-- &lt;link rel="stylesheet" type="text/css" href="static/css/shopCustomerManager.css"&gt; --&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span> <span class="attr">src</span>=<span class="string">"static/js/jquery-3.1.1.min.js"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span> <span class="attr">src</span>=<span class="string">"static/layui/plugins/layui/layui.js"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></div><div class="line">    <span class="comment">&lt;!-- &lt;script type="text/javascript" src="static/js/jquery.jqpagination.js"&gt;&lt;/script&gt; --&gt;</span></div><div class="line">   <span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span>&gt;</span><span class="undefined"></span></div><div class="line"><span class="undefined">   $(document).ready(function()&#123;</span></div><div class="line"><span class="undefined">     //ajax请求后台数据</span></div><div class="line"><span class="undefined">      getShopCustomerManagePageInfo();</span></div><div class="line"><span class="undefined">      </span></div><div class="line"><span class="undefined"></span></div><div class="line"><span class="undefined">     //点击搜索时 搜索数据</span></div><div class="line"><span class="undefined">     $("#selectButton").click(function()&#123; </span></div><div class="line"><span class="undefined">   getShopCustomerManagePageInfo();</span></div><div class="line"><span class="undefined">   currentPageAllAppoint = 1; //当点击搜索的时候，应该回到第一页</span></div><div class="line"><span class="undefined">   toPage();//然后进行分页的初始化</span></div><div class="line"><span class="undefined">   </span></div><div class="line"><span class="undefined">         &#125;)</span></div><div class="line"><span class="undefined">      toPage();</span></div><div class="line"><span class="undefined">   &#125;);</span></div><div class="line"><span class="undefined">   </span></div><div class="line"><span class="undefined">  //分页参数设置 这些全局变量关系到分页的功能</span></div><div class="line"><span class="undefined">   var startAllAppoint = 0;</span></div><div class="line"><span class="undefined">   var limitAllAppoint = 10;</span></div><div class="line"><span class="undefined">   var currentPageAllAppoint = 1;</span></div><div class="line"><span class="undefined">   var totalPageAllAppoint = 0;</span></div><div class="line"><span class="undefined">   var dataLength = 0;</span></div><div class="line"><span class="undefined">   //ajax请求后台数据</span></div><div class="line"><span class="undefined">   function getShopCustomerManagePageInfo()&#123;</span></div><div class="line"><span class="undefined">   $.ajax(&#123;</span></div><div class="line"><span class="undefined">   type:"post",</span></div><div class="line"><span class="undefined">   async:false,</span></div><div class="line"><span class="undefined">   url:"list_shop_customers_info",</span></div><div class="line"><span class="undefined">   data:&#123;start:startAllAppoint, limit:limitAllAppoint,selectValue:$("#selectValue").val()&#125;,</span></div><div class="line"><span class="undefined">   success:function(data,status)&#123;</span></div><div class="line"><span class="undefined">   data=eval("("+data+")");</span></div><div class="line"><span class="undefined">   getShopCustomesInfo(data.root);</span></div><div class="line"><span class="undefined">   startAllAppoint = data.currentResult;//当前页数(后台返回)</span></div><div class="line"><span class="undefined">   totalPageAllAppoint = data.totalPage;//总页数(后台返回)</span></div><div class="line"><span class="undefined">   </span></div><div class="line"><span class="undefined">   &#125;</span></div><div class="line"><span class="undefined">   &#125;);</span></div><div class="line"><span class="undefined">   </span></div><div class="line"><span class="undefined">   &#125;</span></div><div class="line"><span class="undefined">   </span></div><div class="line"><span class="undefined">   </span></div><div class="line"><span class="undefined">   </span></div><div class="line"><span class="undefined">   function getShopCustomesInfo(data)&#123;</span></div><div class="line"><span class="xml">   var s = "<span class="tag">&lt;<span class="name">tr</span>&gt;</span><span class="tag">&lt;<span class="name">th</span>&gt;</span>姓名<span class="tag">&lt;/<span class="name">th</span>&gt;</span><span class="tag">&lt;<span class="name">th</span>&gt;</span>性别<span class="tag">&lt;/<span class="name">th</span>&gt;</span><span class="tag">&lt;<span class="name">th</span>&gt;</span>电话<span class="tag">&lt;/<span class="name">th</span>&gt;</span><span class="tag">&lt;<span class="name">th</span>&gt;</span>备案楼盘<span class="tag">&lt;/<span class="name">th</span>&gt;</span><span class="tag">&lt;<span class="name">th</span>&gt;</span>已成交<span class="tag">&lt;/<span class="name">th</span>&gt;</span><span class="tag">&lt;<span class="name">th</span>&gt;</span>归属经纪人<span class="tag">&lt;/<span class="name">th</span>&gt;</span><span class="tag">&lt;<span class="name">th</span>&gt;</span>添加时间<span class="tag">&lt;/<span class="name">th</span>&gt;</span><span class="tag">&lt;/<span class="name">tr</span>&gt;</span>";</span></div><div class="line"><span class="undefined">   $.each(data,function(v,o)&#123;</span></div><div class="line"><span class="xml">   s+='<span class="tag">&lt;<span class="name">tr</span>&gt;</span><span class="tag">&lt;<span class="name">td</span>&gt;</span>'+o.cusName+'<span class="tag">&lt;/<span class="name">td</span>&gt;</span>';</span></div><div class="line"><span class="xml">   s+='<span class="tag">&lt;<span class="name">td</span>&gt;</span>'+o.cusSex+'<span class="tag">&lt;/<span class="name">td</span>&gt;</span>';</span></div><div class="line"><span class="xml">   s+='<span class="tag">&lt;<span class="name">td</span>&gt;</span>'+o.phone+'<span class="tag">&lt;/<span class="name">td</span>&gt;</span>';</span></div><div class="line"><span class="xml">   s+='<span class="tag">&lt;<span class="name">td</span>&gt;</span>'+o.records+'<span class="tag">&lt;/<span class="name">td</span>&gt;</span>';</span></div><div class="line"><span class="xml">   s+='<span class="tag">&lt;<span class="name">td</span>&gt;</span>'+o.alreadyDeal+'<span class="tag">&lt;/<span class="name">td</span>&gt;</span>';</span></div><div class="line"><span class="xml">   s+='<span class="tag">&lt;<span class="name">td</span>&gt;</span>'+o.theMedi+'<span class="tag">&lt;/<span class="name">td</span>&gt;</span>';</span></div><div class="line"><span class="xml">   s+='<span class="tag">&lt;<span class="name">td</span>&gt;</span>'+o.addTime+'<span class="tag">&lt;/<span class="name">td</span>&gt;</span><span class="tag">&lt;/<span class="name">tr</span>&gt;</span>';</span></div><div class="line"><span class="undefined">   &#125;);</span></div><div class="line"><span class="undefined"></span></div><div class="line"><span class="undefined">   if(data.length&gt;0)&#123;</span></div><div class="line"><span class="undefined">   $("#t_customerInfo").html(s);</span></div><div class="line"><span class="undefined">   &#125;else&#123;</span></div><div class="line"><span class="undefined">   $("#page1").hide();</span></div><div class="line"><span class="xml">   $("#t_customerInfo").html("<span class="tag">&lt;<span class="name">br</span>/&gt;</span><span class="tag">&lt;<span class="name">span</span> <span class="attr">style</span>=<span class="string">'width:10%;height:30px;display:block;margin:0 auto;'</span>&gt;</span>暂无数据<span class="tag">&lt;/<span class="name">span</span>&gt;</span>");</span></div><div class="line"><span class="undefined">   &#125;</span></div><div class="line"><span class="undefined">   </span></div><div class="line"><span class="undefined">   </span></div><div class="line"><span class="undefined">   &#125;</span></div><div class="line"><span class="undefined">   </span></div><div class="line"><span class="undefined">   </span></div><div class="line"><span class="undefined">   </span></div><div class="line"><span class="undefined">   function toPage()&#123;</span></div><div class="line"><span class="undefined">   </span></div><div class="line"><span class="undefined">   layui.use(['form', 'laypage', 'layedit','layer', 'laydate'], function() &#123;</span></div><div class="line"><span class="undefined">var form = layui.form(),</span></div><div class="line"><span class="undefined">layer = layui.layer,</span></div><div class="line"><span class="undefined">layedit = layui.layedit,</span></div><div class="line"><span class="undefined">laydate = layui.laydate,</span></div><div class="line"><span class="undefined">laypage = layui.laypage;</span></div><div class="line"><span class="undefined"></span></div><div class="line"><span class="undefined">var nums = 10;</span></div><div class="line"><span class="undefined">//调用分页</span></div><div class="line"><span class="undefined">  laypage(&#123;</span></div><div class="line"><span class="undefined">    cont: 'paged'</span></div><div class="line"><span class="undefined">    ,pages: totalPageAllAppoint //得到总页数，在layui2.X中使用count替代了，并且不是使用"总页数"，而是"总记录条数"</span></div><div class="line"><span class="undefined">    ,curr: currentPageAllAppoint</span></div><div class="line"><span class="undefined">    ,skip: true</span></div><div class="line"><span class="undefined">    ,jump: function(obj, first)&#123;</span></div><div class="line"><span class="undefined">    </span></div><div class="line"><span class="undefined">    currentPageAllAppoint = obj.curr;</span></div><div class="line"><span class="undefined">    startAllAppoint = (obj.curr-1)*limitAllAppoint;</span></div><div class="line"><span class="undefined">      //document.getElementById('biuuu_city_list').innerHTML = render(obj, obj.curr);</span></div><div class="line"><span class="undefined">      if(!first)&#123; //一定要加此判断，否则初始时会无限刷新</span></div><div class="line"><span class="undefined">      getShopCustomerManagePageInfo();//一定要把翻页的ajax请求放到这里，不然会请求两次。</span></div><div class="line"><span class="undefined">          //location.href = '?page='+obj.curr;</span></div><div class="line"><span class="undefined">        &#125;</span></div><div class="line"><span class="undefined">    &#125;</span></div><div class="line"><span class="undefined">  &#125;);</span></div><div class="line"><span class="undefined"></span></div><div class="line"><span class="undefined"></span></div><div class="line"><span class="undefined">&#125;);</span></div><div class="line"><span class="undefined">   &#125;;</span></div><div class="line"><span class="undefined">   </span></div><div class="line"><span class="undefined">   </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"admin-main"</span>&gt;</span></div><div class="line"></div><div class="line"></div><div class="line"><span class="tag">&lt;<span class="name">blockquote</span> <span class="attr">class</span>=<span class="string">"layui-elem-quote"</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">form</span> <span class="attr">class</span>=<span class="string">"layui-form"</span> <span class="attr">action</span>=<span class="string">""</span> &gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"layui-form-item"</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"layui-input-inline"</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">id</span>=<span class="string">"selectValue"</span> <span class="attr">lay-verify</span>=<span class="string">"required"</span> <span class="attr">placeholder</span>=<span class="string">"客户姓名，电话"</span> <span class="attr">autocomplete</span>=<span class="string">"off"</span> <span class="attr">class</span>=<span class="string">"layui-input"</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">button</span> <span class="attr">class</span>=<span class="string">"layui-btn"</span> <span class="attr">type</span>=<span class="string">"button"</span> <span class="attr">id</span>=<span class="string">"selectButton"</span>&gt;</span>搜索<span class="tag">&lt;/<span class="name">button</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">form</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">span</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"shop_customer_manager_page_info"</span>&gt;</span>显示所有客户<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">blockquote</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">fieldset</span> <span class="attr">class</span>=<span class="string">"layui-elem-field"</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">legend</span>&gt;</span>客户列表<span class="tag">&lt;/<span class="name">legend</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"layui-field-box layui-form"</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">table</span> <span class="attr">class</span>=<span class="string">"layui-table admin-table"</span> <span class="attr">id</span>=<span class="string">"t_customerInfo"</span>&gt;</span></div><div class="line"></div><div class="line"><span class="tag">&lt;/<span class="name">table</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">fieldset</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"admin-table-page"</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"paged"</span> <span class="attr">class</span>=<span class="string">"page"</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line"></div><div class="line">   </div><div class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></div></pre></td></tr></table></figure><h3 id="java代码："><a href="#java代码：" class="headerlink" title="java代码："></a>java代码：</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line"><span class="comment"> * shop 客户管理 list</span></div><div class="line"><span class="comment"> * <span class="doctag">@param</span> start</span></div><div class="line"><span class="comment"> * <span class="doctag">@param</span> limit</span></div><div class="line"><span class="comment"> * <span class="doctag">@param</span> selectValue</span></div><div class="line"><span class="comment"> */</span></div><div class="line"><span class="meta">@ResponseBody</span></div><div class="line"><span class="meta">@RequestMapping</span>(<span class="string">"/list_shop_customers_info"</span>)</div><div class="line"><span class="function"><span class="keyword">public</span> Object <span class="title">listShopCustomerInfo</span><span class="params">(Integer start, Integer limit, String selectValue)</span> </span>&#123;</div><div class="line">Page page = <span class="keyword">new</span> Page();</div><div class="line">page.setStart(start);</div><div class="line">page.setLimit(limit);</div><div class="line"><span class="comment">// 获取session中的用户信息</span></div><div class="line">User u = (User) <span class="keyword">this</span>.request.getSession().getAttribute(<span class="string">"userInfo"</span>);</div><div class="line"><span class="comment">// 获取持久化用户对象</span></div><div class="line">User user = userService.findById(u.getUserId());</div><div class="line"><span class="keyword">if</span> (user != <span class="keyword">null</span>) &#123;</div><div class="line">projectCustomerService.findShopCustomersByUser(user, selectValue, page);</div><div class="line"><span class="keyword">return</span> page;</div><div class="line">&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><h3 id="sevice层"><a href="#sevice层" class="headerlink" title="sevice层"></a>sevice层</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@Override</span></div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">findShopCustomersByUser</span><span class="params">(User user, String selectValue, Page page)</span> </span>&#123;</div><div class="line">List cmList = <span class="keyword">new</span> ArrayList&lt;&gt;();</div><div class="line"><span class="keyword">int</span> total = <span class="number">0</span>;</div><div class="line"><span class="keyword">if</span>(user!=<span class="keyword">null</span> &amp;&amp; user.getParentId()!=<span class="keyword">null</span> &amp;&amp; !user.getParentId().equals(<span class="string">""</span>))&#123;</div><div class="line">String hql = <span class="string">"from ShopCustomers as model where model.shopId = "</span> + Integer.parseInt(user.getParentId());</div><div class="line"><span class="keyword">if</span>(selectValue!=<span class="keyword">null</span> &amp;&amp; !selectValue.equals(<span class="string">""</span>))&#123;</div><div class="line">hql+=<span class="string">"and model.shopCustomerName like '%"</span> +selectValue+<span class="string">"%' or model.shopCustomerPhone like '%"</span> +selectValue+<span class="string">"%'"</span>;</div><div class="line">&#125;</div><div class="line">List&lt;ShopCustomers&gt; list = baseDao.findByHql(hql,page.getStart(),page.getLimit());</div><div class="line"><span class="keyword">for</span>(ShopCustomers sc : list)&#123;</div><div class="line">User u = (User) baseDao.loadById(User.class, sc.getUserId());</div><div class="line">String cGRSHql = <span class="string">"select count(*) from GuideRecords where shopCustomerId = '"</span>+sc.getShopCustomerId()+<span class="string">"'"</span>;</div><div class="line">String cDealHql = <span class="string">"select count(*) from GuideRecords where shopCustomerId = '"</span>+sc.getShopCustomerId()+<span class="string">"' and isDeal = 1"</span>;</div><div class="line"><span class="keyword">int</span> floorCounts = baseDao.countQuery(cGRSHql);<span class="comment">//备案楼盘数</span></div><div class="line"><span class="keyword">int</span> dealCounts = baseDao.countQuery(cDealHql);<span class="comment">//已成交数</span></div><div class="line">CustomerManager cm = <span class="keyword">new</span> CustomerManager();</div><div class="line">CustomerManager cmObj = cm.createCusManObj(sc,u);</div><div class="line">cmObj.setRecords(floorCounts);</div><div class="line">cmObj.setAlreadyDeal(dealCounts);</div><div class="line">cmList.add(cmObj);</div><div class="line">&#125;</div><div class="line">String cHql = <span class="string">"select count(*) "</span>+hql;</div><div class="line">total = baseDao.countQuery(cHql);</div><div class="line">&#125;</div><div class="line">page.setRoot(cmList);</div><div class="line">page.setTotal(total);</div><div class="line">&#125;</div></pre></td></tr></table></figure><h3 id="分页对象"><a href="#分页对象" class="headerlink" title="分页对象"></a>分页对象</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> com.sc.tradmaster.utils;</div><div class="line"></div><div class="line"><span class="keyword">import</span> java.util.List;</div><div class="line"><span class="comment">/**</span></div><div class="line"><span class="comment"> * 分页对象</span></div><div class="line"><span class="comment"> * <span class="doctag">@author</span> grl 2017-01-05</span></div><div class="line"><span class="comment"> *</span></div><div class="line"><span class="comment"> */</span></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Page</span> </span>&#123;</div><div class="line"><span class="comment">/** 总记录数 */</span></div><div class="line"><span class="keyword">private</span> <span class="keyword">int</span> total;</div><div class="line"><span class="comment">/** 分页结果 */</span></div><div class="line"><span class="keyword">private</span> List root;</div><div class="line"><span class="comment">/** 开始页码 */</span></div><div class="line"><span class="keyword">private</span> <span class="keyword">int</span> start;</div><div class="line"><span class="comment">/** 每页多少 */</span></div><div class="line"><span class="keyword">private</span> <span class="keyword">int</span> limit;</div><div class="line"><span class="comment">/** 查询条件 */</span></div><div class="line"><span class="keyword">private</span> String wheres;</div><div class="line"></div><div class="line"><span class="keyword">private</span> <span class="keyword">int</span> currentPage;<span class="comment">//当前页</span></div><div class="line"><span class="keyword">private</span> <span class="keyword">int</span> currentResult;<span class="comment">//当前记录起始索引</span></div><div class="line"><span class="keyword">private</span> <span class="keyword">int</span> totalPage;<span class="comment">//总页数</span></div><div class="line"></div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getCurrentPage</span><span class="params">()</span> </span>&#123;</div><div class="line"><span class="keyword">if</span>(currentPage&lt;=<span class="number">0</span>)</div><div class="line">currentPage = <span class="number">1</span>;</div><div class="line"><span class="keyword">return</span> currentPage;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setCurrentPage</span><span class="params">(<span class="keyword">int</span> currentPage)</span> </span>&#123;</div><div class="line"><span class="keyword">this</span>.currentPage = currentPage;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getCurrentResult</span><span class="params">()</span> </span>&#123;</div><div class="line">currentResult = (getCurrentPage()-<span class="number">1</span>)*getLimit();</div><div class="line"><span class="keyword">if</span>(currentResult&lt;<span class="number">0</span>)</div><div class="line">currentResult = <span class="number">0</span>;</div><div class="line"><span class="keyword">return</span> currentResult;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setCurrentResult</span><span class="params">(<span class="keyword">int</span> currentResult)</span> </span>&#123;</div><div class="line"><span class="keyword">this</span>.currentResult = currentResult;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getTotalPage</span><span class="params">()</span> </span>&#123;</div><div class="line"><span class="keyword">if</span>(total%limit==<span class="number">0</span>)</div><div class="line">totalPage = total/limit;</div><div class="line"><span class="keyword">else</span></div><div class="line">totalPage = total/limit+<span class="number">1</span>;</div><div class="line"><span class="keyword">return</span> totalPage;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setTotalPage</span><span class="params">(<span class="keyword">int</span> totalPage)</span> </span>&#123;</div><div class="line"><span class="keyword">this</span>.totalPage = totalPage;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getTotal</span><span class="params">()</span> </span>&#123;</div><div class="line"><span class="keyword">return</span> total;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setTotal</span><span class="params">(<span class="keyword">int</span> total)</span> </span>&#123;</div><div class="line"><span class="keyword">this</span>.total = total;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">public</span> List <span class="title">getRoot</span><span class="params">()</span> </span>&#123;</div><div class="line"><span class="keyword">return</span> root;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setRoot</span><span class="params">(List root)</span> </span>&#123;</div><div class="line"><span class="keyword">this</span>.root = root;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getStart</span><span class="params">()</span> </span>&#123;</div><div class="line"><span class="keyword">return</span> start;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setStart</span><span class="params">(<span class="keyword">int</span> start)</span> </span>&#123;</div><div class="line"><span class="keyword">this</span>.start = start;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getLimit</span><span class="params">()</span> </span>&#123;</div><div class="line"><span class="keyword">return</span> limit;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setLimit</span><span class="params">(<span class="keyword">int</span> limit)</span> </span>&#123;</div><div class="line"><span class="keyword">this</span>.limit = limit;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">public</span> String <span class="title">getWheres</span><span class="params">()</span> </span>&#123;</div><div class="line"><span class="keyword">return</span> wheres;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setWheres</span><span class="params">(String wheres)</span> </span>&#123;</div><div class="line"><span class="keyword">this</span>.wheres = wheres;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="meta">@Override</span></div><div class="line"><span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span> </span>&#123;</div><div class="line"><span class="keyword">return</span> start+<span class="string">" "</span>+total +<span class="string">" "</span> +root;</div><div class="line">&#125;</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;注意&quot;&gt;&lt;a href=&quot;#注意&quot; class=&quot;headerlink&quot; title=&quot;注意&quot;&gt;&lt;/a&gt;注意&lt;/h3&gt;&lt;p&gt;&lt;strong&gt;使用的layui版本为：layui-v1.0.9，现在新版本已经2.X了有些属性改变了，如果你的版本是2.0以上请参照我的博客：&lt;a href=&quot;https://winterchens.github.io/2017/10/25/layui-page-2.0/&quot;&gt;《 layui完美分页，ajax请求分页（真分页） 【2.0版本】》&lt;/a&gt;&lt;/strong&gt;&lt;br&gt;
    
    </summary>
    
      <category term="layui" scheme="http://winterchens.github.io/categories/layui/"/>
    
    
      <category term="layui" scheme="http://winterchens.github.io/tags/layui/"/>
    
  </entry>
  
  <entry>
    <title>Spring Boot中使用Swagger2构建强大的RESTful API文档</title>
    <link href="http://winterchens.github.io/2017/10/25/spring-boot-swagger2/"/>
    <id>http://winterchens.github.io/2017/10/25/spring-boot-swagger2/</id>
    <published>2017-10-25T12:25:00.000Z</published>
    <updated>2017-10-25T12:15:28.000Z</updated>
    
    <content type="html"><![CDATA[<p>由于Spring Boot能够快速开发、便捷部署等特性，相信有很大一部分Spring Boot的用户会用来构建RESTful API。而我们构建RESTful API的目的通常都是由于多终端的原因，这些终端会共用很多底层业务逻辑，因此我们会抽象出这样一层来同时服务于多个移动端或者Web前端。<br><a id="more"></a><br>这样一来，我们的RESTful API就有可能要面对多个开发人员或多个开发团队：IOS开发、Android开发或是Web开发等。为了减少与其他团队平时开发期间的频繁沟通成本，传统做法我们会创建一份RESTful API文档来记录所有接口细节，然而这样的做法有以下几个问题：</p><ul><li>由于接口众多，并且细节复杂（需要考虑不同的HTTP请求类型、HTTP头部信息、HTTP请求内容等），高质量地创建这份文档本身就是件非常吃力的事，下游的抱怨声不绝于耳。</li><li>随着时间推移，不断修改接口实现的时候都必须同步修改接口文档，而文档与代码又处于两个不同的媒介，除非有严格的管理机制，不然很容易导致不一致现象。</li></ul><p>为了解决上面这样的问题，本文将介绍RESTful API的重磅好伙伴Swagger2，它可以轻松的整合到Spring Boot中，并与Spring MVC程序配合组织出强大RESTful API文档。它既可以减少我们创建文档的工作量，同时说明内容又整合入实现代码中，让维护文档和修改代码整合为一体，可以让我们在修改代码逻辑的同时方便的修改文档说明。另外Swagger2也提供了强大的页面测试功能来调试每个RESTful API。具体效果如下图所示：</p><p>1<a href="http://blog.didispace.com/content/images/2016/04/swagger2_1.png" target="_blank" rel="external"></a></p><p>下面来具体介绍，如果在Spring Boot中使用Swagger2。首先，我们需要一个Spring Boot实现的RESTful API工程，若您没有做过这类内容，建议先阅读<br><a href="https://winterchens.github.io/2017/10/25/spring-boot-restful-api/">Spring Boot构建一个较为复杂的RESTful APIs和单元测试</a>。</p><p>下面的内容我们会以<a href="https://gitee.com/didispace/SpringBoot-Learning" target="_blank" rel="external">教程样例</a>中的Chapter3-1-1进行下面的实验（Chpater3-1-5是我们的结果工程，亦可参考）。</p><h3 id="添加Swagger2依赖"><a href="#添加Swagger2依赖" class="headerlink" title="添加Swagger2依赖"></a>添加Swagger2依赖</h3><p>在<code>pom.xml</code>中加入Swagger2的依赖</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>io.springfox<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>springfox-swagger2<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.2.2<span class="tag">&lt;/<span class="name">version</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>io.springfox<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>springfox-swagger-ui<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.2.2<span class="tag">&lt;/<span class="name">version</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></div></pre></td></tr></table></figure><h3 id="创建Swagger2配置类"><a href="#创建Swagger2配置类" class="headerlink" title="创建Swagger2配置类"></a>创建Swagger2配置类</h3><p>在<code>Application.java</code>同级创建Swagger2的配置类<code>Swagger2</code>。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@Configuration</span></div><div class="line"><span class="meta">@EnableSwagger</span>2</div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Swagger2</span> </span>&#123;</div><div class="line">    <span class="meta">@Bean</span></div><div class="line">    <span class="function"><span class="keyword">public</span> Docket <span class="title">createRestApi</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> <span class="keyword">new</span> Docket(DocumentationType.SWAGGER_2)</div><div class="line">                .apiInfo(apiInfo())</div><div class="line">                .select()</div><div class="line">                .apis(RequestHandlerSelectors.basePackage(<span class="string">"com.didispace.web"</span>))</div><div class="line">                .paths(PathSelectors.any())</div><div class="line">                .build();</div><div class="line">    &#125;</div><div class="line">    <span class="function"><span class="keyword">private</span> ApiInfo <span class="title">apiInfo</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> <span class="keyword">new</span> ApiInfoBuilder()</div><div class="line">                .title(<span class="string">"Spring Boot中使用Swagger2构建RESTful APIs"</span>)</div><div class="line">                .description(<span class="string">"更多Spring Boot相关文章请关注：http://blog.didispace.com/"</span>)</div><div class="line">                .termsOfServiceUrl(<span class="string">"http://blog.didispace.com/"</span>)</div><div class="line">                .contact(<span class="string">"程序猿DD"</span>)</div><div class="line">                .version(<span class="string">"1.0"</span>)</div><div class="line">                .build();</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>如上代码所示，通过<code>@Configuration</code>注解，让Spring来加载该类配置。再通过<code>@EnableSwagger2</code>注解来启用<code>Swagger2</code>。</p><p>再通过<code>createRestApi</code>函数创建<code>Docket</code>的<code>Bean</code>之后，<code>apiInfo()</code>用来创建该<code>Api</code>的基本信息（这些基本信息会展现在文档页面中）。<code>select()</code>函数返回一个<code>ApiSelectorBuilder</code>实例用来控制哪些接口暴露给<code>Swagger</code>来展现，本例采用指定扫描的包路径来定义，<code>Swagge</code>r会扫描该包下所有<code>Controller</code>定义的API，并产生文档内容（除了被<code>@ApiIgnore</code>指定的请求）。</p><h3 id="添加文档内容"><a href="#添加文档内容" class="headerlink" title="添加文档内容"></a>添加文档内容</h3><p>在完成了上述配置后，其实已经可以生产文档内容，但是这样的文档主要针对请求本身，而描述主要来源于函数等命名产生，对用户并不友好，我们通常需要自己增加一些说明来丰富文档内容。如下所示，我们通过<code>@ApiOperation</code>注解来给API增加说明、通过<code>@ApiImplicitParams</code>、<code>@ApiImplicitParam</code>注解来给参数增加说明。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@RestController</span></div><div class="line"><span class="meta">@RequestMapping</span>(value=<span class="string">"/users"</span>)     <span class="comment">// 通过这里配置使下面的映射都在/users下，可去除</span></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserController</span> </span>&#123;</div><div class="line">    <span class="keyword">static</span> Map&lt;Long, User&gt; users = Collections.synchronizedMap(<span class="keyword">new</span> HashMap&lt;Long, User&gt;());</div><div class="line">    <span class="meta">@ApiOperation</span>(value=<span class="string">"获取用户列表"</span>, notes=<span class="string">""</span>)</div><div class="line">    <span class="meta">@RequestMapping</span>(value=&#123;<span class="string">""</span>&#125;, method=RequestMethod.GET)</div><div class="line">    <span class="function"><span class="keyword">public</span> List&lt;User&gt; <span class="title">getUserList</span><span class="params">()</span> </span>&#123;</div><div class="line">        List&lt;User&gt; r = <span class="keyword">new</span> ArrayList&lt;User&gt;(users.values());</div><div class="line">        <span class="keyword">return</span> r;</div><div class="line">    &#125;</div><div class="line">    <span class="meta">@ApiOperation</span>(value=<span class="string">"创建用户"</span>, notes=<span class="string">"根据User对象创建用户"</span>)</div><div class="line">    <span class="meta">@ApiImplicitParam</span>(name = <span class="string">"user"</span>, value = <span class="string">"用户详细实体user"</span>, required = <span class="keyword">true</span>, dataType = <span class="string">"User"</span>)</div><div class="line">    <span class="meta">@RequestMapping</span>(value=<span class="string">""</span>, method=RequestMethod.POST)</div><div class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">postUser</span><span class="params">(@RequestBody User user)</span> </span>&#123;</div><div class="line">        users.put(user.getId(), user);</div><div class="line">        <span class="keyword">return</span> <span class="string">"success"</span>;</div><div class="line">    &#125;</div><div class="line">    <span class="meta">@ApiOperation</span>(value=<span class="string">"获取用户详细信息"</span>, notes=<span class="string">"根据url的id来获取用户详细信息"</span>)</div><div class="line">    <span class="meta">@ApiImplicitParam</span>(name = <span class="string">"id"</span>, value = <span class="string">"用户ID"</span>, required = <span class="keyword">true</span>, dataType = <span class="string">"Long"</span>)</div><div class="line">    <span class="meta">@RequestMapping</span>(value=<span class="string">"/&#123;id&#125;"</span>, method=RequestMethod.GET)</div><div class="line">    <span class="function"><span class="keyword">public</span> User <span class="title">getUser</span><span class="params">(@PathVariable Long id)</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> users.get(id);</div><div class="line">    &#125;</div><div class="line">    <span class="meta">@ApiOperation</span>(value=<span class="string">"更新用户详细信息"</span>, notes=<span class="string">"根据url的id来指定更新对象，并根据传过来的user信息来更新用户详细信息"</span>)</div><div class="line">    <span class="meta">@ApiImplicitParams</span>(&#123;</div><div class="line">            <span class="meta">@ApiImplicitParam</span>(name = <span class="string">"id"</span>, value = <span class="string">"用户ID"</span>, required = <span class="keyword">true</span>, dataType = <span class="string">"Long"</span>),</div><div class="line">            <span class="meta">@ApiImplicitParam</span>(name = <span class="string">"user"</span>, value = <span class="string">"用户详细实体user"</span>, required = <span class="keyword">true</span>, dataType = <span class="string">"User"</span>)</div><div class="line">    &#125;)</div><div class="line">    <span class="meta">@RequestMapping</span>(value=<span class="string">"/&#123;id&#125;"</span>, method=RequestMethod.PUT)</div><div class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">putUser</span><span class="params">(@PathVariable Long id, @RequestBody User user)</span> </span>&#123;</div><div class="line">        User u = users.get(id);</div><div class="line">        u.setName(user.getName());</div><div class="line">        u.setAge(user.getAge());</div><div class="line">        users.put(id, u);</div><div class="line">        <span class="keyword">return</span> <span class="string">"success"</span>;</div><div class="line">    &#125;</div><div class="line">    <span class="meta">@ApiOperation</span>(value=<span class="string">"删除用户"</span>, notes=<span class="string">"根据url的id来指定删除对象"</span>)</div><div class="line">    <span class="meta">@ApiImplicitParam</span>(name = <span class="string">"id"</span>, value = <span class="string">"用户ID"</span>, required = <span class="keyword">true</span>, dataType = <span class="string">"Long"</span>)</div><div class="line">    <span class="meta">@RequestMapping</span>(value=<span class="string">"/&#123;id&#125;"</span>, method=RequestMethod.DELETE)</div><div class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">deleteUser</span><span class="params">(@PathVariable Long id)</span> </span>&#123;</div><div class="line">        users.remove(id);</div><div class="line">        <span class="keyword">return</span> <span class="string">"success"</span>;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>完成上述代码添加上，启动Spring Boot程序，访问：<a href="http://localhost:8080/swagger-ui.html" target="_blank" rel="external">http://localhost:8080/swagger-ui.html</a><br>。就能看到前文所展示的RESTful API的页面。我们可以再点开具体的API请求，以POST类型的/users请求为例，可找到上述代码中我们配置的Notes信息以及参数user的描述信息，如下图所示。</p><p><img src="http://blog.didispace.com/content/images/2016/04/swagger2_2.png" alt=""></p><h3 id="API文档访问与调试"><a href="#API文档访问与调试" class="headerlink" title="API文档访问与调试"></a>API文档访问与调试</h3><p>在上图请求的页面中，我们看到user的Value是个输入框？是的，Swagger除了查看接口功能外，还提供了调试测试功能，我们可以点击上图中右侧的Model Schema（黄色区域：它指明了User的数据结构），此时Value中就有了user对象的模板，我们只需要稍适修改，点击下方“Try it out！”按钮，即可完成了一次请求调用！</p><p>此时，你也可以通过几个GET请求来验证之前的POST请求是否正确。</p><p>相比为这些接口编写文档的工作，我们增加的配置内容是非常少而且精简的，对于原有代码的侵入也在忍受范围之内。因此，在构建RESTful API的同时，加入swagger来对API文档进行管理，是个不错的选择。</p><p>完整结果示例可查看<a href="https://gitee.com/didispace/SpringBoot-Learning" target="_blank" rel="external">Chapter3-1-5</a>。</p><h3 id="参考信息"><a href="#参考信息" class="headerlink" title="参考信息"></a>参考信息</h3><ul><li><a href="http://swagger.io/" target="_blank" rel="external">Swagger官方网站</a></li></ul><p>原作者：程序员didi<br>原文出处：<a href="http://blog.didispace.com/springbootswagger2/" target="_blank" rel="external">http://blog.didispace.com/springbootswagger2/</a></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;由于Spring Boot能够快速开发、便捷部署等特性，相信有很大一部分Spring Boot的用户会用来构建RESTful API。而我们构建RESTful API的目的通常都是由于多终端的原因，这些终端会共用很多底层业务逻辑，因此我们会抽象出这样一层来同时服务于多个移动端或者Web前端。&lt;br&gt;
    
    </summary>
    
      <category term="Spring Boot" scheme="http://winterchens.github.io/categories/Spring-Boot/"/>
    
    
      <category term="Spring Boot" scheme="http://winterchens.github.io/tags/Spring-Boot/"/>
    
  </entry>
  
  <entry>
    <title>Spring Boot工程结构推荐</title>
    <link href="http://winterchens.github.io/2017/10/25/spring-boot-project/"/>
    <id>http://winterchens.github.io/2017/10/25/spring-boot-project/</id>
    <published>2017-10-25T12:18:00.000Z</published>
    <updated>2017-10-25T11:42:15.000Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>今天看了一位简书上朋友发来的工程，于是想到应该要写这么一篇。前人总结的最佳实践案例可以帮助我们免去很多不必要的麻烦。花点时间来看一下本文，绝对物超所值。<br><a id="more"></a></p><h3 id="工程结构（最佳实践）"><a href="#工程结构（最佳实践）" class="headerlink" title="工程结构（最佳实践）"></a>工程结构（最佳实践）</h3></blockquote><p>Spring Boot框架本身并没有对工程结构有特别的要求，但是按照最佳实践的工程结构可以帮助我们减少可能会遇见的坑，尤其是Spring包扫描机制的存在，如果您使用最佳实践的工程结构，可以免去不少特殊的配置工作。</p><h3 id="典型示例"><a href="#典型示例" class="headerlink" title="典型示例"></a>典型示例</h3><ul><li>root package结构：com.example.myproject</li><li>应用主类Application.java置于root package下，通常我们会在应用主类中做一些框架配置扫描等配置，  我们放在root package下可以帮助程序减少手工配置来加载到我们希望被Spring加载的内容</li><li>实体（Entity）与数据访问层（Repository）置于com.example.myproject.domain包下</li><li>逻辑层（Service）置于com.example.myproject.service包下</li><li>Web层（web）置于com.example.myproject.web包下</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line">com</div><div class="line">  +- example</div><div class="line">    +- myproject</div><div class="line">      +- Application.java</div><div class="line">      |</div><div class="line">      +- domain</div><div class="line">      |  +- Customer.java</div><div class="line">      |  +- CustomerRepository.java</div><div class="line">      |</div><div class="line">      +- service</div><div class="line">      |  +- CustomerService.java</div><div class="line">      |</div><div class="line">      +- web</div><div class="line">      |  +- CustomerController.java</div><div class="line">      |</div></pre></td></tr></table></figure><p><strong>看看您现在的功能是否这样配置，如果不是，不妨尝试改变一下，看看是否可以去掉一些@Configuration配置？</strong></p><p>原作者：程序员didi<br>原文出处：<a href="http://blog.didispace.com/springbootproject/" target="_blank" rel="external">http://blog.didispace.com/springbootproject/</a></p>]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;今天看了一位简书上朋友发来的工程，于是想到应该要写这么一篇。前人总结的最佳实践案例可以帮助我们免去很多不必要的麻烦。花点时间来看一下本文，绝对物超所值。&lt;br&gt;
    
    </summary>
    
      <category term="Spring Boot" scheme="http://winterchens.github.io/categories/Spring-Boot/"/>
    
    
      <category term="Spring Boot" scheme="http://winterchens.github.io/tags/Spring-Boot/"/>
    
  </entry>
  
  <entry>
    <title>Spring Boot构建RESTful API与单元测试</title>
    <link href="http://winterchens.github.io/2017/10/25/spring-boot-restful-api/"/>
    <id>http://winterchens.github.io/2017/10/25/spring-boot-restful-api/</id>
    <published>2017-10-25T12:18:00.000Z</published>
    <updated>2017-10-25T11:42:21.000Z</updated>
    
    <content type="html"><![CDATA[<p>首先，回顾并详细说明一下在快速入门中使用的<code>@Controller</code>、<code>@RestController</code>、<code>@RequestMapping</code>注解。如果您对Spring MVC不熟悉并且还没有尝试过快速入门案例，建议先看一下<a href="http://blog.csdn.net/winter_chen001/article/details/78330002" target="_blank" rel="external">快速入门</a>的内容。<br><a id="more"></a></p><ul><li>@Controller：修饰class，用来创建处理http请求的对象</li><li>@RestController：Spring4之后加入的注解，原来在@Controller中返回json需要@ResponseBody来配合，如果直接用@RestController替代@Controller就不需要再配置@ResponseBody，默认返回json格式。</li><li>@RequestMapping：配置url映射</li></ul><p>下面我们尝试使用Spring MVC来实现一组对User对象操作的RESTful API，配合注释详细说明在Spring MVC中如何映射HTTP请求、如何传参、如何编写单元测试。</p><p><strong>RESTful API具体设计如下：</strong></p><p><img src="http://blog.didispace.com/content/images/posts/springbootrestfulapi-1.png" alt=""></p><p>User实体定义：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">User</span> </span>&#123; </div><div class="line"> </div><div class="line">    <span class="keyword">private</span> Long id; </div><div class="line">    <span class="keyword">private</span> String name; </div><div class="line">    <span class="keyword">private</span> Integer age; </div><div class="line"> </div><div class="line">    <span class="comment">// 省略setter和getter </span></div><div class="line">     </div><div class="line">&#125;</div></pre></td></tr></table></figure><p>实现对User对象的操作接口</p><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@RestController</span> </div><div class="line"><span class="meta">@RequestMapping</span>(value=<span class="string">"/users"</span>)     <span class="comment">// 通过这里配置使下面的映射都在/users下 </span></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserController</span> </span>&#123; </div><div class="line"> </div><div class="line">    <span class="comment">// 创建线程安全的Map </span></div><div class="line">    <span class="keyword">static</span> Map&lt;Long, User&gt; users = Collections.synchronizedMap(<span class="keyword">new</span> HashMap&lt;Long, User&gt;()); </div><div class="line"> </div><div class="line">    <span class="meta">@RequestMapping</span>(value=<span class="string">"/"</span>, method=RequestMethod.GET) </div><div class="line">    <span class="function"><span class="keyword">public</span> List&lt;User&gt; <span class="title">getUserList</span><span class="params">()</span> </span>&#123; </div><div class="line">        <span class="comment">// 处理"/users/"的GET请求，用来获取用户列表 </span></div><div class="line">        <span class="comment">// 还可以通过@RequestParam从页面中传递参数来进行查询条件或者翻页信息的传递 </span></div><div class="line">        List&lt;User&gt; r = <span class="keyword">new</span> ArrayList&lt;User&gt;(users.values()); </div><div class="line">        <span class="keyword">return</span> r; </div><div class="line">    &#125; </div><div class="line"> </div><div class="line">    <span class="meta">@RequestMapping</span>(value=<span class="string">"/"</span>, method=RequestMethod.POST) </div><div class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">postUser</span><span class="params">(@ModelAttribute User user)</span> </span>&#123; </div><div class="line">        <span class="comment">// 处理"/users/"的POST请求，用来创建User </span></div><div class="line">        <span class="comment">// 除了@ModelAttribute绑定参数之外，还可以通过@RequestParam从页面中传递参数 </span></div><div class="line">        users.put(user.getId(), user); </div><div class="line">        <span class="keyword">return</span> <span class="string">"success"</span>; </div><div class="line">    &#125; </div><div class="line"> </div><div class="line">    <span class="meta">@RequestMapping</span>(value=<span class="string">"/&#123;id&#125;"</span>, method=RequestMethod.GET) </div><div class="line">    <span class="function"><span class="keyword">public</span> User <span class="title">getUser</span><span class="params">(@PathVariable Long id)</span> </span>&#123; </div><div class="line">        <span class="comment">// 处理"/users/&#123;id&#125;"的GET请求，用来获取url中id值的User信息 </span></div><div class="line">        <span class="comment">// url中的id可通过@PathVariable绑定到函数的参数中 </span></div><div class="line">        <span class="keyword">return</span> users.get(id); </div><div class="line">    &#125; </div><div class="line"> </div><div class="line">    <span class="meta">@RequestMapping</span>(value=<span class="string">"/&#123;id&#125;"</span>, method=RequestMethod.PUT) </div><div class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">putUser</span><span class="params">(@PathVariable Long id, @ModelAttribute User user)</span> </span>&#123; </div><div class="line">        <span class="comment">// 处理"/users/&#123;id&#125;"的PUT请求，用来更新User信息 </span></div><div class="line">        User u = users.get(id); </div><div class="line">        u.setName(user.getName()); </div><div class="line">        u.setAge(user.getAge()); </div><div class="line">        users.put(id, u); </div><div class="line">        <span class="keyword">return</span> <span class="string">"success"</span>; </div><div class="line">    &#125; </div><div class="line"> </div><div class="line">    <span class="meta">@RequestMapping</span>(value=<span class="string">"/&#123;id&#125;"</span>, method=RequestMethod.DELETE) </div><div class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">deleteUser</span><span class="params">(@PathVariable Long id)</span> </span>&#123; </div><div class="line">        <span class="comment">// 处理"/users/&#123;id&#125;"的DELETE请求，用来删除User </span></div><div class="line">        users.remove(id); </div><div class="line">        <span class="keyword">return</span> <span class="string">"success"</span>; </div><div class="line">    &#125; </div><div class="line"> </div><div class="line">&#125;</div></pre></td></tr></table></figure><p>下面针对该Controller编写测试用例验证正确性，具体如下。当然也可以通过浏览器插件等进行请求提交验证。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@RunWith</span>(SpringJUnit4ClassRunner.class) </div><div class="line"><span class="meta">@SpringApplicationConfiguration</span>(classes = MockServletContext.class) </div><div class="line"><span class="meta">@WebAppConfiguration</span> </div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ApplicationTests</span> </span>&#123; </div><div class="line"> </div><div class="line"><span class="keyword">private</span> MockMvc mvc; </div><div class="line"> </div><div class="line"><span class="meta">@Before</span> </div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setUp</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123; </div><div class="line">mvc = MockMvcBuilders.standaloneSetup(<span class="keyword">new</span> UserController()).build(); </div><div class="line">&#125; </div><div class="line"> </div><div class="line"><span class="meta">@Test</span> </div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testUserController</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123; </div><div class="line">        <span class="comment">// 测试UserController </span></div><div class="line">RequestBuilder request = <span class="keyword">null</span>; </div><div class="line"> </div><div class="line"><span class="comment">// 1、get查一下user列表，应该为空 </span></div><div class="line">request = get(<span class="string">"/users/"</span>); </div><div class="line">mvc.perform(request) </div><div class="line">.andExpect(status().isOk()) </div><div class="line">.andExpect(content().string(equalTo(<span class="string">"[]"</span>))); </div><div class="line"> </div><div class="line"><span class="comment">// 2、post提交一个user </span></div><div class="line">request = post(<span class="string">"/users/"</span>) </div><div class="line">.param(<span class="string">"id"</span>, <span class="string">"1"</span>) </div><div class="line">.param(<span class="string">"name"</span>, <span class="string">"测试大师"</span>) </div><div class="line">.param(<span class="string">"age"</span>, <span class="string">"20"</span>); </div><div class="line">mvc.perform(request) </div><div class="line">        .andExpect(content().string(equalTo(<span class="string">"success"</span>))); </div><div class="line"> </div><div class="line"><span class="comment">// 3、get获取user列表，应该有刚才插入的数据 </span></div><div class="line">request = get(<span class="string">"/users/"</span>); </div><div class="line">mvc.perform(request) </div><div class="line">.andExpect(status().isOk()) </div><div class="line">.andExpect(content().string(equalTo(<span class="string">"[&#123;\"id\":1,\"name\":\"测试大师\",\"age\":20&#125;]"</span>))); </div><div class="line"> </div><div class="line"><span class="comment">// 4、put修改id为1的user </span></div><div class="line">request = put(<span class="string">"/users/1"</span>) </div><div class="line">.param(<span class="string">"name"</span>, <span class="string">"测试终极大师"</span>) </div><div class="line">.param(<span class="string">"age"</span>, <span class="string">"30"</span>); </div><div class="line">mvc.perform(request) </div><div class="line">.andExpect(content().string(equalTo(<span class="string">"success"</span>))); </div><div class="line"> </div><div class="line"><span class="comment">// 5、get一个id为1的user </span></div><div class="line">request = get(<span class="string">"/users/1"</span>); </div><div class="line">mvc.perform(request) </div><div class="line">.andExpect(content().string(equalTo(<span class="string">"&#123;\"id\":1,\"name\":\"测试终极大师\",\"age\":30&#125;"</span>))); </div><div class="line"> </div><div class="line"><span class="comment">// 6、del删除id为1的user </span></div><div class="line">request = delete(<span class="string">"/users/1"</span>); </div><div class="line">mvc.perform(request) </div><div class="line">.andExpect(content().string(equalTo(<span class="string">"success"</span>))); </div><div class="line"> </div><div class="line"><span class="comment">// 7、get查一下user列表，应该为空 </span></div><div class="line">request = get(<span class="string">"/users/"</span>); </div><div class="line">mvc.perform(request) </div><div class="line">.andExpect(status().isOk()) </div><div class="line">.andExpect(content().string(equalTo(<span class="string">"[]"</span>))); </div><div class="line"> </div><div class="line">&#125; </div><div class="line"> </div><div class="line">&#125;</div></pre></td></tr></table></figure><p>至此，我们通过引入web模块（没有做其他的任何配置），就可以轻松利用Spring MVC的功能，以非常简洁的代码完成了对User对象的RESTful API的创建以及单元测试的编写。其中同时介绍了Spring MVC中最为常用的几个核心注解：<code>@Controller</code>,<code>@RestController</code>,<code>RequestMapping</code>以及一些参数绑定的注解：<code>@PathVariable</code>,<code>@ModelAttribute</code>,<code>@RequestParam</code>等。</p><h3 id="代码示例"><a href="#代码示例" class="headerlink" title="代码示例"></a>代码示例</h3><p><a href="https://gitee.com/didispace/SpringBoot-Learning" target="_blank" rel="external">springboot完整案例</a></p><p>原作者：程序员didi<br>原文出处：<a href="http://blog.didispace.com/springbootrestfulapi/" target="_blank" rel="external">http://blog.didispace.com/springbootrestfulapi/</a></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;首先，回顾并详细说明一下在快速入门中使用的&lt;code&gt;@Controller&lt;/code&gt;、&lt;code&gt;@RestController&lt;/code&gt;、&lt;code&gt;@RequestMapping&lt;/code&gt;注解。如果您对Spring MVC不熟悉并且还没有尝试过快速入门案例，建议先看一下&lt;a href=&quot;http://blog.csdn.net/winter_chen001/article/details/78330002&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;快速入门&lt;/a&gt;的内容。&lt;br&gt;
    
    </summary>
    
      <category term="Spring Boot" scheme="http://winterchens.github.io/categories/Spring-Boot/"/>
    
    
      <category term="Spring Boot" scheme="http://winterchens.github.io/tags/Spring-Boot/"/>
    
  </entry>
  
  <entry>
    <title>Spring Boot开发Web应用</title>
    <link href="http://winterchens.github.io/2017/10/25/spring-boot-web/"/>
    <id>http://winterchens.github.io/2017/10/25/spring-boot-web/</id>
    <published>2017-10-25T12:10:00.000Z</published>
    <updated>2017-10-25T12:15:55.000Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p><a href="https://winterchens.github.io/2017/10/25/spring-boot-learning-1/">Spring Boot快速入门</a>中我们完成了一个简单的RESTful Service，体验了快速开发的特性。在留言中也有朋友提到如何把处理结果渲染到页面上。那么本篇就在上篇基础上介绍一下如何进行Web应用的开发。<br><a id="more"></a></p></blockquote><h3 id="静态资源访问"><a href="#静态资源访问" class="headerlink" title="静态资源访问"></a>静态资源访问</h3><p>在我们开发Web应用的时候，需要引用大量的js、css、图片等静态资源。</p><h3 id="默认配置"><a href="#默认配置" class="headerlink" title="默认配置"></a>默认配置</h3><p>Spring Boot默认提供静态资源目录位置需置于classpath下，目录名需符合如下规则：</p><ul><li>/static</li><li>/public</li><li>/resources</li><li>/META-INF/resources</li></ul><p>举例：我们可以在<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div></pre></td><td class="code"><pre><div class="line"></div><div class="line"></div><div class="line">### 渲染Web页面</div><div class="line"></div><div class="line">在之前的示例中，我们都是通过@RestController来处理请求，所以返回的内容为json对象。那么如果需要渲染html页面的时候，要如何实现呢？</div><div class="line"></div><div class="line">### 模板引擎</div><div class="line"></div><div class="line">在动态HTML实现上Spring Boot依然可以完美胜任，并且提供了多种模板引擎的默认配置支持，所以在推荐的模板引擎下，我们可以很快的上手开发动态网站。</div><div class="line"></div><div class="line">Spring Boot提供了默认配置的模板引擎主要有以下几种：</div><div class="line"></div><div class="line">* Thymeleaf</div><div class="line">* FreeMarker</div><div class="line">* Velocity</div><div class="line">* Groovy</div><div class="line">* Mustache</div><div class="line"></div><div class="line">**Spring Boot建议使用这些模板引擎，避免使用JSP，若一定要使用JSP将无法实现Spring Boot的多种特性，具体可见后文：支持JSP的配置**</div><div class="line"></div><div class="line">当你使用上述模板引擎中的任何一个，它们默认的模板配置路径为：`src/main/resources/templates`。当然也可以修改这个路径，具体如何修改，可在后续各模板引擎的配置属性中查询并修改。</div><div class="line"></div><div class="line">### Thymeleaf</div><div class="line"></div><div class="line">hymeleaf是一个XML/XHTML/HTML5模板引擎，可用于Web与非Web环境中的应用开发。它是一个开源的Java库，基于Apache License 2.0许可，由Daniel Fernández创建，该作者还是Java加密库Jasypt的作者。</div><div class="line"></div><div class="line">Thymeleaf提供了一个用于整合Spring MVC的可选模块，在应用开发中，你可以使用Thymeleaf来完全代替JSP或其他模板引擎，如Velocity、FreeMarker等。Thymeleaf的主要目标在于提供一种可被浏览器正确显示的、格式良好的模板创建方式，因此也可以用作静态建模。你可以使用它创建经过验证的XML与HTML模板。相对于编写逻辑或代码，开发者只需将标签属性添加到模板中即可。接下来，这些标签属性就会在DOM（文档对象模型）上执行预先制定好的逻辑。</div><div class="line"></div><div class="line">示例模板：</div><div class="line"></div><div class="line">```html</div><div class="line">&lt;table&gt;</div><div class="line">  &lt;thead&gt;</div><div class="line">    &lt;tr&gt;</div><div class="line">      &lt;th th:text=&quot;#&#123;msgs.headers.name&#125;&quot;&gt;Name&lt;/td&gt;</div><div class="line">      &lt;th th:text=&quot;#&#123;msgs.headers.price&#125;&quot;&gt;Price&lt;/td&gt;</div><div class="line">    &lt;/tr&gt;</div><div class="line">  &lt;/thead&gt;</div><div class="line">  &lt;tbody&gt;</div><div class="line">    &lt;tr th:each=&quot;prod : $&#123;allProducts&#125;&quot;&gt;</div><div class="line">      &lt;td th:text=&quot;$&#123;prod.name&#125;&quot;&gt;Oranges&lt;/td&gt;</div><div class="line">      &lt;td th:text=&quot;$&#123;#numbers.formatDecimal(prod.price,1,2)&#125;&quot;&gt;0.99&lt;/td&gt;</div><div class="line">    &lt;/tr&gt;</div><div class="line">  &lt;/tbody&gt;</div><div class="line">&lt;/table&gt;</div></pre></td></tr></table></figure></p><p>可以看到Thymeleaf主要以属性的方式加入到html标签中，浏览器在解析html时，当检查到没有的属性时候会忽略，所以Thymeleaf的模板可以通过浏览器直接打开展现，这样非常有利于前后端的分离。</p><p>在Spring Boot中使用Thymeleaf，只需要引入下面依赖，并在默认的模板路径<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">```xml</div><div class="line">&lt;dependency&gt;</div><div class="line">&lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;</div><div class="line">&lt;artifactId&gt;spring-boot-starter-thymeleaf&lt;/artifactId&gt;</div><div class="line">&lt;/dependency&gt;</div></pre></td></tr></table></figure></p><p>在完成配置之后，举一个简单的例子，在快速入门工程的基础上，举一个简单的示例来通过Thymeleaf渲染一个页面。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@Controller</span></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HelloController</span> </span>&#123;</div><div class="line">    <span class="meta">@RequestMapping</span>(<span class="string">"/"</span>)</div><div class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">index</span><span class="params">(ModelMap map)</span> </span>&#123;</div><div class="line">        <span class="comment">// 加入一个属性，用来在模板中读取</span></div><div class="line">        map.addAttribute(<span class="string">"host"</span>, <span class="string">"http://blog.didispace.com"</span>);</div><div class="line">        <span class="comment">// return模板文件的名称，对应src/main/resources/templates/index.html</span></div><div class="line">        <span class="keyword">return</span> <span class="string">"index"</span>;  </div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">head</span> <span class="attr">lang</span>=<span class="string">"en"</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span> /&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span><span class="tag">&lt;/<span class="name">title</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">h1</span> <span class="attr">th:text</span>=<span class="string">"$&#123;host&#125;"</span>&gt;</span>Hello World<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></div></pre></td></tr></table></figure><p>如上页面，直接打开html页面展现Hello World，但是启动程序后，访问<a href="http://localhost:8080/，则是展示Controller中host的值：http://blog.didispace.com，做到了不破坏HTML自身内容的数据逻辑分离。" target="_blank" rel="external">http://localhost:8080/，则是展示Controller中host的值：http://blog.didispace.com，做到了不破坏HTML自身内容的数据逻辑分离。</a></p><p>更多Thymeleaf的页面语法，还请访问Thymeleaf的官方文档查询使用。</p><h3 id="Thymeleaf的默认参数配置"><a href="#Thymeleaf的默认参数配置" class="headerlink" title="Thymeleaf的默认参数配置"></a>Thymeleaf的默认参数配置</h3><p>如有需要修改默认配置的时候，只需复制下面要修改的属性到application.properties中，并修改成需要的值，如修改模板文件的扩展名，修改默认的模板路径等。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line"># Enable template caching.</div><div class="line">spring.thymeleaf.cache=true </div><div class="line"># Check that the templates location exists.</div><div class="line">spring.thymeleaf.check-template-location=true </div><div class="line"># Content-Type value.</div><div class="line">spring.thymeleaf.content-type=text/html </div><div class="line"># Enable MVC Thymeleaf view resolution.</div><div class="line">spring.thymeleaf.enabled=true </div><div class="line"># Template encoding.</div><div class="line">spring.thymeleaf.encoding=UTF-8 </div><div class="line"># Comma-separated list of view names that should be excluded from resolution.</div><div class="line">spring.thymeleaf.excluded-view-names= </div><div class="line"># Template mode to be applied to templates. See also StandardTemplateModeHandlers.</div><div class="line">spring.thymeleaf.mode=HTML5 </div><div class="line"># Prefix that gets prepended to view names when building a URL.</div><div class="line">spring.thymeleaf.prefix=classpath:/templates/ </div><div class="line"># Suffix that gets appended to view names when building a URL.</div><div class="line">spring.thymeleaf.suffix=.html  spring.thymeleaf.template-resolver-order= # Order of the template resolver in the chain. spring.thymeleaf.view-names= # Comma-separated list of view names that can be resolved.</div></pre></td></tr></table></figure><h3 id="支持JSP的配置"><a href="#支持JSP的配置" class="headerlink" title="支持JSP的配置"></a>支持JSP的配置</h3><p>Spring Boot并不建议使用，但如果一定要使用，可以参考此工程作为脚手架：<a href="https://github.com/spring-projects/spring-boot/tree/v1.3.2.RELEASE/spring-boot-samples/spring-boot-sample-web-jsp" target="_blank" rel="external">JSP支持</a></p><p><a href="https://gitee.com/didispace/SpringBoot-Learning" target="_blank" rel="external">spring boot完整案例</a></p><p>原作者：程序员didi<br>原文出处：<a href="http://blog.didispace.com/springbootweb/" target="_blank" rel="external">http://blog.didispace.com/springbootweb/</a></p>]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;&lt;a href=&quot;https://winterchens.github.io/2017/10/25/spring-boot-learning-1/&quot;&gt;Spring Boot快速入门&lt;/a&gt;中我们完成了一个简单的RESTful Service，体验了快速开发的特性。在留言中也有朋友提到如何把处理结果渲染到页面上。那么本篇就在上篇基础上介绍一下如何进行Web应用的开发。&lt;br&gt;
    
    </summary>
    
      <category term="Spring Boot" scheme="http://winterchens.github.io/categories/Spring-Boot/"/>
    
    
      <category term="Spring Boot" scheme="http://winterchens.github.io/tags/Spring-Boot/"/>
    
  </entry>
  
  <entry>
    <title>Spring Boot快速入门</title>
    <link href="http://winterchens.github.io/2017/10/25/spring-boot-learning-1/"/>
    <id>http://winterchens.github.io/2017/10/25/spring-boot-learning-1/</id>
    <published>2017-10-25T11:55:00.000Z</published>
    <updated>2017-10-25T11:42:06.000Z</updated>
    
    <content type="html"><![CDATA[<h3 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h3><p>在您第1次接触和学习Spring框架的时候，是否因为其繁杂的配置而退却了？在你第n次使用Spring框架的时候，是否觉得一堆反复黏贴的配置有一些厌烦？那么您就不妨来试试使用Spring Boot来让你更易上手，更简单快捷地构建Spring应用！<br><a id="more"></a><br>Spring Boot让我们的Spring应用变的更轻量化。比如：你可以仅仅依靠一个Java类来运行一个Spring引用。你也可以打包你的应用为jar并通过使用java -jar来运行你的Spring Web应用。</p><p>Spring Boot的主要优点：</p><ul><li>为所有Spring开发者更快的入门</li><li>开箱即用，提供各种默认配置来简化项目配置</li><li>内嵌式容器简化Web项目</li><li>没有冗余代码生成和XML配置的要求</li></ul><h3 id="快速入门"><a href="#快速入门" class="headerlink" title="快速入门"></a>快速入门</h3><p>本章主要目标完成Spring Boot基础项目的构建，并且实现一个简单的Http请求处理，通过这个例子对Spring Boot有一个初步的了解，并体验其结构简单、开发快速的特性。</p><h3 id="系统要求："><a href="#系统要求：" class="headerlink" title="系统要求："></a>系统要求：</h3><ul><li>Java 7及以上</li><li>Spring Framework 4.1.5及以上</li></ul><p>**本文采用<figure class="highlight java"><figcaption><span>1.8.0_73```、```Spring Boot 1.3.2```调试通过。**</span></figcaption><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div></pre></td><td class="code"><pre><div class="line"></div><div class="line"></div><div class="line">### 使用Maven构建项目</div><div class="line"></div><div class="line"><span class="number">1</span>. 通过SPRING INITIALIZR工具产生基础项目</div><div class="line"> <span class="number">1</span>. 访问：http:<span class="comment">//start.spring.io/</span></div><div class="line"> <span class="number">2</span>. 选择构建工具Maven Project、Spring Boot版本<span class="number">1.3</span>.2以及一些工程基本信息，可参考下图所示</div><div class="line"></div><div class="line">![](http:<span class="comment">//blog.didispace.com/content/images/2016/02/chapter1-1.png)</span></div><div class="line"></div><div class="line"> <span class="number">3</span>. 点击Generate Project下载项目压缩包</div><div class="line"><span class="number">2</span>. 解压项目包，并用IDE以Maven项目导入，以IntelliJ IDEA <span class="number">14</span>为例：</div><div class="line"><span class="number">1</span>. 菜单中选择File–&gt;New–&gt;Project from Existing Sources...</div><div class="line"><span class="number">2</span>. 选择解压后的项目文件夹，点击OK</div><div class="line"><span class="number">3</span>. 点击Import project from external model并选择Maven，点击Next到底为止。</div><div class="line"><span class="number">4</span>. 若你的环境有多个版本的JDK，注意到选择Java SDK的时候请选择Java <span class="number">7</span>以上的版本</div><div class="line"></div><div class="line"></div><div class="line">### 项目结构解析</div><div class="line"></div><div class="line">![项目结构](http:<span class="comment">//blog.didispace.com/content/images/2016/02/chapter1-2.png)</span></div><div class="line"></div><div class="line">通过上面步骤完成了基础项目的创建，如上图所示，Spring Boot的基础结构共三个文件（具体路径根据用户生成项目时填写的Group所有差异）：</div><div class="line"></div><div class="line">* ```src/main/java```下的程序入口：```Chapter1Application</div></pre></td></tr></table></figure></p><ul><li><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">* ```src/test/```下的测试入口：```Chapter1ApplicationTests</div></pre></td></tr></table></figure></li></ul><p>生成的<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">### 引入Web模块</div><div class="line"></div><div class="line">当前的```pom.xml```内容如下，仅引入了两个模块：</div><div class="line"></div><div class="line">* spring-boot-starter：核心模块，包括自动配置支持、日志和YAML</div><div class="line">* spring-boot-starter-test：测试模块，包括JUnit、Hamcrest、Mockito</div><div class="line"></div><div class="line">```xml</div><div class="line">&lt;dependencies&gt;</div><div class="line">    &lt;dependency&gt;</div><div class="line">        &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;</div><div class="line">&lt;artifactId&gt;spring-boot-starter&lt;/artifactId&gt;</div><div class="line">&lt;/dependency&gt;</div><div class="line">&lt;dependency&gt;</div><div class="line">&lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;</div><div class="line">&lt;artifactId&gt;spring-boot-starter-test&lt;/artifactId&gt;</div><div class="line">&lt;scope&gt;test&lt;/scope&gt;</div><div class="line">&lt;/dependency&gt;</div><div class="line">&lt;/dependencies&gt;</div></pre></td></tr></table></figure></p><p>引入Web模块，需添加spring-boot-starter-web模块：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-web<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></div></pre></td></tr></table></figure><h3 id="编写HelloWorld服务"><a href="#编写HelloWorld服务" class="headerlink" title="编写HelloWorld服务"></a>编写HelloWorld服务</h3><ul><li>创建package命名为com.didispace.web（根据实际情况修改）</li><li>创建HelloController类，内容如下</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@RestController</span></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HelloController</span> </span>&#123;</div><div class="line">    <span class="meta">@RequestMapping</span>(<span class="string">"/hello"</span>)</div><div class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">index</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> <span class="string">"Hello World"</span>;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><ul><li>启动主程序，打开浏览器访问<a href="http://localhost:8080/hello，可以看到页面输出" target="_blank" rel="external">http://localhost:8080/hello，可以看到页面输出</a><figure class="highlight plain"><figcaption><span>World```</span></figcaption><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">### 编写单元测试用例</div><div class="line"></div><div class="line">打开的```src/test/```下的测试入口```Chapter1ApplicationTests```类。下面编写一个简单的单元测试来模拟http请求，具体如下：</div><div class="line"></div><div class="line">```java</div><div class="line">@RunWith(SpringJUnit4ClassRunner.class)</div><div class="line">@SpringApplicationConfiguration(classes = MockServletContext.class)</div><div class="line">@WebAppConfiguration</div><div class="line">public class Chapter1ApplicationTests &#123;</div><div class="line">private MockMvc mvc;</div><div class="line">@Before</div><div class="line">public void setUp() throws Exception &#123;</div><div class="line">mvc = MockMvcBuilders.standaloneSetup(new HelloController()).build();</div><div class="line">&#125;</div><div class="line">@Test</div><div class="line">public void getHello() throws Exception &#123;</div><div class="line">mvc.perform(MockMvcRequestBuilders.get(&quot;/hello&quot;).accept(MediaType.APPLICATION_JSON))</div><div class="line">.andExpect(status().isOk())</div><div class="line">.andExpect(content().string(equalTo(&quot;Hello World&quot;)));</div><div class="line">&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></li></ul><p>使用<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">* 注意引入下面内容，让```status```、```content```、```equalTo```函数可用</div><div class="line"></div><div class="line">```java</div><div class="line">import static org.hamcrest.Matchers.equalTo;</div><div class="line">import static org.springframework.test.web.servlet.result.MockMvcResultMatchers.content;</div><div class="line">import static org.springframework.test.web.servlet.result.MockMvcResultMatchers.status;</div></pre></td></tr></table></figure></p><p>至此已完成目标，通过Maven构建了一个空白Spring Boot项目，再通过引入web模块实现了一个简单的请求处理。</p><p>原作者：程序员didi<br>原文出处：<a href="http://blog.didispace.com/spring-boot-learning-1/" target="_blank" rel="external">http://blog.didispace.com/spring-boot-learning-1/</a></p>]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;简介&quot;&gt;&lt;a href=&quot;#简介&quot; class=&quot;headerlink&quot; title=&quot;简介&quot;&gt;&lt;/a&gt;简介&lt;/h3&gt;&lt;p&gt;在您第1次接触和学习Spring框架的时候，是否因为其繁杂的配置而退却了？在你第n次使用Spring框架的时候，是否觉得一堆反复黏贴的配置有一些厌烦？那么您就不妨来试试使用Spring Boot来让你更易上手，更简单快捷地构建Spring应用！&lt;br&gt;
    
    </summary>
    
      <category term="Spring Boot" scheme="http://winterchens.github.io/categories/Spring-Boot/"/>
    
    
      <category term="Spring Boot" scheme="http://winterchens.github.io/tags/Spring-Boot/"/>
    
  </entry>
  
  <entry>
    <title>Spring Cloud构建微服务架构：服务网关（过滤器）【Dalston版】</title>
    <link href="http://winterchens.github.io/2017/10/25/spring-cloud-starter-dalston-6-3/"/>
    <id>http://winterchens.github.io/2017/10/25/spring-cloud-starter-dalston-6-3/</id>
    <published>2017-10-25T11:46:00.000Z</published>
    <updated>2017-10-25T12:14:15.000Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>在前两篇文章：<a href="https://winterchens.github.io/2017/10/25/spring-cloud-starter-dalston-6-1/">服务网关（基础）</a>、<a href="https://winterchens.github.io/2017/10/25/spring-cloud-starter-dalston-6-2/">服务网关（路由配置）</a>中，我们了解了Spring Cloud Zuul作为网关所具备的最基本功能：路由。本文我们将具体介绍一下Spring Cloud Zuul的另一项核心功能：过滤器。<br><a id="more"></a></p><h3 id="过滤器的作用"><a href="#过滤器的作用" class="headerlink" title="过滤器的作用"></a>过滤器的作用</h3></blockquote><p>通过上面所述的两篇我们，我们已经能够实现请求的路由功能，所以我们的微服务应用提供的接口就可以通过统一的API网关入口被客户端访问到了。但是，每个客户端用户请求微服务应用提供的接口时，它们的访问权限往往都需要有一定的限制，系统并不会将所有的微服务接口都对它们开放。然而，目前的服务路由并没有限制权限这样的功能，所有请求都会被毫无保留地转发到具体的应用并返回结果，为了实现对客户端请求的安全校验和权限控制，最简单和粗暴的方法就是为每个微服务应用都实现一套用于校验签名和鉴别权限的过滤器或拦截器。不过，这样的做法并不可取，它会增加日后的系统维护难度，因为同一个系统中的各种校验逻辑很多情况下都是大致相同或类似的，这样的实现方式会使得相似的校验逻辑代码被分散到了各个微服务中去，冗余代码的出现是我们不希望看到的。所以，比较好的做法是将这些校验逻辑剥离出去，构建出一个独立的鉴权服务。在完成了剥离之后，有不少开发者会直接在微服务应用中通过调用鉴权服务来实现校验，但是这样的做法仅仅只是解决了鉴权逻辑的分离，并没有在本质上将这部分不属于业余的逻辑拆分出原有的微服务应用，冗余的拦截器或过滤器依然会存在。</p><p>对于这样的问题，更好的做法是通过前置的网关服务来完成这些非业务性质的校验。由于网关服务的加入，外部客户端访问我们的系统已经有了统一入口，既然这些校验与具体业务无关，那何不在请求到达的时候就完成校验和过滤，而不是转发后再过滤而导致更长的请求延迟。同时，通过在网关中完成校验和过滤，微服务应用端就可以去除各种复杂的过滤器和拦截器了，这使得微服务应用的接口开发和测试复杂度也得到了相应的降低。</p><p>为了在API网关中实现对客户端请求的校验，我们将需要使用到Spring Cloud Zuul的另外一个核心功能：过滤器。</p><p>Zuul允许开发者在API网关上通过定义过滤器来实现对请求的拦截与过滤，实现的方法非常简单，我们只需要继承ZuulFilter抽象类并实现它定义的四个抽象函数就可以完成对请求的拦截和过滤了。</p><h3 id="过滤器的实现"><a href="#过滤器的实现" class="headerlink" title="过滤器的实现"></a>过滤器的实现</h3><p>比如下面的代码，我们定义了一个简单的Zuul过滤器，它实现了在请求被路由之前检查HttpServletRequest中是否有accessToken参数，若有就进行路由，若没有就拒绝访问，返回401 Unauthorized错误。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AccessFilter</span> <span class="keyword">extends</span> <span class="title">ZuulFilter</span>  </span>&#123;</div><div class="line">    <span class="keyword">private</span> <span class="keyword">static</span> Logger log = LoggerFactory.getLogger(AccessFilter.class);</div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">filterType</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> <span class="string">"pre"</span>;</div><div class="line">    &#125;</div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">filterOrder</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">    &#125;</div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">shouldFilter</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> <span class="keyword">true</span>;</div><div class="line">    &#125;</div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> Object <span class="title">run</span><span class="params">()</span> </span>&#123;</div><div class="line">        RequestContext ctx = RequestContext.getCurrentContext();</div><div class="line">        HttpServletRequest request = ctx.getRequest();</div><div class="line">      log.info(<span class="string">"send &#123;&#125; request to &#123;&#125;"</span>, request.getMethod(), request.getRequestURL().toString());</div><div class="line">        Object accessToken = request.getParameter(<span class="string">"accessToken"</span>);</div><div class="line">        <span class="keyword">if</span>(accessToken == <span class="keyword">null</span>) &#123;</div><div class="line">            log.warn(<span class="string">"access token is empty"</span>);</div><div class="line">            ctx.setSendZuulResponse(<span class="keyword">false</span>);</div><div class="line">            ctx.setResponseStatusCode(<span class="number">401</span>);</div><div class="line">            <span class="keyword">return</span> <span class="keyword">null</span>;</div><div class="line">        &#125;</div><div class="line">        log.info(<span class="string">"access token ok"</span>);</div><div class="line">        <span class="keyword">return</span> <span class="keyword">null</span>;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>在上面实现的过滤器代码中，我们通过继承<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">* ```filterType```：过滤器的类型，它决定过滤器在请求的哪个生命周期中执行。这里定义为```pre```，代表会在请求被路由之前执行。</div><div class="line">* ```filterOrder```：过滤器的执行顺序。当请求在一个阶段中存在多个过滤器时，需要根据该方法返回的值来依次执行。</div><div class="line">* ```shouldFilter```：判断该过滤器是否需要被执行。这里我们直接返回了```true```，因此该过滤器对所有请求都会生效。实际运用中我们可以利用该函数来指定过滤器的有效范围。</div><div class="line">* ```run```：过滤器的具体逻辑。这里我们通过```ctx.setSendZuulResponse(false)```令```zuul```过滤该请求，不对其进行路由，然后通过```ctx.setResponseStatusCode(401)```设置了其返回的错误码，当然我们也可以进一步优化我们的返回，比如，通过```ctx.setResponseBody(body)```对返回```body```内容进行编辑等。</div><div class="line"></div><div class="line">在实现了自定义过滤器之后，它并不会直接生效，我们还需要为其创建具体的Bean才能启动该过滤器，比如，在应用主类中增加如下内容：</div><div class="line"></div><div class="line">```java</div><div class="line">@EnableZuulProxy</div><div class="line">@SpringCloudApplication</div><div class="line">public class Application &#123;</div><div class="line">public static void main(String[] args) &#123;</div><div class="line">new SpringApplicationBuilder(Application.class).web(true).run(args);</div><div class="line">&#125;</div><div class="line">@Bean</div><div class="line">public AccessFilter accessFilter() &#123;</div><div class="line">return new AccessFilter();</div><div class="line">&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p><p>在对<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">* http://localhost:1101/api-a/hello：返回401错误</div><div class="line">* http://localhost:1101/api-a/hello&amp;accessToken=token：正确路由到```hello-service```的```/hello```接口，并返回```Hello World</div></pre></td></tr></table></figure></p><p>到这里，对于Spring Cloud Zuul过滤器的基本功能就以介绍完毕。读者可以根据自己的需要在服务网关上定义一些与业务无关的通用逻辑实现对请求的过滤和拦截，比如：签名校验、权限校验、请求限流等功能。</p><h3 id="进阶阅读"><a href="#进阶阅读" class="headerlink" title="进阶阅读"></a>进阶阅读</h3><p>为了更好的理解和扩展Spring Cloud Zuul，我们可以阅读下面这些文章，有助于深入的了解其内部运行机制，以指导我们合理的编写过滤器逻辑：</p><ul><li><a href="http://blog.didispace.com/spring-cloud-source-zuul/" target="_blank" rel="external">Spring Cloud源码分析（四）Zuul：核心过滤器</a></li><li><a href="http://blog.didispace.com/spring-cloud-zuul-cookie-redirect/" target="_blank" rel="external">Spring Cloud实战小贴士：Zuul处理Cookie和重定向</a></li><li><a href="http://blog.didispace.com/spring-cloud-zuul-exception/" target="_blank" rel="external">Spring Cloud实战小贴士：Zuul统一异常处理（一）</a></li><li><a href="http://blog.didispace.com/spring-cloud-zuul-exception-2/" target="_blank" rel="external">Spring Cloud实战小贴士：Zuul统一异常处理（二）</a></li><li><a href="http://blog.didispace.com/spring-cloud-zuul-exception-3/" target="_blank" rel="external">Spring Cloud实战小贴士：Zuul统一异常处理（三）【Dalston版】</a></li></ul><p>原作者：程序员didi<br>原文出处：<a href="http://blog.didispace.com/spring-cloud-starter-dalston-6-3/" target="_blank" rel="external">http://blog.didispace.com/spring-cloud-starter-dalston-6-3/</a></p>]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;在前两篇文章：&lt;a href=&quot;https://winterchens.github.io/2017/10/25/spring-cloud-starter-dalston-6-1/&quot;&gt;服务网关（基础）&lt;/a&gt;、&lt;a href=&quot;https://winterchens.github.io/2017/10/25/spring-cloud-starter-dalston-6-2/&quot;&gt;服务网关（路由配置）&lt;/a&gt;中，我们了解了Spring Cloud Zuul作为网关所具备的最基本功能：路由。本文我们将具体介绍一下Spring Cloud Zuul的另一项核心功能：过滤器。&lt;br&gt;
    
    </summary>
    
      <category term="Spring Cloud" scheme="http://winterchens.github.io/categories/Spring-Cloud/"/>
    
    
      <category term="Spring Cloud" scheme="http://winterchens.github.io/tags/Spring-Cloud/"/>
    
  </entry>
  
  <entry>
    <title>Spring Cloud构建微服务架构：服务网关（路由配置）【Dalston版】</title>
    <link href="http://winterchens.github.io/2017/10/25/spring-cloud-starter-dalston-6-2/"/>
    <id>http://winterchens.github.io/2017/10/25/spring-cloud-starter-dalston-6-2/</id>
    <published>2017-10-25T11:39:00.000Z</published>
    <updated>2017-10-25T12:13:32.000Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>在上一篇<a href="https://winterchens.github.io/2017/10/25/spring-cloud-starter-dalston-6-1/">《Spring Cloud构建微服务架构：服务网关（基础）》</a>一文中，我们通过使用Spring Cloud Zuul构建了一个基础的API网关服务，同时也演示了Spring Cloud Zuul基于服务的自动路由功能。在本文中，我们将进一步详细地介绍关于Spring Cloud Zuul的路由功能，以帮助读者可以更好的理解和使用它，以完成更复杂的路由配置。<br><a id="more"></a></p><h3 id="传统路由配置"><a href="#传统路由配置" class="headerlink" title="传统路由配置"></a>传统路由配置</h3></blockquote><p>所谓的传统路由配置方式就是在不依赖于服务发现机制的情况下，通过在配置文件中具体指定每个路由表达式与服务实例的映射关系来实现API网关对外部请求的路由。</p><p>没有Eureka和Consul的服务治理框架帮助的时候，我们需要根据服务实例的数量采用不同方式的配置来实现路由规则：</p><ul><li>单实例配置：通过一组<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">```properties</div><div class="line">zuul.routes.user-service.path=/user-service/**</div><div class="line">zuul.routes.user-service.url=http://localhost:8080/</div></pre></td></tr></table></figure></li></ul><p>该配置实现了对符合<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"></div><div class="line"></div><div class="line">* 多实例配置：通过一组zuul.routes.&lt;route&gt;.path与zuul.routes.&lt;route&gt;.serviceId参数对的方式配置，比如：</div><div class="line"></div><div class="line">```properties</div><div class="line">zuul.routes.user-service.path=/user-service/**</div><div class="line">zuul.routes.user-service.serviceId=user-service</div><div class="line">ribbon.eureka.enabled=false</div><div class="line">user-service.ribbon.listOfServers=http://localhost:8080/,http://localhost:8081/</div></pre></td></tr></table></figure></p><p>该配置实现了对符合<figure class="highlight plain"><figcaption><span>Cloud Ribbon的配合。由于在Spring Cloud Zuul中自带了对Ribbon的依赖，所以我们只需要做一些配置即可，比如上面示例中关于Ribbon的各个配置，它们的具体作用如下：</span></figcaption><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">* ```ribbon.eureka.enabled```：由于```zuul.routes.&lt;route&gt;.serviceId```指定的是服务名称，默认情况下Ribbon会根据服务发现机制来获取配置服务名对应的实例清单。但是，该示例并没有整合类似Eureka之类的服务治理框架，所以需要将该参数设置为false，不然配置的```serviceId```是获取不到对应实例清单的。</div><div class="line">* ```user-service.ribbon.listOfServers```：该参数内容与```zuul.routes.&lt;route&gt;.serviceId```的配置相对应，开头的```user-service```对应了```serviceId```的值，这两个参数的配置相当于在该应用内部手工维护了服务与实例的对应关系。</div><div class="line"></div><div class="line">不论是单实例还是多实例的配置方式，我们都需要为每一对映射关系指定一个名称，也就是上面配置中的```&lt;route&gt;```，每一个```&lt;route&gt;```就对应了一条路由规则。每条路由规则都需要通过```path```属性来定义一个用来匹配客户端请求的路径表达式，并通过```url```或```serviceId```属性来指定请求表达式映射具体实例地址或服务名。</div><div class="line"></div><div class="line">### 服务路由配置</div><div class="line"></div><div class="line">服务路由我们在上一篇中也已经有过基础的介绍和体验，Spring Cloud Zuul通过与Spring Cloud Eureka的整合，实现了对服务实例的自动化维护，所以在使用服务路由配置的时候，我们不需要向传统路由配置方式那样为```serviceId```去指定具体的服务实例地址，只需要通过一组```zuul.routes.&lt;route&gt;.path```与```zuul.routes.&lt;route&gt;.serviceId```参数对的方式配置即可。</div><div class="line"></div><div class="line">比如下面的示例，它实现了对符合```/user-service/**```规则的请求路径转发到名为```user-service```的服务实例上去的路由规则。其中```&lt;route&gt;```可以指定为任意的路由名称。</div><div class="line"></div><div class="line">```properties</div><div class="line">zuul.routes.user-service.path=/user-service/**</div><div class="line">zuul.routes.user-service.serviceId=user-service</div></pre></td></tr></table></figure></p><p>对于面向服务的路由配置，除了使用<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">```properties</div><div class="line"></div><div class="line">zuul.routes.user-service=/user-service/**</div></pre></td></tr></table></figure></p><p>传统路由的映射方式比较直观且容易理解，API网关直接根据请求的URL路径找到最匹配的<code>path</code>表达式，直接转发给该表达式对应的<code>url</code>或对应<code>serviceId</code>下配置的实例地址，以实现外部请求的路由。那么当采用<code>path</code>与<code>serviceId</code>以服务路由方式实现时候，没有配置任何实例地址的情况下，外部请求经过API网关的时候，它是如何被解析并转发到服务具体实例的呢？</p><p>在Spring Cloud Netflix中，Zuul巧妙的整合了Eureka来实现面向服务的路由。实际上，我们可以直接将API网关也看做是Eureka服务治理下的一个普通微服务应用。它除了会将自己注册到Eureka服务注册中心上之外，也会从注册中心获取所有服务以及它们的实例清单。所以，在Eureka的帮助下，API网关服务本身就已经维护了系统中所有serviceId与实例地址的映射关系。当有外部请求到达API网关的时候，根据请求的URL路径找到最佳匹配的<code>path</code>规则，API网关就可以知道要将该请求路由到哪个具体的<code>serviceId</code>上去。由于在API网关中已经知道<code>serviceId</code>对应服务实例的地址清单，那么只需要通过Ribbon的负载均衡策略，直接在这些清单中选择一个具体的实例进行转发就能完成路由工作了。</p><h3 id="示例仓库"><a href="#示例仓库" class="headerlink" title="示例仓库"></a>示例仓库</h3><ul><li>码云：<a href="https://gitee.com/didispace/SpringCloud-Learning/tree/master/2-Dalston%E7%89%88%E6%95%99%E7%A8%8B%E7%A4%BA%E4%BE%8B" target="_blank" rel="external">点击查看</a></li><li>GitHub:<a href="https://github.com/dyc87112/SpringCloud-Learning/tree/master/2-Dalston%E7%89%88%E6%95%99%E7%A8%8B%E7%A4%BA%E4%BE%8B" target="_blank" rel="external">点击查看</a></li></ul><p>原作者：程序员didi<br>原文出处：<a href="http://blog.didispace.com/spring-cloud-starter-dalston-6-2/" target="_blank" rel="external">http://blog.didispace.com/spring-cloud-starter-dalston-6-2/</a></p>]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;在上一篇&lt;a href=&quot;https://winterchens.github.io/2017/10/25/spring-cloud-starter-dalston-6-1/&quot;&gt;《Spring Cloud构建微服务架构：服务网关（基础）》&lt;/a&gt;一文中，我们通过使用Spring Cloud Zuul构建了一个基础的API网关服务，同时也演示了Spring Cloud Zuul基于服务的自动路由功能。在本文中，我们将进一步详细地介绍关于Spring Cloud Zuul的路由功能，以帮助读者可以更好的理解和使用它，以完成更复杂的路由配置。&lt;br&gt;
    
    </summary>
    
      <category term="Spring Cloud" scheme="http://winterchens.github.io/categories/Spring-Cloud/"/>
    
    
      <category term="Spring Cloud" scheme="http://winterchens.github.io/tags/Spring-Cloud/"/>
    
  </entry>
  
  <entry>
    <title>Spring Cloud构建微服务架构：服务网关（基础）【Dalston版】</title>
    <link href="http://winterchens.github.io/2017/10/25/spring-cloud-starter-dalston-6-1/"/>
    <id>http://winterchens.github.io/2017/10/25/spring-cloud-starter-dalston-6-1/</id>
    <published>2017-10-25T11:30:00.000Z</published>
    <updated>2017-10-25T11:41:11.000Z</updated>
    
    <content type="html"><![CDATA[<p>通过之前几篇Spring Cloud中几个核心组件的介绍，我们已经可以构建一个简略的（不够完善）微服务架构了。比如下图所示：<br><a id="more"></a><br><img src="http://blog.didispace.com/content/images/2016/07/-----.png" alt=""></p><p>我们使用Spring Cloud Netflix中的Eureka实现了服务注册中心以及服务注册与发现；而服务间通过Ribbon或Feign实现服务的消费以及均衡负载；通过Spring Cloud Config实现了应用多环境的外部化配置以及版本管理。为了使得服务集群更为健壮，使用Hystrix的融断机制来避免在微服务架构中个别服务出现异常时引起的故障蔓延。</p><p>在该架构中，我们的服务集群包含：内部服务Service A和Service B，他们都会注册与订阅服务至Eureka Server，而Open Service是一个对外的服务，通过均衡负载公开至服务调用方。本文我们把焦点聚集在对外服务这块，这样的实现是否合理，或者是否有更好的实现方式呢？</p><p>先来说说这样架构需要做的一些事儿以及存在的不足：</p><ul><li>首先，破坏了服务无状态特点。为了保证对外服务的安全性，我们需要实现对服务访问的权限控制，而开放服务的权限控制机制将会贯穿并污染整个开放服务的业务逻辑，这会带来的最直接问题是，破坏了服务集群中REST API无状态的特点。从具体开发和测试的角度来说，在工作中除了要考虑实际的业务逻辑之外，还需要额外可续对接口访问的控制处理。</li><li>其次，无法直接复用既有接口。当我们需要对一个即有的集群内访问接口，实现外部服务访问时，我们不得不通过在原有接口上增加校验逻辑，或增加一个代理调用来实现权限控制，无法直接复用原有的接口。</li></ul><p>为了解决上面这些问题，我们需要将权限控制这样的东西从我们的服务单元中抽离出去，而最适合这些逻辑的地方就是处于对外访问最前端的地方，我们需要一个更强大一些的均衡负载器，它就是本文将来介绍的：服务网关。</p><p>服务网关是微服务架构中一个不可或缺的部分。通过服务网关统一向外系统提供REST API的过程中，除了具备服务路由、均衡负载功能之外，它还具备了权限控制等功能。Spring Cloud Netflix中的Zuul就担任了这样的一个角色，为微服务架构提供了前门保护的作用，同时将权限控制这些较重的非业务逻辑内容迁移到服务路由层面，使得服务集群主体能够具备更高的可复用性和可测试性。</p><p>下面我们通过实例例子来使用一下Zuul来作为服务的路有功能。</p><h3 id="准备工作"><a href="#准备工作" class="headerlink" title="准备工作"></a>准备工作</h3><p>在构建服务网关之前，我们先准备一下网关内部的微服务，可以直接使用前几篇编写的内容，比如：</p><ul><li>eureka-client</li><li>eureka-consumer</li></ul><p>由于我们用了基于eureka的服务，所以我们可以使用我的公益注册中心：<a href="http://eureka.didispace.com/" target="_blank" rel="external">http://eureka.didispace.com/</a></p><p>这些服务可从我的仓库中直接获取：</p><ul><li>Github：<a href="https://github.com/dyc87112/SpringCloud-Learning" target="_blank" rel="external">https://github.com/dyc87112/SpringCloud-Learning</a></li><li>码云：<a href="https://gitee.com/didispace/SpringCloud-Learning" target="_blank" rel="external">https://gitee.com/didispace/SpringCloud-Learning</a></li></ul><p>在启动了eureka-client和eureka-consumer的实例之后，所有的准备工作就以就绪，下面我们来试试使用Spring Cloud Zuul来实现服务网关的功能。</p><h3 id="构建服务网关"><a href="#构建服务网关" class="headerlink" title="构建服务网关"></a>构建服务网关</h3><p>使用Spring Cloud Zuul来构建服务网关的基础步骤非常简单，只需要下面几步：</p><ul><li>创建一个基础的Spring Boot项目，命名为：api-gateway。并在pom.xml中引入依赖：</li></ul><figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">parent</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-parent<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.5.4.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">relativePath</span>/&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">parent</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-zuul<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></div><div class="line">  <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-eureka<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></div><div class="line">  <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">dependencyManagement</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></div><div class="line">      <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></div><div class="line">      <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-dependencies<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></div><div class="line">      <span class="tag">&lt;<span class="name">version</span>&gt;</span>Dalston.SR1<span class="tag">&lt;/<span class="name">version</span>&gt;</span></div><div class="line">      <span class="tag">&lt;<span class="name">type</span>&gt;</span>pom<span class="tag">&lt;/<span class="name">type</span>&gt;</span></div><div class="line">      <span class="tag">&lt;<span class="name">scope</span>&gt;</span>import<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></div><div class="line">  <span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">dependencyManagement</span>&gt;</span></div></pre></td></tr></table></figure><p>创建应用主类，并使用@EnableZuulProxy注解开启Zuul的功能。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@EnableZuulProxy</span></div><div class="line"><span class="meta">@SpringCloudApplication</span></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Application</span> </span>&#123;</div><div class="line">  </div><div class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</div><div class="line">    <span class="keyword">new</span> SpringApplicationBuilder(Application.class).web(<span class="keyword">true</span>).run(args);</div><div class="line">  &#125;</div><div class="line">  </div><div class="line">&#125;</div></pre></td></tr></table></figure><ul><li>创建配置文件application.yaml，并加入服务名、端口号、eureka注册中心的地址：</li></ul><figure class="highlight yaml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="attr">spring:</span></div><div class="line"><span class="attr">  application:</span></div><div class="line"><span class="attr">    name:</span> <span class="string">api-gateway</span></div><div class="line"><span class="attr">server:</span></div><div class="line"><span class="attr">  port:</span> <span class="number">1101</span></div><div class="line"><span class="attr">eureka:</span></div><div class="line"><span class="attr">  client:</span></div><div class="line"><span class="attr">    serviceUrl:</span></div><div class="line"><span class="attr">      defaultZone:</span> <span class="attr">http://eureka.didispace.com/eureka/</span></div></pre></td></tr></table></figure><p>到这里，一个基于Spring Cloud Zuul服务网关就已经构建完毕。启动该应用，一个默认的服务网关就构建完毕了。由于Spring Cloud Zuul在整合了Eureka之后，具备默认的服务路由功能，即：当我们这里构建的<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"></div><div class="line"></div><div class="line">* 转发到```eureka-client```服务的请求规则为：```/eureka-client/**</div></pre></td></tr></table></figure></p><ul><li>转发到<code>eureka-consumer</code>服务的请求规则为：<code>/eureka-consumer/**</code></li></ul><p>最后，我们可以通过访问1101端口的服务网关来验证上述路由的正确性：</p><ul><li>比如访问：<a href="http://localhost:1101/eureka-client/dc" target="_blank" rel="external">http://localhost:1101/eureka-client/dc</a> ，该请求将最终被路由到eureka-client的/dc接口上。</li></ul><h3 id="本篇小结"><a href="#本篇小结" class="headerlink" title="本篇小结"></a>本篇小结</h3><p>本篇，我们介绍了构建服务网关的基础。通过上面的构建内容，我们已经为所有内部服务提供了一个统一的对外入口，同时对于服务的路由都是自动创建了，减少了传统方式大量的运维配置工作。</p><p>原作者：程序员didi<br>原文出处：<a href="http://blog.didispace.com/spring-cloud-starter-dalston-6-1/" target="_blank" rel="external">http://blog.didispace.com/spring-cloud-starter-dalston-6-1/</a></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;通过之前几篇Spring Cloud中几个核心组件的介绍，我们已经可以构建一个简略的（不够完善）微服务架构了。比如下图所示：&lt;br&gt;
    
    </summary>
    
      <category term="Spring Cloud" scheme="http://winterchens.github.io/categories/Spring-Cloud/"/>
    
    
      <category term="Spring Cloud" scheme="http://winterchens.github.io/tags/Spring-Cloud/"/>
    
  </entry>
  
  <entry>
    <title>Spring Cloud构建微服务架构：Hystrix监控数据聚合【Dalston版】</title>
    <link href="http://winterchens.github.io/2017/10/25/spring-cloud-starter-dalston-5-2/"/>
    <id>http://winterchens.github.io/2017/10/25/spring-cloud-starter-dalston-5-2/</id>
    <published>2017-10-25T11:22:00.000Z</published>
    <updated>2017-10-25T11:23:25.000Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>上一篇我们介绍了使用Hystrix Dashboard来展示Hystrix用于熔断的各项度量指标。通过Hystrix Dashboard，我们可以方便的查看服务实例的综合情况，比如：服务调用次数、服务调用延迟等。但是仅通过Hystrix Dashboard我们只能实现对服务当个实例的数据展现，在生产环境我们的服务是肯定需要做高可用的，那么对于多实例的情况，我们就需要将这些度量指标数据进行聚合。下面，在本篇中，我们就来介绍一下另外一个工具：Turbine。<br><a id="more"></a></p></blockquote><h3 id="准备工作"><a href="#准备工作" class="headerlink" title="准备工作"></a>准备工作</h3><p>在开始使用Turbine之前，我们先回顾一下上一篇中实现的架构，如下图所示：<br><img src="http://blog.didispace.com/content/images/posts/spring-cloud-starter-dalston-5-2-1.png" alt=""></p><p>其中，我们构建的内容包括：</p><ul><li>eureka-server：服务注册中心</li><li>eureka-client：服务提供者</li><li>eureka-consumer-ribbon-hystrix：使用ribbon和hystrix实现的服务消费者</li><li><p>hystrix-dashboard：用于展示<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div></pre></td><td class="code"><pre><div class="line"></div><div class="line"></div><div class="line">### 动手试一试</div><div class="line"></div><div class="line">具体实现步骤如下：</div><div class="line"></div><div class="line">* 创建一个标准的Spring Boot工程，命名为：turbine。</div><div class="line">* 编辑pom.xml，具体依赖内容如下：</div><div class="line"></div><div class="line">```xml</div><div class="line">&lt;parent&gt;</div><div class="line">&lt;groupId&gt;org.springframework.cloud&lt;/groupId&gt;</div><div class="line">&lt;artifactId&gt;spring-cloud-starter-parent&lt;/artifactId&gt;</div><div class="line">&lt;version&gt;Dalston.SR1&lt;/version&gt;</div><div class="line">&lt;relativePath /&gt; &lt;!-- lookup parent from repository --&gt;</div><div class="line">&lt;/parent&gt;</div><div class="line">&lt;dependencies&gt;</div><div class="line">&lt;dependency&gt;</div><div class="line">&lt;groupId&gt;org.springframework.cloud&lt;/groupId&gt;</div><div class="line">&lt;artifactId&gt;spring-cloud-starter-turbine&lt;/artifactId&gt;</div><div class="line">&lt;/dependency&gt;</div><div class="line">&lt;dependency&gt;</div><div class="line">&lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;</div><div class="line">&lt;artifactId&gt;spring-boot-starter-actuator&lt;/artifactId&gt;</div><div class="line">&lt;/dependency&gt;</div><div class="line">&lt;/dependencies&gt;</div></pre></td></tr></table></figure></p></li><li><p>创建应用主类<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">```java</div><div class="line">@Configuration</div><div class="line">@EnableAutoConfiguration</div><div class="line">@EnableTurbine</div><div class="line">@EnableDiscoveryClient</div><div class="line">public class TurbineApplication &#123;</div><div class="line">public static void main(String[] args) &#123;</div><div class="line">SpringApplication.run(TurbineApplication.class, args);</div><div class="line">&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p></li><li><p>在<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">```properties</div><div class="line">spring.application.name=turbine</div><div class="line">server.port=8989</div><div class="line">management.port=8990</div><div class="line">eureka.client.serviceUrl.defaultZone=http://localhost:1001/eureka/</div><div class="line">turbine.app-config=eureka-consumer-ribbon-hystrix</div><div class="line">turbine.cluster-name-expression=&quot;default&quot;</div><div class="line">turbine.combine-host-port=true</div></pre></td></tr></table></figure></p></li></ul><p><strong>参数说明</strong></p><ul><li><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div></pre></td><td class="code"><pre><div class="line">* ```turbine.cluster-name-expression``` 参数指定了集群名称为default，当我们服务数量非常多的时候，可以启动多个Turbine服务来构建不同的聚合集群，而该参数可以用来区分这些不同的聚合集群，同时该参数值可以在Hystrix仪表盘中用来定位不同的聚合集群，只需要在Hystrix Stream的URL中通过```cluster```参数来指定；</div><div class="line">* ```turbine.combine-host-port```参数设置为```true```，可以让同一主机上的服务通过主机名与端口号的组合来进行区分，默认情况下会以host来区分不同的服务，这会使得在本地调试的时候，本机上的不同服务聚合成一个服务来统计。</div><div class="line"></div><div class="line">在完成了上面的内容构建之后，我们来体验一下Turbine对集群的监控能力。分别启动```eureka-server、eureka-client、eureka-consumer-ribbon-hystrix、turbine```以及```hystrix-dashboard```。访问```Hystrix Dashboard```，并开启对http://localhost:8989/turbine.stream`的监控，这时候，我们将看到针对服务```eureka-consumer-ribbon-hystrix```的聚合监控数据。</div><div class="line"></div><div class="line">而此时的架构如下图所示：</div><div class="line"></div><div class="line">![](http://blog.didispace.com/content/images/posts/spring-cloud-starter-dalston-5-2-2.png)</div><div class="line"></div><div class="line">### 通过消息代理收集聚合</div><div class="line"></div><div class="line">Spring Cloud在封装Turbine的时候，还实现了基于消息代理的收集实现。所以，我们可以将所有需要收集的监控信息都输出到消息代理中，然后Turbine服务再从消息代理中异步的获取这些监控信息，最后将这些监控信息聚合并输出到Hystrix Dashboard中。通过引入消息代理，我们的Turbine和Hystrix Dashoard实现的监控架构可以改成如下图所示的结构：</div><div class="line"></div><div class="line">![](http://blog.didispace.com/content/images/posts/spring-cloud-starter-dalston-5-2-3.png)</div><div class="line"></div><div class="line">从图中我们可以看到，这里多了一个重要元素：RabbitMQ。对于RabbitMQ的安装与基本时候我们可以查看之前的[《Spring Boot中使用RabbitMQ》](http://blog.didispace.com/spring-boot-rabbitmq/)一文，这里不做过多的说明。下面，我们可以来构建一个新的应用来实现基于消息代理的Turbine聚合服务，具体步骤如下：</div><div class="line"></div><div class="line">* 创建一个标准的Spring Boot工程，命名为：turbine-amqp。</div><div class="line">* 编辑pom.xml，具体依赖内容如下：</div><div class="line"></div><div class="line">```xml</div><div class="line">&lt;parent&gt;</div><div class="line">&lt;groupId&gt;org.springframework.cloud&lt;/groupId&gt;</div><div class="line">&lt;artifactId&gt;spring-cloud-starter-parent&lt;/artifactId&gt;</div><div class="line">&lt;version&gt;Dalston.SR1&lt;/version&gt;</div><div class="line">&lt;relativePath /&gt; &lt;!-- lookup parent from repository --&gt;</div><div class="line">&lt;/parent&gt;</div><div class="line">&lt;dependencies&gt;</div><div class="line">&lt;dependency&gt;</div><div class="line">&lt;groupId&gt;org.springframework.cloud&lt;/groupId&gt;</div><div class="line">&lt;artifactId&gt;spring-cloud-starter-turbine-amqp&lt;/artifactId&gt;</div><div class="line">&lt;/dependency&gt;</div><div class="line">&lt;dependency&gt;</div><div class="line">&lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;</div><div class="line">&lt;artifactId&gt;spring-boot-starter-actuator&lt;/artifactId&gt;</div><div class="line">&lt;/dependency&gt;</div><div class="line">&lt;/dependencies&gt;</div></pre></td></tr></table></figure></li></ul><p>可以看到这里主要引入了<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">**注意：这里我们需要使用Java 8来运行**</div><div class="line"></div><div class="line">* 在应用主类中使用@EnableTurbineStream注解来启用Turbine Stream的配置。</div><div class="line"></div><div class="line">```java</div><div class="line">@Configuration</div><div class="line">@EnableAutoConfiguration</div><div class="line">@EnableTurbineStream</div><div class="line">@EnableDiscoveryClient</div><div class="line">public class TurbineApplication &#123;</div><div class="line">public static void main(String[] args) &#123;</div><div class="line">SpringApplication.run(TurbineApplication.class, args);</div><div class="line">&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p><ul><li>配置application.properties文件：</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">spring.application.name=turbine-amqp</div><div class="line">server.port=8989</div><div class="line">management.port=8990</div><div class="line">eureka.client.serviceUrl.defaultZone=http://localhost:1001/eureka/</div></pre></td></tr></table></figure><p>对于Turbine的配置已经完成了，下面我们需要对服务消费者<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">```xml</div><div class="line">&lt;dependencies&gt;</div><div class="line">...</div><div class="line">&lt;dependency&gt;</div><div class="line">&lt;groupId&gt;org.springframework.cloud&lt;/groupId&gt;</div><div class="line">&lt;artifactId&gt;spring-cloud-netflix-hystrix-amqp&lt;/artifactId&gt;</div><div class="line">&lt;/dependency&gt;</div><div class="line">&lt;/dependencies&gt;</div></pre></td></tr></table></figure></p><p>在完成了上面的配置之后，我们可以继续之前的所有项目（除turbine以外），并通过Hystrix Dashboard开启对<a href="http://localhost:8989/turbine.stream的监控，我们可以获得如之前实现的同样效果，只是这里我们的监控信息收集时是通过了消息代理异步实现的。" target="_blank" rel="external">http://localhost:8989/turbine.stream的监控，我们可以获得如之前实现的同样效果，只是这里我们的监控信息收集时是通过了消息代理异步实现的。</a></p><h3 id="代码示例"><a href="#代码示例" class="headerlink" title="代码示例"></a>代码示例</h3><p>样例工程将沿用之前在码云和GitHub上创建的SpringCloud-Learning项目，重新做了一下整理。通过不同目录来区分Brixton和Dalston的示例。</p><ul><li>码云：<a href="https://gitee.com/didispace/SpringCloud-Learning/tree/master/2-Dalston%E7%89%88%E6%95%99%E7%A8%8B%E7%A4%BA%E4%BE%8B" target="_blank" rel="external">点击查看</a></li><li>GitHub:<a href="https://github.com/dyc87112/SpringCloud-Learning/tree/master/2-Dalston%E7%89%88%E6%95%99%E7%A8%8B%E7%A4%BA%E4%BE%8B" target="_blank" rel="external">点击查看</a></li></ul><p>原作者：程序员didi<br>原文出处：<a href="http://blog.didispace.com/spring-cloud-starter-dalston-5-2/" target="_blank" rel="external">http://blog.didispace.com/spring-cloud-starter-dalston-5-2/</a></p>]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;上一篇我们介绍了使用Hystrix Dashboard来展示Hystrix用于熔断的各项度量指标。通过Hystrix Dashboard，我们可以方便的查看服务实例的综合情况，比如：服务调用次数、服务调用延迟等。但是仅通过Hystrix Dashboard我们只能实现对服务当个实例的数据展现，在生产环境我们的服务是肯定需要做高可用的，那么对于多实例的情况，我们就需要将这些度量指标数据进行聚合。下面，在本篇中，我们就来介绍一下另外一个工具：Turbine。&lt;br&gt;
    
    </summary>
    
      <category term="Spring Cloud" scheme="http://winterchens.github.io/categories/Spring-Cloud/"/>
    
    
      <category term="Spring Cloud" scheme="http://winterchens.github.io/tags/Spring-Cloud/"/>
    
      <category term="Hystrix" scheme="http://winterchens.github.io/tags/Hystrix/"/>
    
  </entry>
  
  <entry>
    <title>Spring Cloud构建微服务架构：Hystrix监控面板【Dalston版】</title>
    <link href="http://winterchens.github.io/2017/10/21/spring-cloud-starter-dalston-5-1/"/>
    <id>http://winterchens.github.io/2017/10/21/spring-cloud-starter-dalston-5-1/</id>
    <published>2017-10-21T12:50:00.000Z</published>
    <updated>2017-10-22T09:33:26.000Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p> 在上一篇<a href="https://winterchens.github.io/2017/10/21/spring-cloud-starter-dalston-4-3/">《服务容错保护（hystrix断路器）》</a>的介绍中，我们提到断路器是根据一段时间窗内的请求情况来判断并操作断路器的打开和关闭状态的。而这些请求情况的指标信息都是HystrixCommand和HystrixObservableCommand实例在执行过程中记录的重要度量信息，它们除了Hystrix断路器实现中使用之外，对于系统运维也有非常大的帮助。这些指标信息会以“滚动时间窗”与“桶”结合的方式进行汇总，并在内存中驻留一段时间，以供内部或外部进行查询使用，Hystrix Dashboard就是这些指标内容的消费者之一。<br><a id="more"></a><br>下面我们基于之前的示例来结合Hystrix Dashboard实现Hystrix指标数据的可视化面板，这里我们将用到下之前实现的几个应用，包括：</p></blockquote><ul><li>eureka-server：服务注册中心</li><li>eureka-client：服务提供者</li><li>eureka-consumer-ribbon-hystrix：使用ribbon和hystrix实现的服务消费者</li></ul><p>由于 <font color="#FFB90F">eureka-consumer-ribbon-hystrix</font> 项目中的 <font color="#FFB90F">/consumer</font> 接口实现使用了 <font color="#FFB90F">@HystrixCommand</font> 修饰，所以这个接口的调用情况会被Hystrix记录下来，以用来给断路器和Hystrix Dashboard使用。断路器我们在上一篇中已经介绍过了，下面我们来具体说说Hystrix Dashboard的构建。</p><h3 id="动手试一试"><a href="#动手试一试" class="headerlink" title="动手试一试"></a>动手试一试</h3><ul><li><p>在Spring Cloud中构建一个Hystrix Dashboard非常简单，只需要下面四步：</p></li><li><p>创建一个标准的Spring Boot工程，命名为：hystrix-dashboard。<br>编辑pom.xml，具体依赖内容如下：</p></li></ul><figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">parent</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-parent<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">version</span>&gt;</span>Dalston.SR1<span class="tag">&lt;/<span class="name">version</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">relativePath</span> /&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">parent</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-hystrix<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-hystrix-dashboard<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-actuator<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></div></pre></td></tr></table></figure><ul><li>为应用主类加上@EnableHystrixDashboard，启用Hystrix Dashboard功能。</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@EnableHystrixDashboard</span></div><div class="line"><span class="meta">@SpringCloudApplication</span></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HystrixDashboardApplication</span> </span>&#123;</div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</div><div class="line">SpringApplication.run(HystrixDashboardApplication.class, args);</div><div class="line">&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><ul><li>根据实际情况修改application.properties配置文件，比如：选择一个未被占用的端口等，此步非必须。</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">spring.application.name=hystrix-dashboard</div><div class="line">server.port=1301</div></pre></td></tr></table></figure><p>到这里我们已经完成了基本配置，接下来我们可以启动该应用，并访问：<a href="http://localhost:1301/hystrix，我们可以看到如下页面：" target="_blank" rel="external">http://localhost:1301/hystrix，我们可以看到如下页面：</a></p><p><img src="http://img.blog.csdn.net/20171020171833798?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvV2ludGVyX2NoZW4wMDE=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast" alt="这里写图片描述"></p><p>这是Hystrix Dashboard的监控首页，该页面中并没有具体的监控信息。从页面的文字内容中我们可以知道，Hystrix Dashboard共支持三种不同的监控方式，依次为：</p><ul><li>默认的集群监控：通过URL <a href="http://turbine-hostname:port/turbine.stream" target="_blank" rel="external">http://turbine-hostname:port/turbine.stream</a> 开启，实现对默认集群的监控。</li><li>指定的集群监控：通过URL <a href="http://turbine-hostname:port/turbine.stream?cluster=[clusterName]开启，实现对" target="_blank" rel="external">http://turbine-hostname:port/turbine.stream?cluster=[clusterName]开启，实现对</a> <font color="#FFB90F">clusterName</font> 集群的监控。</li><li>单体应用的监控：通过URL<a href="http://hystrix-app:port/hystrix.stream开启，实现对具体某个服务实例的监控。" target="_blank" rel="external">http://hystrix-app:port/hystrix.stream开启，实现对具体某个服务实例的监控。</a></li></ul><p>前两者都对集群的监控，需要整合Turbine才能实现，这部分内容我们将在下一篇中做详细介绍。在本节中，我们主要实现对单个服务实例的监控，所以这里我们先来实现单个服务实例的监控。</p><p>既然Hystrix Dashboard监控单实例节点需要通过访问实例的 <font color="#FFB90F">/hystrix.stream</font> 接口来实现，自然我们需要为服务实例添加这个端点，而添加该功能的步骤也同样简单，只需要下面两步：</p><ul><li>在服务实例 <font color="#FFB90F">pom.xml</font> 中的 <font color="#FFB90F">dependencies</font> 节点中新增 <font color="#FFB90F">spring-boot-starter-actuator</font> 监控模块以开启监控相关的端点，并确保已经引入断路器的依赖 <font color="#FFB90F">spring-cloud-starter-hystrix</font> ：</li></ul><figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-hystrix<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-actuator<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></div></pre></td></tr></table></figure><ul><li>确保在服务实例的主类中已经使用 <font color="#FFB90F">@EnableCircuitBreaker</font> 或 <font color="#FFB90F">@EnableHystrix</font> 注解，开启了断路器功能。</li></ul><p>到这里已经完成了所有的配置，我们可以在Hystrix Dashboard的首页输入<a href="http://localhost:2101/hystrix.stream，已启动对“eureka-consumer-ribbon-hystrix”的监控，点击“Monitor" target="_blank" rel="external">http://localhost:2101/hystrix.stream，已启动对“eureka-consumer-ribbon-hystrix”的监控，点击“Monitor</a> Stream”按钮，此时我们可以看到如下页面：</p><p><img src="http://img.blog.csdn.net/20171020172243894?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvV2ludGVyX2NoZW4wMDE=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast" alt="这里写图片描述"></p><p>在对该页面介绍前，我们先看看在首页中我们还没有介绍的两外两个参数：</p><ul><li><font color="#FFB90F">Delay</font> ：该参数用来控制服务器上轮询监控信息的延迟时间，默认为2000毫秒，我们可以通过配置该属性来降低客户端的网络和CPU消耗。</li><li><font color="#FFB90F">Title</font> ：该参数对应了上图头部标题Hystrix Stream之后的内容，默认会使用具体监控实例的URL，我们可以通过配置该信息来展示更合适的标题。</li></ul><p>回到监控页面，我们来详细说说其中各元素的具体含义：</p><ul><li><p>我们可以在监控信息的左上部分找到两个重要的图形信息：一个实心圆和一条曲线。</p><ul><li>实心圆：共有两种含义。它通过颜色的变化代表了实例的健康程度，如下图所示，它的健康度从绿色、黄色、橙色、红色递减。该实心圆除了颜色的变化之外，它的大小也会根据实例的请求流量发生变化，流量越大该实心圆就越大。所以通过该实心圆的展示，我们就可以在大量的实例中快速的发现故障实例和高压力实例。<br><img src="http://img.blog.csdn.net/20171020172414105?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvV2ludGVyX2NoZW4wMDE=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast" alt="这里写图片描述"></li></ul></li></ul><pre><code>* 曲线：用来记录2分钟内流量的相对变化，我们可以通过它来观察到流量的上升和下降趋势。</code></pre><ul><li>其他一些数量指标如下图所示：<br><img src="http://img.blog.csdn.net/20171020172455565?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvV2ludGVyX2NoZW4wMDE=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast" alt="这里写图片描述"></li></ul><h3 id="代码示例"><a href="#代码示例" class="headerlink" title="代码示例"></a>代码示例</h3><p>样例工程将沿用之前在码云和GitHub上创建的SpringCloud-Learning项目，重新做了一下整理。通过不同目录来区分Brixton和Dalston的示例。</p><ul><li>码云: <a href="https://gitee.com/didispace/SpringCloud-Learning/tree/master/2-Dalston%E7%89%88%E6%95%99%E7%A8%8B%E7%A4%BA%E4%BE%8B" target="_blank" rel="external">点击查看</a></li><li>GitHub: <a href="https://github.com/dyc87112/SpringCloud-Learning/tree/master/2-Dalston%E7%89%88%E6%95%99%E7%A8%8B%E7%A4%BA%E4%BE%8B" target="_blank" rel="external">点击查看</a></li></ul><p>原作者：程序员didi<br>原文出处：<a href="http://blog.didispace.com/spring-cloud-starter-dalston-5-1/" target="_blank" rel="external">http://blog.didispace.com/spring-cloud-starter-dalston-5-1/</a></p>]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt; 在上一篇&lt;a href=&quot;https://winterchens.github.io/2017/10/21/spring-cloud-starter-dalston-4-3/&quot;&gt;《服务容错保护（hystrix断路器）》&lt;/a&gt;的介绍中，我们提到断路器是根据一段时间窗内的请求情况来判断并操作断路器的打开和关闭状态的。而这些请求情况的指标信息都是HystrixCommand和HystrixObservableCommand实例在执行过程中记录的重要度量信息，它们除了Hystrix断路器实现中使用之外，对于系统运维也有非常大的帮助。这些指标信息会以“滚动时间窗”与“桶”结合的方式进行汇总，并在内存中驻留一段时间，以供内部或外部进行查询使用，Hystrix Dashboard就是这些指标内容的消费者之一。&lt;br&gt;
    
    </summary>
    
      <category term="Spring Cloud" scheme="http://winterchens.github.io/categories/Spring-Cloud/"/>
    
    
      <category term="Spring Cloud" scheme="http://winterchens.github.io/tags/Spring-Cloud/"/>
    
      <category term="Hystrix" scheme="http://winterchens.github.io/tags/Hystrix/"/>
    
  </entry>
  
  <entry>
    <title>Spring Cloud构建微服务架构：服务容错保护（Hystrix断路器）【Dalston版】</title>
    <link href="http://winterchens.github.io/2017/10/21/spring-cloud-starter-dalston-4-3/"/>
    <id>http://winterchens.github.io/2017/10/21/spring-cloud-starter-dalston-4-3/</id>
    <published>2017-10-21T12:35:00.000Z</published>
    <updated>2017-10-22T09:33:17.000Z</updated>
    
    <content type="html"><![CDATA[<h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><blockquote><p>在前两篇<a href="https://winterchens.github.io/2017/10/21/spring-cloud-starter-dalston-4-1/">《Spring Cloud构建微服务架构：服务容错保护（Hystrix服务降级）》</a>和<a href="https://winterchens.github.io/2017/10/21/spring-cloud-starter-dalston-4-2/">《Spring Cloud构建微服务架构：服务容错保护（Hystrix依赖隔离）》</a>中，我们对Hystrix提供的服务降级和依赖隔离有了基本的认识。下面我们将继续说说Hystrix的另外一个重要元件：断路器。<br><a id="more"></a></p></blockquote><h3 id="断路器"><a href="#断路器" class="headerlink" title="断路器"></a>断路器</h3><p>断路器模式源于Martin Fowler的Circuit Breaker一文。“断路器”本身是一种开关装置，用于在电路上保护线路过载，当线路中有电器发生短路时，“断路器”能够及时的切断故障电路，防止发生过载、发热、甚至起火等严重后果。</p><p>在分布式架构中，断路器模式的作用也是类似的，当某个服务单元发生故障（类似用电器发生短路）之后，通过断路器的故障监控（类似熔断保险丝），直接切断原来的主逻辑调用。但是，在Hystrix中的断路器除了切断主逻辑的功能之外，还有更复杂的逻辑，下面我们来看看它更为深层次的处理逻辑。</p><p>以在 <a href="https://winterchens.github.io/2017/10/21/spring-cloud-starter-dalston-4-1/">《Spring Cloud构建微服务架构：服务容错保护（Hystrix服务降级）》</a> 一文中实现的服务降级例子为示例，我们来说说断路器的工作原理。当我们把服务提供者eureka-client中加入了模拟的时间延迟之后，在服务消费端的服务降级逻辑因为hystrix命令调用依赖服务超时，触发了降级逻辑，但是即使这样，受限于Hystrix超时时间的问题，我们的调用依然很有可能产生堆积。</p><ul><li><p>这个时候断路器就会发挥作用，那么断路器是在什么情况下开始起作用呢？这里涉及到断路器的三个重要参数：快照时间窗、请求总数下限、错误百分比下限。这个参数的作用分别是：</p></li><li><p>快照时间窗：断路器确定是否打开需要统计一些请求和错误数据，而统计的时间范围就是快照时间窗，默认为最近的10秒。<br>请求总数下限：在快照时间窗内，必须满足请求总数下限才有资格根据熔断。默认为20，意味着在10秒内，如果该hystrix命令的调用此时不足20次，即时所有的请求都超时或其他原因失败，断路器都不会打开。</p></li><li>错误百分比下限：当请求总数在快照时间窗内超过了下限，比如发生了30次调用，如果在这30次调用中，有16次发生了超时异常，也就是超过50%的错误百分比，在默认设定50%下限情况下，这时候就会将断路器打开。</li></ul><p>那么当断路器打开之后会发生什么呢？我们先来说说断路器未打开之前，对于之前那个示例的情况就是每个请求都会在当hystrix超时之后返回<font color="#FFB90F">fallback</font>，每个请求时间延迟就是近似hystrix的超时时间，如果设置为5秒，那么每个请求就都要延迟5秒才会返回。当熔断器在10秒内发现请求总数超过20，并且错误百分比超过50%，这个时候熔断器打开。打开之后，再有请求调用的时候，将不会调用主逻辑，而是直接调用降级逻辑，这个时候就不会等待5秒之后才返回fallback。通过断路器，实现了自动地发现错误并将降级逻辑切换为主逻辑，减少响应延迟的效果。</p><p>在断路器打开之后，处理逻辑并没有结束，我们的降级逻辑已经被成了主逻辑，那么原来的主逻辑要如何恢复呢？对于这一问题，hystrix也为我们实现了自动恢复功能。当断路器打开，对主逻辑进行熔断之后，hystrix会启动一个休眠时间窗，在这个时间窗内，降级逻辑是临时的成为主逻辑，当休眠时间窗到期，断路器将进入半开状态，释放一次请求到原来的主逻辑上，如果此次请求正常返回，那么断路器将继续闭合，主逻辑恢复，如果这次请求依然有问题，断路器继续进入打开状态，休眠时间窗重新计时。</p><p>通过上面的一系列机制，hystrix的断路器实现了对依赖资源故障的端口、对降级策略的自动切换以及对主逻辑的自动恢复机制。这使得我们的微服务在依赖外部服务或资源的时候得到了非常好的保护，同时对于一些具备降级逻辑的业务需求可以实现自动化的切换与恢复，相比于设置开关由监控和运维来进行切换的传统实现方式显得更为智能和高效。</p><h3 id="代码示例"><a href="#代码示例" class="headerlink" title="代码示例"></a>代码示例</h3><p>样例工程将沿用之前在码云和GitHub上创建的SpringCloud-Learning项目，重新做了一下整理。通过不同目录来区分Brixton和Dalston的示例。</p><ul><li>码云: <a href="https://gitee.com/didispace/SpringCloud-Learning/tree/master/2-Dalston%E7%89%88%E6%95%99%E7%A8%8B%E7%A4%BA%E4%BE%8B" target="_blank" rel="external">点击查看</a></li><li>GitHub: <a href="https://github.com/dyc87112/SpringCloud-Learning/tree/master/2-Dalston%E7%89%88%E6%95%99%E7%A8%8B%E7%A4%BA%E4%BE%8B" target="_blank" rel="external">点击查看</a></li></ul><p>原作者：程序员didi<br>原文出处：<a href="http://blog.didispace.com/spring-cloud-starter-dalston-4-3/" target="_blank" rel="external">http://blog.didispace.com/spring-cloud-starter-dalston-4-3/</a></p>]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h3&gt;&lt;blockquote&gt;
&lt;p&gt;在前两篇&lt;a href=&quot;https://winterchens.github.io/2017/10/21/spring-cloud-starter-dalston-4-1/&quot;&gt;《Spring Cloud构建微服务架构：服务容错保护（Hystrix服务降级）》&lt;/a&gt;和&lt;a href=&quot;https://winterchens.github.io/2017/10/21/spring-cloud-starter-dalston-4-2/&quot;&gt;《Spring Cloud构建微服务架构：服务容错保护（Hystrix依赖隔离）》&lt;/a&gt;中，我们对Hystrix提供的服务降级和依赖隔离有了基本的认识。下面我们将继续说说Hystrix的另外一个重要元件：断路器。&lt;br&gt;
    
    </summary>
    
      <category term="Spring Cloud" scheme="http://winterchens.github.io/categories/Spring-Cloud/"/>
    
    
      <category term="Spring Cloud" scheme="http://winterchens.github.io/tags/Spring-Cloud/"/>
    
      <category term="Hystrix" scheme="http://winterchens.github.io/tags/Hystrix/"/>
    
  </entry>
  
  <entry>
    <title>Spring Cloud构建微服务架构：服务容错保护（Hystrix依赖隔离）【Dalston版】</title>
    <link href="http://winterchens.github.io/2017/10/21/spring-cloud-starter-dalston-4-2/"/>
    <id>http://winterchens.github.io/2017/10/21/spring-cloud-starter-dalston-4-2/</id>
    <published>2017-10-21T12:30:00.000Z</published>
    <updated>2017-10-22T09:33:05.000Z</updated>
    
    <content type="html"><![CDATA[<h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><blockquote><p> 在上一篇<a href="https://winterchens.github.io/2017/10/21/spring-cloud-starter-dalston-4-1/">《Spring Cloud构建微服务架构：服务容错保护（Hystrix服务降级）》</a>中，我们已经体验了如何使用@HystrixCommand来为一个依赖资源定义服务降级逻辑。实现方式非常简单，同时对于降级逻辑还能实现一些更加复杂的级联降级等策略。之前对于使用Hystrix来实现服务容错保护时，除了服务降级之外，我们还提到过线程隔离、断路器等功能。那么在本篇中我们就来具体说说线程隔离。<br><a id="more"></a></p></blockquote><h3 id="依赖隔离"><a href="#依赖隔离" class="headerlink" title="依赖隔离"></a>依赖隔离</h3><p>舱壁模式”对于熟悉Docker的读者一定不陌生，Docker通过“舱壁模式”实现进程的隔离，使得容器与容器之间不会互相影响。而Hystrix则使用该模式实现线程池的隔离，它会为每一个Hystrix命令创建一个独立的线程池，这样就算某个在Hystrix命令包装下的依赖服务出现延迟过高的情况，也只是对该依赖服务的调用产生影响，而不会拖慢其他的服务。</p><p>通过对依赖服务的线程池隔离实现，可以带来如下优势：</p><ul><li>应用自身得到完全的保护，不会受不可控的依赖服务影响。即便给依赖服务分配的线程池被填满，也不会影响应用自身的额其余部分。</li><li>可以有效的降低接入新服务的风险。如果新服务接入后运行不稳定或存在问题，完全不会影响到应用其他的请求。</li><li>当依赖的服务从失效恢复正常后，它的线程池会被清理并且能够马上恢复健康的服务，相比之下容器级别的清理恢复速度要慢得多。</li><li>当依赖的服务出现配置错误的时候，线程池会快速的反应出此问题（通过失败次数、延迟、超时、拒绝等指标的增加情况）。同时，我们可以在不影响应用功能的情况下通过实时的动态属性刷新（后续会通过Spring Cloud Config与Spring Cloud Bus的联合使用来介绍）来处理它。</li><li>当依赖的服务因实现机制调整等原因造成其性能出现很大变化的时候，此时线程池的监控指标信息会反映出这样的变化。同时，我们也可以通过实时动态刷新自身应用对依赖服务的阈值进行调整以适应依赖方的改变。</li><li>除了上面通过线程池隔离服务发挥的优点之外，每个专有线程池都提供了内置的并发实现，可以利用它为同步的依赖服务构建异步的访问。</li></ul><p>总之，通过对依赖服务实现线程池隔离，让我们的应用更加健壮，不会因为个别依赖服务出现问题而引起非相关服务的异常。同时，也使得我们的应用变得更加灵活，可以在不停止服务的情况下，配合动态配置刷新实现性能配置上的调整。</p><p>虽然线程池隔离的方案带了如此多的好处，但是很多使用者可能会担心为每一个依赖服务都分配一个线程池是否会过多地增加系统的负载和开销。对于这一点，使用者不用过于担心，因为这些顾虑也是大部分工程师们会考虑到的，Netflix在设计Hystrix的时候，认为线程池上的开销相对于隔离所带来的好处是无法比拟的。同时，Netflix也针对线程池的开销做了相关的测试，以证明和打消Hystrix实现对性能影响的顾虑。</p><p>下图是Netflix Hystrix官方提供的一个Hystrix命令的性能监控，该命令以每秒60个请求的速度（QPS）向一个单服务实例进行访问，该服务实例每秒运行的线程数峰值为350个。</p><p><img src="http://img.blog.csdn.net/20171020165611141?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvV2ludGVyX2NoZW4wMDE=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast" alt="这里写图片描述"></p><table><thead><tr><th>比较情况</th><th>未使用线程池隔离</th><th>使用了线程池隔离</th><th>耗时差距</th></tr></thead><tbody><tr><td>中位数</td><td>2ms</td><td>2ms</td><td>2ms</td></tr><tr><td>90百分位</td><td>5ms</td><td>8ms</td><td>3ms</td></tr><tr><td>99百分位</td><td>28ms</td><td>37ms</td><td>9ms</td></tr></tbody></table><p>在99%的情况下，使用线程池隔离的延迟有9ms，对于大多数需求来说这样的消耗是微乎其微的，更何况为系统在稳定性和灵活性上所带来的巨大提升。虽然对于大部分的请求我们可以忽略线程池的额外开销，而对于小部分延迟本身就非常小的请求（可能只需要1ms），那么9ms的延迟开销还是非常昂贵的。实际上Hystrix也为此设计了另外的一个解决方案：信号量。</p><p>Hystrix中除了使用线程池之外，还可以使用信号量来控制单个依赖服务的并发度，信号量的开销要远比线程池的开销小得多，但是它不能设置超时和实现异步访问。所以，只有在依赖服务是足够可靠的情况下才使用信号量。在HystrixCommand和HystrixObservableCommand中2处支持信号量的使用：</p><ul><li>命令执行：如果隔离策略参数execution.isolation.strategy设置为SEMAPHORE，Hystrix会使用信号量替代线程池来控制依赖服务的并发控制。</li><li>降级逻辑：当Hystrix尝试降级逻辑时候，它会在调用线程中使用信号量。</li></ul><p>信号量的默认值为10，我们也可以通过动态刷新配置的方式来控制并发线程的数量。对于信号量大小的估算方法与线程池并发度的估算类似。仅访问内存数据的请求一般耗时在1ms以内，性能可以达到5000rps，这样级别的请求我们可以将信号量设置为1或者2，我们可以按此标准并根据实际请求耗时来设置信号量。</p><h3 id="如何使用"><a href="#如何使用" class="headerlink" title="如何使用"></a>如何使用</h3><p>说了那么多依赖隔离的好处，那么我们如何使用Hystrix来实现依赖隔离呢？其实，我们在上一篇定义服务降级的时候，已经自动的实现了依赖隔离。</p><p>在上一篇的示例中，我们使用了@HystrixCommand来将某个函数包装成了Hystrix命令，这里除了定义服务降级之外，Hystrix框架就会自动的为这个函数实现调用的隔离。所以，依赖隔离、服务降级在使用时候都是一体化实现的，这样利用Hystrix来实现服务容错保护在编程模型上就非常方便的，并且考虑更为全面。除了依赖隔离、服务降级之外，还有一个重要元素：断路器。我们将在下一篇做详细的介绍，这三个重要利器构成了Hystrix实现服务容错保护的强力组合拳。</p><h3 id="代码示例"><a href="#代码示例" class="headerlink" title="代码示例"></a>代码示例</h3><p>样例工程将沿用之前在码云和GitHub上创建的SpringCloud-Learning项目，重新做了一下整理。通过不同目录来区分Brixton和Dalston的示例。</p><ul><li>码云: <a href="https://gitee.com/didispace/SpringCloud-Learning/tree/master/2-Dalston%E7%89%88%E6%95%99%E7%A8%8B%E7%A4%BA%E4%BE%8B" target="_blank" rel="external">点击查看</a></li><li>GitHub: <a href="https://github.com/dyc87112/SpringCloud-Learning/tree/master/2-Dalston%E7%89%88%E6%95%99%E7%A8%8B%E7%A4%BA%E4%BE%8B" target="_blank" rel="external">点击查看</a></li></ul><p>原作者：程序员didi<br>原文出处：<a href="http://blog.didispace.com/spring-cloud-starter-dalston-4-2/" target="_blank" rel="external">http://blog.didispace.com/spring-cloud-starter-dalston-4-2/</a></p>]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h3&gt;&lt;blockquote&gt;
&lt;p&gt; 在上一篇&lt;a href=&quot;https://winterchens.github.io/2017/10/21/spring-cloud-starter-dalston-4-1/&quot;&gt;《Spring Cloud构建微服务架构：服务容错保护（Hystrix服务降级）》&lt;/a&gt;中，我们已经体验了如何使用@HystrixCommand来为一个依赖资源定义服务降级逻辑。实现方式非常简单，同时对于降级逻辑还能实现一些更加复杂的级联降级等策略。之前对于使用Hystrix来实现服务容错保护时，除了服务降级之外，我们还提到过线程隔离、断路器等功能。那么在本篇中我们就来具体说说线程隔离。&lt;br&gt;
    
    </summary>
    
      <category term="Spring Cloud" scheme="http://winterchens.github.io/categories/Spring-Cloud/"/>
    
    
      <category term="Spring Cloud" scheme="http://winterchens.github.io/tags/Spring-Cloud/"/>
    
      <category term="Hystrix" scheme="http://winterchens.github.io/tags/Hystrix/"/>
    
  </entry>
  
  <entry>
    <title>Spring Cloud构建微服务架构：服务容错保护（Hystrix服务降级）【Dalston版】</title>
    <link href="http://winterchens.github.io/2017/10/21/spring-cloud-starter-dalston-4-1/"/>
    <id>http://winterchens.github.io/2017/10/21/spring-cloud-starter-dalston-4-1/</id>
    <published>2017-10-21T12:22:00.000Z</published>
    <updated>2017-10-22T09:32:58.000Z</updated>
    
    <content type="html"><![CDATA[<h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><p>在微服务架构中，我们将系统拆分成了一个个的服务单元，各单元应用间通过服务注册与订阅的方式互相依赖。由于每个单元都在不同的进程中运行，依赖通过远程调用的方式执行，这样就有可能因为网络原因或是依赖服务自身问题出现调用故障或延迟，而这些问题会直接导致调用方的对外服务也出现延迟，若此时调用方的请求不断增加，最后就会出现因等待出现故障的依赖方响应而形成任务积压，线程资源无法释放，最终导致自身服务的瘫痪，进一步甚至出现故障的蔓延最终导致整个系统的瘫痪。如果这样的架构存在如此严重的隐患，那么相较传统架构就更加的不稳定。为了解决这样的问题，因此产生了断路器等一系列的服务保护机制。<br><a id="more"></a><br>针对上述问题，在Spring Cloud Hystrix中实现了线程隔离、断路器等一系列的服务保护功能。它也是基于Netflix的开源框架 Hystrix实现的，该框架目标在于通过控制那些访问远程系统、服务和第三方库的节点，从而对延迟和故障提供更强大的容错能力。Hystrix具备了服务降级、服务熔断、线程隔离、请求缓存、请求合并以及服务监控等强大功能。</p><p>接下来，我们就从一个简单示例开始对Spring Cloud Hystrix的学习与使用。</p><h3 id="动手试一试"><a href="#动手试一试" class="headerlink" title="动手试一试"></a>动手试一试</h3><p>在开始使用Spring Cloud Hystrix实现断路器之前，我们先拿之前实现的一些内容作为基础，其中包括：</p><ul><li><font color="#FFB90F">eureka-server</font> 工程：服务注册中心，端口：1001</li><li><font color="#FFB90F">eureka-client</font> 工程：服务提供者，两个实例启动端口分别为2001</li></ul><p>下面我们可以复制一下之前实现的一个服务消费者： <font color="#FFB90F">eureka-consumer-ribbon</font> ，命名为 <font color="#FFB90F">eureka-consumer-ribbon-hystrix</font> 。下面我们开始对其进行改在：</p><p>第一步： <font color="#FFB90F">pom.xml</font> 的dependencies节点中引入 <font color="#FFB90F">spring-cloud-starter-hystrix</font> 依赖：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-hystrix<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></div></pre></td></tr></table></figure><p>第二步：在应用主类中使用@EnableCircuitBreaker或@EnableHystrix注解开启Hystrix的使用：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@EnableCircuitBreaker</span></div><div class="line"><span class="meta">@EnableDiscoveryClient</span></div><div class="line"><span class="meta">@SpringBootApplication</span></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Application</span> </span>&#123;</div><div class="line"><span class="meta">@Bean</span></div><div class="line"><span class="meta">@LoadBalanced</span></div><div class="line"><span class="function"><span class="keyword">public</span> RestTemplate <span class="title">restTemplate</span><span class="params">()</span> </span>&#123;</div><div class="line"><span class="keyword">return</span> <span class="keyword">new</span> RestTemplate();</div><div class="line">&#125;</div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</div><div class="line"><span class="keyword">new</span> SpringApplicationBuilder(Application.class).web(<span class="keyword">true</span>).run(args);</div><div class="line">&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><p><strong>注意：这里我们还可以使用Spring Cloud应用中的@SpringCloudApplication注解来修饰应用主类，该注解的具体定义如下所示。我们可以看到该注解中包含了上我们所引用的三个注解，这也意味着一个Spring Cloud标准应用应包含服务发现以及断路器。</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@Target</span>(&#123;ElementType.TYPE&#125;)</div><div class="line"><span class="meta">@Retention</span>(RetentionPolicy.RUNTIME)</div><div class="line"><span class="meta">@Documented</span></div><div class="line"><span class="meta">@Inherited</span></div><div class="line"><span class="meta">@SpringBootApplication</span></div><div class="line"><span class="meta">@EnableDiscoveryClient</span></div><div class="line"><span class="meta">@EnableCircuitBreaker</span></div><div class="line"><span class="keyword">public</span> <span class="meta">@interface</span> SpringCloudApplication &#123;</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>第三步：改造服务消费方式，新增 <font color="#FFB90F">ConsumerService</font> 类，然后将在 <font color="#FFB90F">Controller</font> 中的逻辑迁移过去。最后，在为具体执行逻辑的函数上增加 <font color="#FFB90F">@HystrixCommand</font> 注解来指定服务降级方法，比如：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@RestController</span></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DcController</span> </span>&#123;</div><div class="line">    <span class="meta">@Autowired</span></div><div class="line">    ConsumerService consumerService;</div><div class="line">    <span class="meta">@GetMapping</span>(<span class="string">"/consumer"</span>)</div><div class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">dc</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> consumerService.consumer();</div><div class="line">    &#125;</div><div class="line">    <span class="class"><span class="keyword">class</span> <span class="title">ConsumerService</span> </span>&#123;</div><div class="line">        <span class="meta">@Autowired</span></div><div class="line">        RestTemplate restTemplate;</div><div class="line">        <span class="meta">@HystrixCommand</span>(fallbackMethod = <span class="string">"fallback"</span>)</div><div class="line">        <span class="function"><span class="keyword">public</span> String <span class="title">consumer</span><span class="params">()</span> </span>&#123;</div><div class="line">            <span class="keyword">return</span> restTemplate.getForObject(<span class="string">"http://eureka-client/dc"</span>, String.class);</div><div class="line">        &#125;</div><div class="line">        <span class="function"><span class="keyword">public</span> String <span class="title">fallback</span><span class="params">()</span> </span>&#123;</div><div class="line">            <span class="keyword">return</span> <span class="string">"fallback"</span>;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>下面我们来验证一下上面Hystrix带来的一些基础功能。我们先把涉及的服务都启动起来，然后访问 <font color="#FFB90F">localhost:2101/consumer</font> ，此时可以获取正常的返回，比如： <font color="#FFB90F">Services: [eureka-consumer-ribbon-hystrix, eureka-client]</font> 。</p><p>为了触发服务降级逻辑，我们可以将服务提供者 <font color="#FFB90F">eureka-client</font> 的逻辑加一些延迟，比如：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@GetMapping</span>(<span class="string">"/dc"</span>)</div><div class="line"><span class="function"><span class="keyword">public</span> String <span class="title">dc</span><span class="params">()</span> <span class="keyword">throws</span> InterruptedException </span>&#123;</div><div class="line">    Thread.sleep(<span class="number">5000L</span>);</div><div class="line">    String services = <span class="string">"Services: "</span> + discoveryClient.getServices();</div><div class="line">    System.out.println(services);</div><div class="line">    <span class="keyword">return</span> services;</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>重启 <font color="#FFB90F">eureka-client</font> 之后，再尝试访问 <font color="#FFB90F">localhost:2101/consumer</font> ，此时我们将获得的返回结果为： <font color="#FFB90F">fallback</font> 。我们从 <font color="#FFB90F">eureka-client</font> 的控制台中，可以看到服务提供方输出了原本要返回的结果，但是由于返回前延迟了5秒，而服务消费方触发了服务请求超时异常，服务消费者就通过 <font color="#FFB90F">HystrixCommand</font> 注解中指定的降级逻辑进行执行，因此该请求的结果返回了 <font color="#FFB90F">fallback</font> 。这样的机制，对自身服务起到了基础的保护，同时还为异常情况提供了自动的服务降级切换机制。</p><h3 id="代码示例"><a href="#代码示例" class="headerlink" title="代码示例"></a>代码示例</h3><p>样例工程将沿用之前在码云和GitHub上创建的SpringCloud-Learning项目，重新做了一下整理。通过不同目录来区分Brixton和Dalston的示例。</p><ul><li>码云: <a href="https://gitee.com/didispace/SpringCloud-Learning/tree/master/2-Dalston%E7%89%88%E6%95%99%E7%A8%8B%E7%A4%BA%E4%BE%8B" target="_blank" rel="external">点击查看</a></li><li>GitHub: <a href="https://github.com/dyc87112/SpringCloud-Learning/tree/master/2-Dalston%E7%89%88%E6%95%99%E7%A8%8B%E7%A4%BA%E4%BE%8B" target="_blank" rel="external">点击查看</a></li></ul><p>具体工程说明如下：</p><ul><li>eureka的服务注册中心：eureka-server</li><li>eureka的服务提供方：eureka-client</li><li>eureka的服务消费者：eureka-consumer-ribbon-hystrix</li></ul><p>原作者：程序员didi<br>原文出处：<a href="http://blog.didispace.com/spring-cloud-starter-dalston-4-1/" target="_blank" rel="external">http://blog.didispace.com/spring-cloud-starter-dalston-4-1/</a></p>]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h3&gt;&lt;p&gt;在微服务架构中，我们将系统拆分成了一个个的服务单元，各单元应用间通过服务注册与订阅的方式互相依赖。由于每个单元都在不同的进程中运行，依赖通过远程调用的方式执行，这样就有可能因为网络原因或是依赖服务自身问题出现调用故障或延迟，而这些问题会直接导致调用方的对外服务也出现延迟，若此时调用方的请求不断增加，最后就会出现因等待出现故障的依赖方响应而形成任务积压，线程资源无法释放，最终导致自身服务的瘫痪，进一步甚至出现故障的蔓延最终导致整个系统的瘫痪。如果这样的架构存在如此严重的隐患，那么相较传统架构就更加的不稳定。为了解决这样的问题，因此产生了断路器等一系列的服务保护机制。&lt;br&gt;
    
    </summary>
    
      <category term="Spring Cloud" scheme="http://winterchens.github.io/categories/Spring-Cloud/"/>
    
    
      <category term="Spring Cloud" scheme="http://winterchens.github.io/tags/Spring-Cloud/"/>
    
      <category term="Hystrix" scheme="http://winterchens.github.io/tags/Hystrix/"/>
    
  </entry>
  
  <entry>
    <title>Spring Cloud构建微服务架构：分布式配置中心【Dalston版】</title>
    <link href="http://winterchens.github.io/2017/10/21/spring-cloud-starter-dalston-3/"/>
    <id>http://winterchens.github.io/2017/10/21/spring-cloud-starter-dalston-3/</id>
    <published>2017-10-21T12:15:00.000Z</published>
    <updated>2017-10-22T09:32:46.000Z</updated>
    
    <content type="html"><![CDATA[<p>Spring Cloud Config是Spring Cloud团队创建的一个全新项目，用来为分布式系统中的基础设施和微服务应用提供集中化的外部配置支持，它分为服务端与客户端两个部分。其中服务端也称为分布式配置中心，它是一个独立的微服务应用，用来连接配置仓库并为客户端提供获取配置信息、加密/解密信息等访问接口；而客户端则是微服务架构中的各个微服务应用或基础设施，它们通过指定的配置中心来管理应用资源与业务相关的配置内容，并在启动的时候从配置中心获取和加载配置信息。Spring Cloud Config实现了对服务端和客户端中环境变量和属性配置的抽象映射，所以它除了适用于Spring构建的应用程序之外，也可以在任何其他语言运行的应用程序中使用。由于Spring Cloud Config实现的配置中心默认采用Git来存储配置信息，所以使用Spring Cloud Config构建的配置服务器，天然就支持对微服务应用配置信息的版本管理，并且可以通过Git客户端工具来方便的管理和访问配置内容。当然它也提供了对其他存储方式的支持，比如：SVN仓库、本地化文件系统。<br><a id="more"></a><br>在本文中，我们将学习如何构建一个基于Git存储的分布式配置中心，并对客户端进行改造，并让其能够从配置中心获取配置信息并绑定到代码中的整个过程。</p><h3 id="准备配置仓库"><a href="#准备配置仓库" class="headerlink" title="准备配置仓库"></a>准备配置仓库</h3><ul><li>准备一个git仓库，可以在码云或Github上创建都可以。比如本文准备的仓库示例：<a href="https://gitee.com/winter_chen/config-repo" target="_blank" rel="external">https://gitee.com/winter_chen/config-repo</a></li><li><p>假设我们读取配置中心的应用名为 <font color="#FFB90F">config-client</font>，那么我们可以在git仓库中该项目的默认配置文件 <font color="#FFB90F">config-client.yml</font>：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">info:</div><div class="line">  profile: default</div></pre></td></tr></table></figure></li><li><p>为了演示加载不同环境的配置，我们可以在git仓库中再创建一个针对dev环境的配置文件 <font color="#FFB90F">config-client-dev.yml</font>：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">info:</div><div class="line">  profile: dev</div></pre></td></tr></table></figure></li></ul><h3 id="构建配置中心"><a href="#构建配置中心" class="headerlink" title="构建配置中心"></a>构建配置中心</h3><p>通过Spring Cloud Config来构建一个分布式配置中心非常简单，只需要三步：</p><ul><li>创建一个基础的Spring Boot工程，命名为： <font color="#FFB90F">config-server-git</font> ，并在 <font color="#FFB90F">pom.xml</font> 中引入下面的依赖（省略了parent和dependencyManagement部分）： </li></ul><figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-config-server<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></div></pre></td></tr></table></figure><ul><li>创建Spring Boot的程序主类，并添加 <font color="#FFB90F">@EnableConfigServer</font> 注解，开启Spring Cloud Config的服务端功能。</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@EnableConfigServer</span></div><div class="line"><span class="meta">@SpringBootApplication</span></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Application</span> </span>&#123;</div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</div><div class="line"><span class="keyword">new</span> SpringApplicationBuilder(Application.class).web(<span class="keyword">true</span>).run(args);</div><div class="line">&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><ul><li>在 <font color="#FFB90F">application.yml</font> 中添加配置服务的基本信息以及Git仓库的相关信息，例如：</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">spring</div><div class="line">  application:</div><div class="line">    name: config-server</div><div class="line">  cloud:</div><div class="line">    config:</div><div class="line">      server:</div><div class="line">        git:</div><div class="line">          uri: http://git.oschina.net/didispace/config-repo-demo/</div><div class="line">server:</div><div class="line">  port: 1201</div></pre></td></tr></table></figure><p>到这里，使用一个通过Spring Cloud Config实现，并使用Git管理配置内容的分布式配置中心就已经完成了。我们可以将该应用先启动起来，确保没有错误产生，然后再尝试下面的内容。</p><blockquote><p>如果我们的Git仓库需要权限访问，那么可以通过配置下面的两个属性来实现；<br>spring.cloud.config.server.git.username：访问Git仓库的用户名<br>spring.cloud.config.server.git.password：访问Git仓库的用户密码</p></blockquote><p>完成了这些准备工作之后，我们就可以通过浏览器、POSTMAN或CURL等工具直接来访问到我们的配置内容了。访问配置信息的URL与配置文件的映射关系如下：</p><ul><li>/{application}/{profile}[/{label}]</li><li>/{application}-{profile}.yml</li><li>/{label}/{application}-{profile}.yml</li><li>/{application}-{profile}.properties</li><li>/{label}/{application}-{profile}.properties</li></ul><p>上面的url会映射<font color="#FFB90F">{application}-{profile}.properties</font>对应的配置文件，其中 <font color="#FFB90F">{label}</font> 对应Git上不同的分支，默认为master。我们可以尝试构造不同的url来访问不同的配置内容，比如，要访问master分支，config-client应用的dev环境，就可以访问这个url： <font color="#FFB90F"><a href="http://localhost:1201/config-client/dev/master" target="_blank" rel="external">http://localhost:1201/config-client/dev/master</a></font> ，并获得如下返回：</p><figure class="highlight json"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div></pre></td><td class="code"><pre><div class="line">&#123;</div><div class="line">    <span class="attr">"name"</span>: <span class="string">"config-client"</span>,</div><div class="line">    <span class="attr">"profiles"</span>: [</div><div class="line">        <span class="string">"dev"</span></div><div class="line">    ],</div><div class="line">    <span class="attr">"label"</span>: <span class="string">"master"</span>,</div><div class="line">    <span class="attr">"version"</span>: <span class="literal">null</span>,</div><div class="line">    <span class="attr">"state"</span>: <span class="literal">null</span>,</div><div class="line">    <span class="attr">"propertySources"</span>: [</div><div class="line">        &#123;</div><div class="line">            <span class="attr">"name"</span>: <span class="string">"http://git.oschina.net/didispace/config-repo-demo/config-client-dev.yml"</span>,</div><div class="line">            <span class="attr">"source"</span>: &#123;</div><div class="line">                <span class="attr">"info.profile"</span>: <span class="string">"dev"</span></div><div class="line">            &#125;</div><div class="line">        &#125;,</div><div class="line">        &#123;</div><div class="line">            <span class="attr">"name"</span>: <span class="string">"http://git.oschina.net/didispace/config-repo-demo/config-client.yml"</span>,</div><div class="line">            <span class="attr">"source"</span>: &#123;</div><div class="line">                <span class="attr">"info.profile"</span>: <span class="string">"default"</span></div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">    ]</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>我们可以看到该Json中返回了应用名：config-client，环境名：dev，分支名：master，以及default环境和dev环境的配置内容。</p><h3 id="构建客户端"><a href="#构建客户端" class="headerlink" title="构建客户端"></a>构建客户端</h3><p>在完成了上述验证之后，确定配置服务中心已经正常运作，下面我们尝试如何在微服务应用中获取上述的配置信息。</p><ul><li>创建一个Spring Boot应用，命名为config-client，并在pom.xml中引入下述依赖：</li></ul><figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-web<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-config<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></div></pre></td></tr></table></figure><ul><li>创建Spring Boot的应用主类，具体如下：</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@SpringBootApplication</span></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Application</span> </span>&#123;</div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</div><div class="line"><span class="keyword">new</span> SpringApplicationBuilder(Application.class).web(<span class="keyword">true</span>).run(args);</div><div class="line">&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><ul><li>创建 <font color="#FFB90F">bootstrap.yml</font> 配置，来指定获取配置文件的 <font color="#FFB90F">config-server-git</font> 位置，例如：</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">spring:</div><div class="line">  application:</div><div class="line">    name: config-client</div><div class="line">  cloud:</div><div class="line">    config:</div><div class="line">      uri: http://localhost:1201/</div><div class="line">      profile: default</div><div class="line">      label: master</div><div class="line">server:</div><div class="line">  port: 2001</div></pre></td></tr></table></figure><p>上述配置参数与Git中存储的配置文件中各个部分的对应关系如下：</p><ul><li>spring.application.name：对应配置文件规则中的{application}部分</li><li>spring.cloud.config.profile：对应配置文件规则中的{profile}部分</li><li>spring.cloud.config.label：对应配置文件规则中的{label}部分</li><li>spring.cloud.config.uri：配置中心config-server的地址</li></ul><p><strong>这里需要格外注意：上面这些属性必须配置在bootstrap.properties中，这样config-server中的配置信息才能被正确加载。</strong></p><p>在完成了上面你的代码编写之后，读者可以将config-server-git、config-client都启动起来，然后访问<a href="http://localhost:2001/info" target="_blank" rel="external">http://localhost:2001/info </a>，我们可以看到该端点将会返回从git仓库中获取的配置信息：</p><figure class="highlight json"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">&#123;</div><div class="line">    <span class="attr">"profile"</span>: <span class="string">"default"</span></div><div class="line">&#125;</div></pre></td></tr></table></figure><p>另外，我们也可以修改config-client的profile为dev来观察加载配置的变化。</p><h3 id="代码示例"><a href="#代码示例" class="headerlink" title="代码示例"></a>代码示例</h3><p>样例工程将沿用之前在码云和GitHub上创建的SpringCloud-Learning项目，重新做了一下整理。通过不同目录来区分Brixton和Dalston的示例。</p><ul><li>码云: <a href="https://gitee.com/didispace/SpringCloud-Learning/tree/master/2-Dalston%E7%89%88%E6%95%99%E7%A8%8B%E7%A4%BA%E4%BE%8B" target="_blank" rel="external">点击查看</a></li><li>GitHub: <a href="https://github.com/dyc87112/SpringCloud-Learning/tree/master/2-Dalston%E7%89%88%E6%95%99%E7%A8%8B%E7%A4%BA%E4%BE%8B" target="_blank" rel="external">点击查看</a></li></ul><p>具体工程说明如下：</p><ul><li>基于Git仓库的配置中心：config-server-git</li><li>使用配置中心的客户端：config-client</li></ul><p>原作者：程序员didi<br>原文出处：<a href="http://blog.didispace.com/spring-cloud-starter-dalston-3/" target="_blank" rel="external">http://blog.didispace.com/spring-cloud-starter-dalston-3/</a></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Spring Cloud Config是Spring Cloud团队创建的一个全新项目，用来为分布式系统中的基础设施和微服务应用提供集中化的外部配置支持，它分为服务端与客户端两个部分。其中服务端也称为分布式配置中心，它是一个独立的微服务应用，用来连接配置仓库并为客户端提供获取配置信息、加密/解密信息等访问接口；而客户端则是微服务架构中的各个微服务应用或基础设施，它们通过指定的配置中心来管理应用资源与业务相关的配置内容，并在启动的时候从配置中心获取和加载配置信息。Spring Cloud Config实现了对服务端和客户端中环境变量和属性配置的抽象映射，所以它除了适用于Spring构建的应用程序之外，也可以在任何其他语言运行的应用程序中使用。由于Spring Cloud Config实现的配置中心默认采用Git来存储配置信息，所以使用Spring Cloud Config构建的配置服务器，天然就支持对微服务应用配置信息的版本管理，并且可以通过Git客户端工具来方便的管理和访问配置内容。当然它也提供了对其他存储方式的支持，比如：SVN仓库、本地化文件系统。&lt;br&gt;
    
    </summary>
    
      <category term="Spring Cloud" scheme="http://winterchens.github.io/categories/Spring-Cloud/"/>
    
    
      <category term="Spring Cloud" scheme="http://winterchens.github.io/tags/Spring-Cloud/"/>
    
  </entry>
  
  <entry>
    <title>Java导出Excel文档（poi），并上传到腾讯云对象存储服务器</title>
    <link href="http://winterchens.github.io/2017/10/21/java-make-excel-poi-to-upload-cloud/"/>
    <id>http://winterchens.github.io/2017/10/21/java-make-excel-poi-to-upload-cloud/</id>
    <published>2017-10-21T12:00:00.000Z</published>
    <updated>2017-10-21T12:09:13.000Z</updated>
    
    <content type="html"><![CDATA[<h3 id="需求"><a href="#需求" class="headerlink" title="需求"></a>需求</h3><p><strong>后台生成周报月报季报年报Excel，将文件下载链接推送给对应客户</strong><br><a id="more"></a></p><h3 id="开发思路："><a href="#开发思路：" class="headerlink" title="开发思路："></a>开发思路：</h3><p><strong>1.根据选定日期生成周报，月报，季报，年报数据</strong><br><strong>2.将这些数据报告生成Excel表格</strong><br><strong>3.把生成的文件上传到腾讯云对象存储服务器</strong><br><strong>4.将服务器返回的url存储到数据库</strong></p><h3 id="工具"><a href="#工具" class="headerlink" title="工具"></a>工具</h3><p><strong><a href="http://download.csdn.net/download/yaosir12/9475344" target="_blank" rel="external">poi-3.14-20160307.jar(点击可下载)</a></strong></p><h3 id="数据"><a href="#数据" class="headerlink" title="数据"></a>数据</h3><p>获取数据部分省略了</p><h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h3><p><strong>主方法</strong><br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">addReportExcelToCloud</span><span class="params">(ReportResult rr)</span> </span>&#123;</div><div class="line"></div><div class="line">OutputStream out = <span class="keyword">new</span> ByteArrayOutputStream();</div><div class="line">ExcelProjectUtils eu = <span class="keyword">new</span> ExcelProjectUtils();</div><div class="line">eu.exportExcel(rr, out);   <span class="comment">//&lt;1&gt;</span></div><div class="line">ConvertUtil cu = <span class="keyword">new</span> ConvertUtil();</div><div class="line"><span class="keyword">try</span> &#123;</div><div class="line">ByteArrayInputStream byteInput = cu.parse(out);</div><div class="line">String rs = PicUploadToYun.uploadExcel(SysContent.getFileRename(<span class="string">"案场数据报.xls"</span>), byteInput);  <span class="comment">//&lt;2&gt;</span></div><div class="line">addReportExcelToDB(rr, rs);  <span class="comment">//&lt;3&gt;</span></div><div class="line"><span class="keyword">return</span> <span class="keyword">true</span>;</div><div class="line">&#125; <span class="keyword">catch</span> (Exception e) &#123;</div><div class="line">e.printStackTrace();</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">return</span> <span class="keyword">false</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p><p><1> 将数据生成二进制Excel文件 (方法详细见下面代码)</1></p><p><2> 将生成的二进制文件上传到腾讯云对象存储服务器 (方法详细见下面代码)</2></p><p><3> 将服务器返回的url存储到数据库 (方法详细见下面代码)</3></p><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div><div class="line">109</div><div class="line">110</div><div class="line">111</div><div class="line">112</div><div class="line">113</div><div class="line">114</div><div class="line">115</div><div class="line">116</div><div class="line">117</div><div class="line">118</div><div class="line">119</div><div class="line">120</div><div class="line">121</div><div class="line">122</div><div class="line">123</div><div class="line">124</div><div class="line">125</div><div class="line">126</div><div class="line">127</div><div class="line">128</div><div class="line">129</div><div class="line">130</div><div class="line">131</div><div class="line">132</div><div class="line">133</div><div class="line">134</div><div class="line">135</div><div class="line">136</div><div class="line">137</div><div class="line">138</div><div class="line">139</div><div class="line">140</div><div class="line">141</div><div class="line">142</div><div class="line">143</div><div class="line">144</div><div class="line">145</div><div class="line">146</div><div class="line">147</div><div class="line">148</div><div class="line">149</div><div class="line">150</div><div class="line">151</div><div class="line">152</div><div class="line">153</div><div class="line">154</div><div class="line">155</div><div class="line">156</div><div class="line">157</div><div class="line">158</div><div class="line">159</div><div class="line">160</div><div class="line">161</div><div class="line">162</div><div class="line">163</div><div class="line">164</div><div class="line">165</div><div class="line">166</div><div class="line">167</div><div class="line">168</div><div class="line">169</div><div class="line">170</div><div class="line">171</div><div class="line">172</div><div class="line">173</div><div class="line">174</div><div class="line">175</div><div class="line">176</div><div class="line">177</div><div class="line">178</div><div class="line">179</div><div class="line">180</div><div class="line">181</div><div class="line">182</div><div class="line">183</div><div class="line">184</div><div class="line">185</div><div class="line">186</div><div class="line">187</div><div class="line">188</div><div class="line">189</div><div class="line">190</div><div class="line">191</div><div class="line">192</div><div class="line">193</div><div class="line">194</div><div class="line">195</div><div class="line">196</div><div class="line">197</div><div class="line">198</div><div class="line">199</div><div class="line">200</div><div class="line">201</div><div class="line">202</div><div class="line">203</div><div class="line">204</div><div class="line">205</div><div class="line">206</div><div class="line">207</div><div class="line">208</div><div class="line">209</div><div class="line">210</div><div class="line">211</div><div class="line">212</div><div class="line">213</div><div class="line">214</div><div class="line">215</div><div class="line">216</div><div class="line">217</div><div class="line">218</div><div class="line">219</div><div class="line">220</div><div class="line">221</div><div class="line">222</div><div class="line">223</div><div class="line">224</div><div class="line">225</div><div class="line">226</div><div class="line">227</div><div class="line">228</div><div class="line">229</div><div class="line">230</div><div class="line">231</div><div class="line">232</div><div class="line">233</div><div class="line">234</div><div class="line">235</div><div class="line">236</div><div class="line">237</div><div class="line">238</div><div class="line">239</div><div class="line">240</div><div class="line">241</div><div class="line">242</div><div class="line">243</div><div class="line">244</div><div class="line">245</div><div class="line">246</div><div class="line">247</div><div class="line">248</div><div class="line">249</div><div class="line">250</div><div class="line">251</div><div class="line">252</div><div class="line">253</div><div class="line">254</div><div class="line">255</div><div class="line">256</div><div class="line">257</div><div class="line">258</div><div class="line">259</div><div class="line">260</div><div class="line">261</div><div class="line">262</div><div class="line">263</div><div class="line">264</div><div class="line">265</div><div class="line">266</div><div class="line">267</div><div class="line">268</div><div class="line">269</div><div class="line">270</div><div class="line">271</div><div class="line">272</div><div class="line">273</div><div class="line">274</div><div class="line">275</div><div class="line">276</div><div class="line">277</div><div class="line">278</div><div class="line">279</div><div class="line">280</div><div class="line">281</div><div class="line">282</div><div class="line">283</div><div class="line">284</div><div class="line">285</div><div class="line">286</div><div class="line">287</div><div class="line">288</div><div class="line">289</div><div class="line">290</div><div class="line">291</div><div class="line">292</div><div class="line">293</div><div class="line">294</div><div class="line">295</div><div class="line">296</div><div class="line">297</div><div class="line">298</div><div class="line">299</div><div class="line">300</div><div class="line">301</div><div class="line">302</div><div class="line">303</div><div class="line">304</div><div class="line">305</div><div class="line">306</div><div class="line">307</div><div class="line">308</div><div class="line">309</div><div class="line">310</div><div class="line">311</div><div class="line">312</div><div class="line">313</div><div class="line">314</div><div class="line">315</div><div class="line">316</div><div class="line">317</div><div class="line">318</div><div class="line">319</div><div class="line">320</div><div class="line">321</div><div class="line">322</div><div class="line">323</div><div class="line">324</div><div class="line">325</div><div class="line">326</div><div class="line">327</div><div class="line">328</div><div class="line">329</div><div class="line">330</div><div class="line">331</div><div class="line">332</div><div class="line">333</div><div class="line">334</div><div class="line">335</div><div class="line">336</div><div class="line">337</div><div class="line">338</div><div class="line">339</div><div class="line">340</div><div class="line">341</div><div class="line">342</div><div class="line">343</div><div class="line">344</div><div class="line">345</div><div class="line">346</div><div class="line">347</div><div class="line">348</div><div class="line">349</div><div class="line">350</div><div class="line">351</div><div class="line">352</div><div class="line">353</div><div class="line">354</div><div class="line">355</div><div class="line">356</div><div class="line">357</div><div class="line">358</div><div class="line">359</div><div class="line">360</div><div class="line">361</div><div class="line">362</div><div class="line">363</div><div class="line">364</div><div class="line">365</div><div class="line">366</div><div class="line">367</div><div class="line">368</div><div class="line">369</div><div class="line">370</div><div class="line">371</div><div class="line">372</div><div class="line">373</div><div class="line">374</div><div class="line">375</div><div class="line">376</div><div class="line">377</div><div class="line">378</div><div class="line">379</div><div class="line">380</div><div class="line">381</div><div class="line">382</div><div class="line">383</div><div class="line">384</div><div class="line">385</div><div class="line">386</div><div class="line">387</div><div class="line">388</div><div class="line">389</div><div class="line">390</div><div class="line">391</div><div class="line">392</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line"><span class="comment"> * 周报年报生成excel</span></div><div class="line"><span class="comment"> * </span></div><div class="line"><span class="comment"> * <span class="doctag">@param</span> report</span></div><div class="line"><span class="comment"> * <span class="doctag">@param</span> out</span></div><div class="line"><span class="comment"> */</span></div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">exportExcel</span><span class="params">(ReportResult report, OutputStream out)</span> </span>&#123;</div><div class="line"></div><div class="line"><span class="comment">// 判断传入的时间间隔</span></div><div class="line">String dateStr = <span class="string">""</span>;</div><div class="line">String reportName = <span class="string">""</span>;</div><div class="line">List&lt;String&gt; dateCount = DateUtil.getTwoDateEveryDay(report.getStartTime(), report.getEndTime());</div><div class="line"><span class="keyword">if</span> (dateCount.size() &lt;= <span class="number">7</span>) &#123;</div><div class="line">dateStr += <span class="string">"本周"</span>;</div><div class="line">reportName += <span class="string">"案场周报"</span>;</div><div class="line">&#125; <span class="keyword">else</span> <span class="keyword">if</span> (dateCount.size() &gt;= <span class="number">28</span> &amp;&amp; dateCount.size() &lt;= <span class="number">31</span>) &#123;</div><div class="line">dateStr += <span class="string">"本月"</span>;</div><div class="line">reportName += <span class="string">"案场月报"</span>;</div><div class="line">&#125; <span class="keyword">else</span> <span class="keyword">if</span> (dateCount.size() &gt;= <span class="number">85</span> &amp;&amp; dateCount.size() &lt;= <span class="number">100</span>) &#123;</div><div class="line">dateStr += <span class="string">"本季度"</span>;</div><div class="line">reportName += <span class="string">"案场季报"</span>;</div><div class="line">&#125; <span class="keyword">else</span> <span class="keyword">if</span> (dateCount.size() &gt;= <span class="number">180</span> &amp;&amp; dateCount.size() &lt;= <span class="number">185</span>) &#123;</div><div class="line">dateStr += <span class="string">"本半年度"</span>;</div><div class="line">reportName += <span class="string">"案场半年报"</span>;</div><div class="line">&#125; <span class="keyword">else</span> <span class="keyword">if</span> (dateCount.size() &gt;= <span class="number">360</span> &amp;&amp; dateCount.size() &lt;= <span class="number">367</span>) &#123;</div><div class="line">dateStr += <span class="string">"本年度"</span>;</div><div class="line">reportName += <span class="string">"案场年报"</span>;</div><div class="line">&#125; <span class="keyword">else</span> &#123;</div><div class="line">dateStr += <span class="string">"时间段内"</span>;</div><div class="line">reportName += <span class="string">"案场阶段报"</span>;</div><div class="line">&#125;</div><div class="line">report.setReportName(reportName);</div><div class="line"><span class="comment">// 声明一个工作薄</span></div><div class="line">HSSFWorkbook workbook = <span class="keyword">new</span> HSSFWorkbook();</div><div class="line"><span class="comment">// 生成一个表格</span></div><div class="line">HSSFSheet sheet = workbook.createSheet(report.getReportName() + report.getStartTime() + <span class="string">" - "</span> + report.getEndTime());</div><div class="line"><span class="comment">// 设置表格默认列宽度为100个字节</span></div><div class="line">sheet.setDefaultColumnWidth((<span class="keyword">short</span>) <span class="number">100</span>);</div><div class="line"><span class="comment">/** ----------样式一：标题 ------------ **/</span></div><div class="line">HSSFCellStyle style = workbook.createCellStyle();</div><div class="line"><span class="comment">// 设置这些样式</span></div><div class="line">style.setBorderLeft(HSSFCellStyle.BORDER_THIN);</div><div class="line">style.setBorderRight(HSSFCellStyle.BORDER_THIN);</div><div class="line"><span class="comment">//style.setBorderTop(HSSFCellStyle.BORDER_THIN);</span></div><div class="line">style.setAlignment(HSSFCellStyle.ALIGN_CENTER);</div><div class="line"><span class="comment">// 生成一个字体</span></div><div class="line">HSSFFont font = workbook.createFont();</div><div class="line">font.setFontName(<span class="string">"宋体"</span>);</div><div class="line"><span class="comment">//font.setColor(HSSFColor.VIOLET.index);</span></div><div class="line">font.setFontHeightInPoints((<span class="keyword">short</span>) <span class="number">14</span>);</div><div class="line">font.setBoldweight(HSSFFont.BOLDWEIGHT_BOLD);</div><div class="line"><span class="comment">// 把字体应用到当前的样式</span></div><div class="line">style.setFont(font);</div><div class="line"><span class="comment">/***---------样式二：小标题---------***/</span></div><div class="line">HSSFCellStyle style2 = workbook.createCellStyle();</div><div class="line">style2.setBorderLeft(HSSFCellStyle.BORDER_THIN);</div><div class="line">style2.setBorderRight(HSSFCellStyle.BORDER_THIN);</div><div class="line"><span class="comment">//style2.setBorderTop(HSSFCellStyle.BORDER_THIN);</span></div><div class="line">style2.setAlignment(HSSFCellStyle.ALIGN_LEFT);</div><div class="line"></div><div class="line"><span class="comment">//style2.setVerticalAlignment(HSSFCellStyle.VERTICAL_CENTER);</span></div><div class="line"><span class="comment">// 生成另一个字体</span></div><div class="line">HSSFFont font2 = workbook.createFont();</div><div class="line"><span class="comment">//font2.setBoldweight(HSSFFont.BOLDWEIGHT_NORMAL);</span></div><div class="line">font2.setFontName(<span class="string">"宋体"</span>);</div><div class="line">font2.setFontHeightInPoints((<span class="keyword">short</span>) <span class="number">11</span>);</div><div class="line">font2.setBoldweight(HSSFFont.BOLDWEIGHT_BOLD);</div><div class="line"><span class="comment">// 把字体应用到当前的样式</span></div><div class="line">style2.setFont(font2);</div><div class="line"></div><div class="line"><span class="comment">/***    样式三：右侧日期       ***/</span></div><div class="line">HSSFCellStyle style3 = workbook.createCellStyle();</div><div class="line"><span class="comment">//样式</span></div><div class="line">style3.setBorderLeft(HSSFCellStyle.BORDER_THIN);</div><div class="line">style3.setBorderRight(HSSFCellStyle.BORDER_THIN);</div><div class="line">style3.setAlignment(HSSFCellStyle.ALIGN_RIGHT);</div><div class="line">style3.setBorderBottom(HSSFCellStyle.BORDER_THIN);</div><div class="line"><span class="comment">//字体</span></div><div class="line">HSSFFont font3 = workbook.createFont();</div><div class="line">font3.setFontName(<span class="string">"宋体"</span>);</div><div class="line">font3.setFontHeightInPoints((<span class="keyword">short</span>) <span class="number">11</span>);</div><div class="line">style3.setFont(font3);</div><div class="line"></div><div class="line"><span class="comment">/**       样式四：主内容        ***/</span></div><div class="line">HSSFCellStyle style4 = workbook.createCellStyle();</div><div class="line"><span class="comment">//样式</span></div><div class="line">style4.setBorderLeft(HSSFCellStyle.BORDER_THIN);</div><div class="line">style4.setBorderRight(HSSFCellStyle.BORDER_THIN);</div><div class="line">style4.setAlignment(HSSFCellStyle.ALIGN_LEFT);</div><div class="line"><span class="comment">//字体</span></div><div class="line">HSSFFont font4 = workbook.createFont();</div><div class="line">font4.setFontName(<span class="string">"宋体"</span>);</div><div class="line">font4.setFontHeightInPoints((<span class="keyword">short</span>) <span class="number">11</span>);</div><div class="line">style4.setFont(font4);</div><div class="line"></div><div class="line"><span class="comment">/**       样式五：底侧空内容       ***/</span></div><div class="line">HSSFCellStyle style5 = workbook.createCellStyle();</div><div class="line"><span class="comment">//样式</span></div><div class="line">style5.setBorderLeft(HSSFCellStyle.BORDER_THIN);</div><div class="line">style5.setBorderRight(HSSFCellStyle.BORDER_THIN);</div><div class="line">style5.setAlignment(HSSFCellStyle.ALIGN_LEFT);</div><div class="line">style5.setBorderBottom(HSSFCellStyle.BORDER_THIN);</div><div class="line"><span class="comment">//字体</span></div><div class="line">HSSFFont font5 = workbook.createFont();</div><div class="line">font5.setFontName(<span class="string">"宋体"</span>);</div><div class="line">font5.setFontHeightInPoints((<span class="keyword">short</span>) <span class="number">11</span>);</div><div class="line">style5.setFont(font5);</div><div class="line"></div><div class="line"></div><div class="line"><span class="comment">// 声明一个画图的顶级管理器</span></div><div class="line">HSSFPatriarch patriarch = sheet.createDrawingPatriarch();</div><div class="line"><span class="comment">// 定义注释的大小和位置,详见文档</span></div><div class="line">HSSFComment comment = patriarch.createComment(<span class="keyword">new</span> HSSFClientAnchor(<span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, (<span class="keyword">short</span>) <span class="number">4</span>, <span class="number">2</span>, (<span class="keyword">short</span>) <span class="number">6</span>, <span class="number">5</span>));</div><div class="line"><span class="comment">// 设置注释内容</span></div><div class="line">comment.setString(<span class="keyword">new</span> HSSFRichTextString(<span class="string">"数据报"</span>));</div><div class="line"><span class="comment">// 设置注释作者，当鼠标移动到单元格上是可以在状态栏中看到该内容.</span></div><div class="line">comment.setAuthor(<span class="string">"saas"</span>);</div><div class="line"></div><div class="line"><span class="comment">// 产生表格标题行 -- 项目名称</span></div><div class="line">HSSFRow row = sheet.createRow(<span class="number">0</span>);</div><div class="line">createCellAndRow(style4, report.getProjectName(), row);</div><div class="line"></div><div class="line"><span class="comment">// 产生表格标题行 -- 周报名称</span></div><div class="line">row = sheet.createRow(<span class="number">1</span>);</div><div class="line">createCellAndRow(style, report.getReportName(), row);</div><div class="line"></div><div class="line"><span class="comment">// 产生表格标题行 -- 起始时间-终止时间</span></div><div class="line">row = sheet.createRow(<span class="number">2</span>);</div><div class="line">String startTime = DateUtil.format(DateUtil.parse(report.getStartTime(), DateUtil.PATTERN_CLASSICAL_SIMPLE),</div><div class="line">DateUtil.PATTERN_CLASSICAL_SIMPLE_YMD);</div><div class="line">String endTime = DateUtil.format(DateUtil.parse(report.getEndTime(), DateUtil.PATTERN_CLASSICAL_SIMPLE),</div><div class="line">DateUtil.PATTERN_CLASSICAL_SIMPLE_YMD);</div><div class="line">String date = <span class="string">"日期："</span> + startTime + <span class="string">" - "</span> + endTime;</div><div class="line">createCellAndRow(style3, date, row);</div><div class="line"></div><div class="line"><span class="comment">// 接访情况标题</span></div><div class="line">row = sheet.createRow(<span class="number">3</span>);</div><div class="line">createCellAndRow(style2, <span class="string">"·接访情况"</span>, row);</div><div class="line"></div><div class="line"><span class="comment">// 接访客户组数</span></div><div class="line">row = sheet.createRow(<span class="number">4</span>);</div><div class="line">Integer visitCount = report.getVisitCount();</div><div class="line">String visitNum = <span class="string">"1、"</span> + dateStr + <span class="string">"共计接访客户"</span> + visitCount + <span class="string">"组，来访量"</span>;</div><div class="line"><span class="keyword">if</span> (visitCount &lt; <span class="number">40</span>) &#123;</div><div class="line">visitNum += <span class="string">"较少，有待提升"</span>;</div><div class="line">&#125; <span class="keyword">else</span> <span class="keyword">if</span> (visitCount &gt;= <span class="number">41</span> &amp;&amp; visitCount &lt;= <span class="number">99</span>) &#123;</div><div class="line">visitNum += <span class="string">"尚可，还有提高空间"</span>;</div><div class="line">&#125; <span class="keyword">else</span> <span class="keyword">if</span> (visitCount &gt;= <span class="number">100</span> &amp;&amp; visitCount &lt;= <span class="number">139</span>) &#123;</div><div class="line">visitNum += <span class="string">"很多"</span>;</div><div class="line">&#125; <span class="keyword">else</span> <span class="keyword">if</span> (visitCount &gt; <span class="number">140</span>) &#123;</div><div class="line">visitNum += <span class="string">"火爆"</span>;</div><div class="line">&#125;</div><div class="line">createCellAndRow(style4, visitNum, row);</div><div class="line"></div><div class="line"><span class="comment">// 有效接访率</span></div><div class="line">row = sheet.createRow(<span class="number">5</span>);</div><div class="line">Double visitRate = <span class="keyword">new</span> Double(report.getValidVisitRate());</div><div class="line">String visitRateStr = <span class="string">"2、有效接访率为"</span> + visitRate + <span class="string">"%，接访成效"</span>;</div><div class="line"><span class="keyword">if</span> (visitRate &lt; <span class="number">50</span>) &#123;</div><div class="line">visitRateStr += <span class="string">"较低，有待提升"</span>;</div><div class="line">&#125; <span class="keyword">else</span> <span class="keyword">if</span> (visitRate &gt;= <span class="number">50</span> &amp;&amp; visitRate &lt;= <span class="number">65</span>) &#123;</div><div class="line">visitRateStr += <span class="string">"尚可，还有提高空间"</span>;</div><div class="line">&#125; <span class="keyword">else</span> <span class="keyword">if</span> (visitRate &gt;= <span class="number">65</span> &amp;&amp; visitRate &lt;= <span class="number">80</span>) &#123;</div><div class="line">visitRateStr += <span class="string">"很高"</span>;</div><div class="line">&#125; <span class="keyword">else</span> <span class="keyword">if</span> (visitRate &gt; <span class="number">80</span>) &#123;</div><div class="line">visitRateStr += <span class="string">"极高"</span>;</div><div class="line">&#125;</div><div class="line">createCellAndRow(style4, visitRateStr, row);</div><div class="line"></div><div class="line"><span class="comment">// 首访有效率</span></div><div class="line">row = sheet.createRow(<span class="number">6</span>);</div><div class="line">Double newVisitRate = <span class="keyword">new</span> Double(report.getValidNewCuVisitRate());</div><div class="line">String newVisitStr = <span class="string">"3、首访有效率为"</span> + newVisitRate + <span class="string">"%，来访转储客的概率"</span>;</div><div class="line"><span class="keyword">if</span> (newVisitRate &lt; <span class="number">40</span>) &#123;</div><div class="line">newVisitStr += <span class="string">"较差，有待提升"</span>;</div><div class="line">&#125; <span class="keyword">else</span> <span class="keyword">if</span> (newVisitRate &gt;= <span class="number">40</span> &amp;&amp; newVisitRate &lt;= <span class="number">60</span>) &#123;</div><div class="line">newVisitStr += <span class="string">"尚可，还有提高空间"</span>;</div><div class="line">&#125; <span class="keyword">else</span> <span class="keyword">if</span> (newVisitRate &gt;= <span class="number">60</span> &amp;&amp; newVisitRate &lt;= <span class="number">75</span>) &#123;</div><div class="line">newVisitStr += <span class="string">"很高"</span>;</div><div class="line">&#125; <span class="keyword">else</span> <span class="keyword">if</span> (newVisitRate &gt; <span class="number">75</span>) &#123;</div><div class="line">newVisitStr += <span class="string">"极高"</span>;</div><div class="line">&#125;</div><div class="line">createCellAndRow(style4, newVisitStr, row);</div><div class="line"></div><div class="line"><span class="comment">// 老客户接访占比</span></div><div class="line">row = sheet.createRow(<span class="number">7</span>);</div><div class="line">Double oldVisitRate = <span class="keyword">new</span> Double(report.getOldCuVisitRate());</div><div class="line">String oldVisitStr = <span class="string">"4、老客户接访比为"</span> + oldVisitRate + <span class="string">"%，老客户接访的占比"</span>;</div><div class="line"><span class="keyword">if</span> (oldVisitRate &lt; <span class="number">20</span>) &#123;</div><div class="line">oldVisitStr += <span class="string">"较低"</span>;</div><div class="line">&#125; <span class="keyword">else</span> <span class="keyword">if</span> (oldVisitRate &gt;= <span class="number">20</span> &amp;&amp; oldVisitRate &lt;= <span class="number">40</span>) &#123;</div><div class="line">oldVisitStr += <span class="string">"尚可"</span>;</div><div class="line">&#125; <span class="keyword">else</span> <span class="keyword">if</span> (oldVisitRate &gt;= <span class="number">40</span> &amp;&amp; oldVisitRate &lt;= <span class="number">60</span>) &#123;</div><div class="line">oldVisitStr += <span class="string">"很高"</span>;</div><div class="line">&#125; <span class="keyword">else</span> <span class="keyword">if</span> (oldVisitRate &gt; <span class="number">60</span>) &#123;</div><div class="line">oldVisitStr += <span class="string">"极高"</span>;</div><div class="line">&#125;</div><div class="line">createCellAndRow(style4, oldVisitStr, row);</div><div class="line"></div><div class="line"><span class="comment">//空行</span></div><div class="line">row = sheet.createRow(<span class="number">8</span>);</div><div class="line">createCellAndRow(style4, <span class="string">""</span>, row);</div><div class="line"></div><div class="line"><span class="comment">// 储客情况</span></div><div class="line">row = sheet.createRow(<span class="number">9</span>);</div><div class="line">createCellAndRow(style2, <span class="string">"·储客情况"</span>, row);</div><div class="line"></div><div class="line"><span class="comment">// 新增储客</span></div><div class="line">row = sheet.createRow(<span class="number">10</span>);</div><div class="line">Integer newCuCount = report.getNewCuCount();</div><div class="line">String newCuStr = <span class="string">"1、"</span> + dateStr + <span class="string">"新增储客"</span> + newCuCount + <span class="string">"组，新增量"</span>;</div><div class="line"><span class="keyword">if</span> (newCuCount &lt; <span class="number">30</span>) &#123;</div><div class="line">newCuStr += <span class="string">"较少，有待提升"</span>;</div><div class="line">&#125; <span class="keyword">else</span> <span class="keyword">if</span> (newCuCount &gt;= <span class="number">31</span> &amp;&amp; newCuCount &lt;= <span class="number">60</span>) &#123;</div><div class="line">newCuStr += <span class="string">"尚可，还有提高空间"</span>;</div><div class="line">&#125; <span class="keyword">else</span> <span class="keyword">if</span> (newCuCount &gt;= <span class="number">61</span> &amp;&amp; newCuCount &lt;= <span class="number">79</span>) &#123;</div><div class="line">newCuStr += <span class="string">"很多"</span>;</div><div class="line">&#125; <span class="keyword">else</span> <span class="keyword">if</span> (newCuCount &gt; <span class="number">80</span>) &#123;</div><div class="line">newCuStr += <span class="string">"爆满"</span>;</div><div class="line">&#125;</div><div class="line">createCellAndRow(style4, newCuStr, row);</div><div class="line"></div><div class="line"><span class="comment">// 累计老客户</span></div><div class="line">row = sheet.createRow(<span class="number">11</span>);</div><div class="line">Integer oldCuCount = report.getTotalOldCuCount();</div><div class="line">Integer totalCuCount = report.getTotalCuCount();</div><div class="line">Double oldCuRate = <span class="keyword">new</span> Double(SysContent.getTwoNumberForValue(oldCuCount, totalCuCount));</div><div class="line">String oldCuStr = <span class="string">"2、累计老客户总量为"</span> + oldCuCount + <span class="string">"组，老客户占比为"</span> + oldCuRate + <span class="string">"%，显示老客户关注度"</span>;</div><div class="line"><span class="keyword">if</span> (oldCuRate &lt; <span class="number">15</span>) &#123;</div><div class="line">oldCuStr += <span class="string">"较低，有待提升"</span>;</div><div class="line">&#125; <span class="keyword">else</span> <span class="keyword">if</span> (oldCuRate &gt;= <span class="number">15</span> &amp;&amp; oldCuRate &lt;= <span class="number">25</span>) &#123;</div><div class="line">oldCuStr += <span class="string">"尚可，还有提高空间"</span>;</div><div class="line">&#125; <span class="keyword">else</span> <span class="keyword">if</span> (oldCuRate &gt;= <span class="number">25</span> &amp;&amp; oldCuRate &lt;= <span class="number">40</span>) &#123;</div><div class="line">oldCuStr += <span class="string">"很高"</span>;</div><div class="line">&#125; <span class="keyword">else</span> <span class="keyword">if</span> (oldCuRate &gt; <span class="number">40</span>) &#123;</div><div class="line">oldCuStr += <span class="string">"极高"</span>;</div><div class="line">&#125;</div><div class="line">createCellAndRow(style4, oldCuStr, row);</div><div class="line"></div><div class="line"><span class="comment">// 累计总储客</span></div><div class="line">row = sheet.createRow(<span class="number">12</span>);</div><div class="line">String totalOldCuStr = <span class="string">"3、累计总储客"</span> + totalCuCount + <span class="string">"组"</span>;</div><div class="line">createCellAndRow(style4, totalOldCuStr, row);</div><div class="line"></div><div class="line"><span class="comment">// 成交情况(周报没有，其他有)</span></div><div class="line"><span class="keyword">if</span> (report.getSubscribeHouseCount() != <span class="keyword">null</span>) &#123;</div><div class="line"></div><div class="line"><span class="comment">//空行</span></div><div class="line">row = sheet.createRow(<span class="number">13</span>);</div><div class="line">createCellAndRow(style4, <span class="string">""</span>, row);</div><div class="line"></div><div class="line">row = sheet.createRow(<span class="number">14</span>);</div><div class="line">createCellAndRow(style2, <span class="string">"·成交情况"</span>, row);</div><div class="line"></div><div class="line"><span class="comment">// 新增认购套数</span></div><div class="line">row = sheet.createRow(<span class="number">15</span>);</div><div class="line">Integer subscribeHouseCount = report.getSubscribeHouseCount();</div><div class="line">Double subscribeHouseRate = <span class="keyword">new</span> Double(report.getSubscribeHouseRate());</div><div class="line">String subscribeHouseStr = <span class="string">"1、"</span> + dateStr + <span class="string">"新增认购套数"</span> + subscribeHouseCount + <span class="string">"套，较"</span> + dateStr + <span class="string">"同期"</span>;</div><div class="line"><span class="keyword">if</span> (subscribeHouseRate &lt; <span class="number">0</span>) &#123;</div><div class="line">subscribeHouseStr += <span class="string">"减少"</span>;</div><div class="line">&#125; <span class="keyword">else</span> &#123;</div><div class="line">subscribeHouseStr += <span class="string">"增长"</span>;</div><div class="line">&#125;</div><div class="line">subscribeHouseStr += Math.abs(subscribeHouseRate) + <span class="string">"%"</span>;</div><div class="line">createCellAndRow(style4, subscribeHouseStr, row);</div><div class="line"></div><div class="line"><span class="comment">// 新增认购金额</span></div><div class="line">row = sheet.createRow(<span class="number">16</span>);</div><div class="line">Long subscribeMoney = report.getSubscribeMoney();</div><div class="line">Double subscribeMoneyRate = <span class="keyword">new</span> Double(report.getSubscribeMoneyRate());</div><div class="line">String subscribeMoneyStr = <span class="string">"   新增认购金额"</span> + subscribeMoney + <span class="string">"万元，较"</span> + dateStr + <span class="string">"同期"</span>;</div><div class="line"><span class="keyword">if</span> (subscribeHouseRate &lt; <span class="number">0</span>) &#123;</div><div class="line">subscribeMoneyStr += <span class="string">"减少"</span>;</div><div class="line">&#125; <span class="keyword">else</span> &#123;</div><div class="line">subscribeMoneyStr += <span class="string">"增长"</span>;</div><div class="line">&#125;</div><div class="line">subscribeMoneyStr += Math.abs(subscribeMoneyRate) + <span class="string">"%"</span>;</div><div class="line">createCellAndRow(style4, subscribeMoneyStr, row);</div><div class="line"></div><div class="line"><span class="comment">// 新增签约套数</span></div><div class="line">row = sheet.createRow(<span class="number">17</span>);</div><div class="line">Integer signCount = report.getSignCount();</div><div class="line">Double signRate = <span class="keyword">new</span> Double(report.getSignRate());</div><div class="line">String signStr = <span class="string">"2、新增签约套数"</span> + signCount + <span class="string">"套,较"</span> + dateStr + <span class="string">"同期"</span>;</div><div class="line"><span class="keyword">if</span> (signRate &lt; <span class="number">0</span>) &#123;</div><div class="line">signStr += <span class="string">"减少"</span>;</div><div class="line">&#125; <span class="keyword">else</span> &#123;</div><div class="line">signStr += <span class="string">"增长"</span>;</div><div class="line">&#125;</div><div class="line">signStr += Math.abs(signRate) + <span class="string">"%"</span>;</div><div class="line">createCellAndRow(style4, signStr, row);</div><div class="line"></div><div class="line"><span class="comment">// 新增签约金额</span></div><div class="line">row = sheet.createRow(<span class="number">18</span>);</div><div class="line">Long signHouseMoney = report.getSignHouseMoney();</div><div class="line">Double signHouseMoneyRate = <span class="keyword">new</span> Double(report.getSignHouseMoneyRate());</div><div class="line">String signHouseMoneyStr = <span class="string">"   新增签约金额"</span> + signHouseMoney + <span class="string">"万元，较"</span> + dateStr + <span class="string">"同期"</span>;</div><div class="line"><span class="keyword">if</span> (signHouseMoneyRate &lt; <span class="number">0</span>) &#123;</div><div class="line">signHouseMoneyStr += <span class="string">"减少"</span>;</div><div class="line">&#125; <span class="keyword">else</span> &#123;</div><div class="line">signHouseMoneyStr += <span class="string">"增长"</span>;</div><div class="line">&#125;</div><div class="line">signHouseMoneyStr += Math.abs(signHouseMoneyRate) + <span class="string">"%"</span>;</div><div class="line">createCellAndRow(style4, signHouseMoneyStr, row);</div><div class="line"></div><div class="line"><span class="comment">// 新接访签约率</span></div><div class="line">row = sheet.createRow(<span class="number">19</span>);</div><div class="line">Double newCustomerSignedRate = <span class="keyword">new</span> Double(report.getNewCustomerSignedRate());</div><div class="line">String newCustomerSignedStr = <span class="string">"3、"</span> + dateStr + <span class="string">"新客户接访签约率"</span> + newCustomerSignedRate + <span class="string">"%，接访签约概率"</span>;</div><div class="line"><span class="keyword">if</span> (newCustomerSignedRate &lt; <span class="number">4</span>) &#123;</div><div class="line">newCustomerSignedStr += <span class="string">"较低，与理想值差距大"</span>;</div><div class="line">&#125; <span class="keyword">else</span> <span class="keyword">if</span> (newCustomerSignedRate &gt;= <span class="number">4</span> &amp;&amp; newCustomerSignedRate &lt;= <span class="number">6</span>) &#123;</div><div class="line">newCustomerSignedStr += <span class="string">"尚可，还有提高空间"</span>;</div><div class="line">&#125; <span class="keyword">else</span> <span class="keyword">if</span> (newCustomerSignedRate &gt;= <span class="number">6</span> &amp;&amp; newCustomerSignedRate &lt;= <span class="number">7</span>) &#123;</div><div class="line">newCustomerSignedStr += <span class="string">"很高"</span>;</div><div class="line">&#125; <span class="keyword">else</span> <span class="keyword">if</span> (newCustomerSignedRate &gt; <span class="number">7</span>) &#123;</div><div class="line">newCustomerSignedStr += <span class="string">"非常高"</span>;</div><div class="line">&#125;</div><div class="line">createCellAndRow(style4, newCustomerSignedStr, row);</div><div class="line"></div><div class="line"><span class="comment">// 储客签约率</span></div><div class="line">row = sheet.createRow(<span class="number">20</span>);</div><div class="line">Double momeryCustomerSignedRate = <span class="keyword">new</span> Double(report.getMomeryCustomerSignedRate());</div><div class="line">String momeryCustomerSignedStr = <span class="string">"4、储客签约率"</span> + momeryCustomerSignedRate + <span class="string">"%，储备客户签约概率"</span>;</div><div class="line"><span class="keyword">if</span> (momeryCustomerSignedRate &lt; <span class="number">7</span>) &#123;</div><div class="line">momeryCustomerSignedStr += <span class="string">"较低，与理想值差距大"</span>;</div><div class="line">&#125; <span class="keyword">else</span> <span class="keyword">if</span> (momeryCustomerSignedRate &gt;= <span class="number">7</span> &amp;&amp; momeryCustomerSignedRate &lt;= <span class="number">12</span>) &#123;</div><div class="line">momeryCustomerSignedStr += <span class="string">"尚可，还有提高空间"</span>;</div><div class="line">&#125; <span class="keyword">else</span> <span class="keyword">if</span> (momeryCustomerSignedRate &gt;= <span class="number">12</span> &amp;&amp; momeryCustomerSignedRate &lt;= <span class="number">15</span>) &#123;</div><div class="line">momeryCustomerSignedStr += <span class="string">"很高"</span>;</div><div class="line">&#125; <span class="keyword">else</span> <span class="keyword">if</span> (momeryCustomerSignedRate &gt; <span class="number">15</span>) &#123;</div><div class="line">momeryCustomerSignedStr += <span class="string">"非常高"</span>;</div><div class="line">&#125;</div><div class="line">createCellAndRow(style4, momeryCustomerSignedStr, row);</div><div class="line"></div><div class="line"><span class="comment">// 老客户签约率</span></div><div class="line">row = sheet.createRow(<span class="number">21</span>);</div><div class="line">Double oldCustomerSignedRate = <span class="keyword">new</span> Double(report.getOldCustomerSignedRate());</div><div class="line">String oldCustomerSignedStr = <span class="string">"5、老客户签约率为23.2%，高意向客户签约概率"</span>;</div><div class="line"><span class="keyword">if</span> (oldCustomerSignedRate &lt; <span class="number">25</span>) &#123;</div><div class="line">oldCustomerSignedStr += <span class="string">"较低，与理想值差距大"</span>;</div><div class="line">&#125; <span class="keyword">else</span> <span class="keyword">if</span> (oldCustomerSignedRate &gt;= <span class="number">25</span> &amp;&amp; oldCustomerSignedRate &lt;= <span class="number">35</span>) &#123;</div><div class="line">oldCustomerSignedStr += <span class="string">"尚可，还有提高空间"</span>;</div><div class="line">&#125; <span class="keyword">else</span> <span class="keyword">if</span> (oldCustomerSignedRate &gt;= <span class="number">35</span> &amp;&amp; oldCustomerSignedRate &lt;= <span class="number">50</span>) &#123;</div><div class="line">oldCustomerSignedStr += <span class="string">"很高"</span>;</div><div class="line">&#125; <span class="keyword">else</span> <span class="keyword">if</span> (oldCustomerSignedRate &gt; <span class="number">50</span>) &#123;</div><div class="line">oldCustomerSignedStr += <span class="string">"非常高"</span>;</div><div class="line">&#125;</div><div class="line">createCellAndRow(style4, oldCustomerSignedStr, row);</div><div class="line"></div><div class="line"><span class="comment">// 认购客户签约率</span></div><div class="line">row = sheet.createRow(<span class="number">22</span>);</div><div class="line">Double contratCuSignedRate = <span class="keyword">new</span> Double(report.getContratCuSignedRate());</div><div class="line">String contratCuSignedStr = <span class="string">"6、认购客户签约率为92%，已认购客户签约率"</span>;</div><div class="line"><span class="keyword">if</span> (contratCuSignedRate &lt; <span class="number">95</span>) &#123;</div><div class="line">contratCuSignedStr += <span class="string">"不高，较多退订或拒签"</span>;</div><div class="line">&#125; <span class="keyword">else</span> <span class="keyword">if</span> (contratCuSignedRate &gt;= <span class="number">95</span> &amp;&amp; contratCuSignedRate &lt;= <span class="number">97</span>) &#123;</div><div class="line">contratCuSignedStr += <span class="string">"尚可，一定数量退订或拒签"</span>;</div><div class="line">&#125; <span class="keyword">else</span> <span class="keyword">if</span> (contratCuSignedRate &gt;= <span class="number">97</span> &amp;&amp; contratCuSignedRate &lt;= <span class="number">99</span>) &#123;</div><div class="line">contratCuSignedStr += <span class="string">"很高"</span>;</div><div class="line">&#125; <span class="keyword">else</span> <span class="keyword">if</span> (contratCuSignedRate &gt; <span class="number">99</span>) &#123;</div><div class="line">contratCuSignedStr += <span class="string">"非常高"</span>;</div><div class="line">&#125;</div><div class="line">createCellAndRow(style4, contratCuSignedStr, row);</div><div class="line"></div><div class="line"><span class="comment">//空行</span></div><div class="line">row = sheet.createRow(<span class="number">23</span>);</div><div class="line">createCellAndRow(style4, <span class="string">""</span>, row);</div><div class="line"></div><div class="line"><span class="comment">//底侧</span></div><div class="line">row = sheet.createRow(<span class="number">24</span>);</div><div class="line">createCellAndRow(style5, <span class="string">""</span>, row);</div><div class="line"></div><div class="line">&#125;<span class="keyword">else</span>&#123;</div><div class="line">row = sheet.createRow(<span class="number">13</span>);</div><div class="line">createCellAndRow(style5, <span class="string">""</span>, row);</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">try</span> &#123;</div><div class="line">workbook.write(out);</div><div class="line">&#125; <span class="keyword">catch</span> (IOException e) &#123;</div><div class="line">e.printStackTrace();</div><div class="line">&#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">createCellAndRow</span><span class="params">(HSSFCellStyle style, String text, HSSFRow row)</span> </span>&#123;</div><div class="line">HSSFCell cell = row.createCell(<span class="number">0</span>);</div><div class="line">cell.setCellStyle(style);</div><div class="line">HSSFRichTextString rs = <span class="keyword">new</span> HSSFRichTextString(text);</div><div class="line">cell.setCellValue(rs);</div><div class="line">&#125;</div></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line"><span class="comment"> * 上传Excel</span></div><div class="line"><span class="comment"> * <span class="doctag">@param</span> fileNewName</span></div><div class="line"><span class="comment"> * <span class="doctag">@param</span> uploadFile</span></div><div class="line"><span class="comment"> * <span class="doctag">@return</span></span></div><div class="line"><span class="comment"> */</span></div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> String <span class="title">uploadExcel</span><span class="params">(String fileNewName,ByteArrayInputStream uploadFile)</span></span>&#123;</div><div class="line"><span class="comment">// 设置用户属性, 包括appid, secretId和SecretKey</span></div><div class="line"><span class="comment">// 这些属性可以通过cos控制台获取(https://console.qcloud.com/cos)</span></div><div class="line">String version = PropertiesUtil.getValue(<span class="string">"version"</span>);</div><div class="line"> <span class="keyword">long</span> appId = <span class="string">"你的appId"</span>;</div><div class="line">                 String secretId = <span class="string">"你的secretId "</span>;</div><div class="line">                 String secretKey = <span class="string">"你的secretKey "</span>;</div><div class="line"></div><div class="line"><span class="comment">// 设置要操作的bucket</span></div><div class="line">String bucketName = <span class="string">"root"</span>;</div><div class="line"><span class="comment">// 初始化客户端配置</span></div><div class="line">ClientConfig clientConfig = <span class="keyword">new</span> ClientConfig();</div><div class="line"><span class="comment">// 设置bucket所在的区域，比如广州(gz), 天津(tj)</span></div><div class="line">clientConfig.setRegion(<span class="string">"sh"</span>);</div><div class="line"><span class="comment">// 初始化秘钥信息</span></div><div class="line">Credentials cred = <span class="keyword">new</span> Credentials(appId, secretId, secretKey);</div><div class="line"><span class="comment">// 初始化cosClient</span></div><div class="line">COSClient cosClient = <span class="keyword">new</span> COSClient(clientConfig, cred);</div><div class="line"><span class="comment">// 文件操作 //</span></div><div class="line"><span class="comment">// 1. 上传文件(默认不覆盖)</span></div><div class="line"><span class="comment">// 将本地的local_file_1.txt上传到bucket下的根分区下,并命名为sample_file.txt</span></div><div class="line"><span class="comment">// 默认不覆盖, 如果cos上已有文件, 则返回错误</span></div><div class="line">String cosFilePath = <span class="string">"/report/"</span> + fileNewName;</div><div class="line"></div><div class="line"><span class="keyword">byte</span>[] localFilePath1 = <span class="keyword">null</span>;</div><div class="line"><span class="keyword">try</span> &#123;</div><div class="line">localFilePath1 = ConvertUtil.toByteArray(uploadFile);</div><div class="line">&#125; <span class="keyword">catch</span> (IOException e1) &#123;</div><div class="line"><span class="comment">// TODO Auto-generated catch block</span></div><div class="line">e1.printStackTrace();</div><div class="line">&#125;</div><div class="line"></div><div class="line">UploadFileRequest uploadFileRequest = <span class="keyword">new</span> UploadFileRequest(bucketName, cosFilePath, localFilePath1);</div><div class="line">uploadFileRequest.setEnableShaDigest(<span class="keyword">false</span>);</div><div class="line">String uploadFileRet = cosClient.uploadFile(uploadFileRequest);</div><div class="line">System.out.println(<span class="string">"upload file ret:"</span> + uploadFileRet);</div><div class="line"><span class="comment">//获取保存路径</span></div><div class="line">ObjectMapper om = <span class="keyword">new</span> ObjectMapper();</div><div class="line">HashMap map = <span class="keyword">new</span> HashMap&lt;&gt;();</div><div class="line"><span class="keyword">try</span> &#123;</div><div class="line">map = om.readValue(uploadFileRet, HashMap.class);</div><div class="line">&#125; <span class="keyword">catch</span> (JsonParseException e) &#123;</div><div class="line"><span class="comment">// TODO Auto-generated catch block</span></div><div class="line">e.printStackTrace();</div><div class="line">&#125; <span class="keyword">catch</span> (JsonMappingException e) &#123;</div><div class="line"><span class="comment">// TODO Auto-generated catch block</span></div><div class="line">e.printStackTrace();</div><div class="line">&#125; <span class="keyword">catch</span> (IOException e) &#123;</div><div class="line"><span class="comment">// TODO Auto-generated catch block</span></div><div class="line">e.printStackTrace();</div><div class="line">&#125;</div><div class="line">HashMap&lt;String, String&gt; value = (HashMap&lt;String, String&gt;) map.get(<span class="string">"data"</span>);</div><div class="line"><span class="keyword">return</span> value.get(<span class="string">"source_url"</span>);</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">addReportExcelToDB</span><span class="params">(ReportResult rr, String url)</span> </span>&#123;</div><div class="line"></div><div class="line"><span class="keyword">if</span>(StringUtils.isEmpty(url))&#123;</div><div class="line"><span class="keyword">return</span> <span class="keyword">false</span>;</div><div class="line">&#125;</div><div class="line"><span class="keyword">if</span>(rr == <span class="keyword">null</span>)&#123;</div><div class="line"><span class="keyword">return</span> <span class="keyword">false</span>;</div><div class="line">&#125;</div><div class="line"></div><div class="line">ProjectReportRecord prr = <span class="keyword">new</span> ProjectReportRecord();</div><div class="line">prr.setCreateTime(DateUtil.format(<span class="keyword">new</span> Date()));</div><div class="line">prr.setProjectId(rr.getProjectId());</div><div class="line">prr.setProjectName(rr.getProjectName());</div><div class="line">prr.setStartTime(rr.getStartTime());</div><div class="line">prr.setEndTime(rr.getEndTime());</div><div class="line">prr.setUrl(url);</div><div class="line">String report = <span class="string">""</span>;</div><div class="line"><span class="keyword">if</span>(<span class="string">"案场周报"</span>.equals(rr.getReportName()))&#123;</div><div class="line">report = <span class="string">"week"</span>;</div><div class="line">&#125;<span class="keyword">else</span> <span class="keyword">if</span>(<span class="string">"案场月报"</span>.equals(rr.getReportName()))&#123;</div><div class="line">report = <span class="string">"month"</span>;</div><div class="line">&#125;<span class="keyword">else</span> <span class="keyword">if</span>(<span class="string">"案场季报"</span>.equals(rr.getReportName()))&#123;</div><div class="line">report = <span class="string">"quarter"</span>;</div><div class="line">&#125;<span class="keyword">else</span> <span class="keyword">if</span>(<span class="string">"案场半年报"</span>.equals(rr.getReportName()))&#123;</div><div class="line">report = <span class="string">"half"</span>;</div><div class="line">&#125;<span class="keyword">else</span> <span class="keyword">if</span>(<span class="string">"案场年报"</span>.equals(rr.getReportName()))&#123;</div><div class="line">report = <span class="string">"year"</span>;</div><div class="line">&#125;<span class="keyword">else</span>&#123;</div><div class="line">report = <span class="string">"other"</span>;</div><div class="line">&#125;</div><div class="line">prr.setReportName(report);</div><div class="line"></div><div class="line">baseDao.save(prr);</div><div class="line"></div><div class="line"><span class="keyword">return</span> <span class="keyword">true</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure><h3 id="生成的文件示例"><a href="#生成的文件示例" class="headerlink" title="生成的文件示例"></a>生成的文件示例</h3><p><strong>周报或者其他报告都是后台自动根据时间进行判断的</strong></p><p><strong>周报</strong><br><img src="http://img.blog.csdn.net/20171020105154962?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvV2ludGVyX2NoZW4wMDE=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast" alt="这里写图片描述"></p><p><strong>季报</strong></p><p><img src="http://img.blog.csdn.net/20171020105212669?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvV2ludGVyX2NoZW4wMDE=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast" alt="这里写图片描述"></p><p>以上</p>]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;需求&quot;&gt;&lt;a href=&quot;#需求&quot; class=&quot;headerlink&quot; title=&quot;需求&quot;&gt;&lt;/a&gt;需求&lt;/h3&gt;&lt;p&gt;&lt;strong&gt;后台生成周报月报季报年报Excel，将文件下载链接推送给对应客户&lt;/strong&gt;&lt;br&gt;
    
    </summary>
    
      <category term="JavaUtils" scheme="http://winterchens.github.io/categories/JavaUtils/"/>
    
    
      <category term="java" scheme="http://winterchens.github.io/tags/java/"/>
    
      <category term="poi" scheme="http://winterchens.github.io/tags/poi/"/>
    
  </entry>
  
  <entry>
    <title>Spring Cloud构建微服务架构：服务消费（Feign）【Dalston版】</title>
    <link href="http://winterchens.github.io/2017/10/17/spring-cloud-starter-dalston-2-3/"/>
    <id>http://winterchens.github.io/2017/10/17/spring-cloud-starter-dalston-2-3/</id>
    <published>2017-10-17T12:30:00.000Z</published>
    <updated>2017-10-22T09:32:32.000Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>通过前两篇<a href="https://winterchens.github.io/2017/10/17/spring-cloud-starter-dalston-2-1/">《Spring Cloud构建微服务架构：服务消费（基础）》</a>和<a href="https://winterchens.github.io/2017/09/27/spring-cloud-starter-dalston-2-2/">《Spring Cloud构建微服务架构：服务消费（Ribbon）》</a>，我们已经学会了在Spring Cloud中基本的服务调用方式。本文我们将继续介绍Spring Cloud中的另外一个服务消费的工具：Spring Cloud Feign。<br><a id="more"></a></p><h3 id="Spring-Cloud-Feign"><a href="#Spring-Cloud-Feign" class="headerlink" title="Spring Cloud Feign"></a>Spring Cloud Feign</h3></blockquote><p>Spring Cloud Feign是一套基于Netflix Feign实现的声明式服务调用客户端。它使得编写Web服务客户端变得更加简单。我们只需要通过创建接口并用注解来配置它既可完成对Web服务接口的绑定。它具备可插拔的注解支持，包括Feign注解、JAX-RS注解。它也支持可插拔的编码器和解码器。Spring Cloud Feign还扩展了对Spring MVC注解的支持，同时还整合了Ribbon和Eureka来提供均衡负载的HTTP客户端实现。</p><p>下面，我们通过一个例子来展现Feign如何方便的声明对eureka-client服务的定义和调用。</p><h3 id="动手试一试"><a href="#动手试一试" class="headerlink" title="动手试一试"></a>动手试一试</h3><p>下面的例子，我们将利用之前构建的<code>eureka-server</code>作为服务注册中心、<code>eureka-client</code>作为服务提供者作为基础。而基于Spring Cloud Ribbon实现的消费者，我们可以根据<code>eureka-consumer</code>实现的内容进行简单改在就能完成，具体步骤如下：</p><ul><li>根据<code>eureka-consumer</code>复制一个服务消费者工程，命名为：<code>eureka-consumer-feign</code>。在<code>pom.xml</code>中增加下面的依赖：</li></ul><figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></div><div class="line">    ...</div><div class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-feign<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></div></pre></td></tr></table></figure><ul><li>修改应用主类。通过<code>@EnableFeignClients</code>注解开启扫描Spring Cloud Feign客户端的功能：</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@EnableFeignClients</span></div><div class="line"><span class="meta">@EnableDiscoveryClient</span></div><div class="line"><span class="meta">@SpringBootApplication</span></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Application</span> </span>&#123;</div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</div><div class="line"><span class="keyword">new</span> SpringApplicationBuilder(Application.class).web(<span class="keyword">true</span>).run(args);</div><div class="line">&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><ul><li>创建一个Feign的客户端接口定义。使用<code>@FeignClient</code>注解来指定这个接口所要调用的服务名称，接口中定义的各个函数使用Spring MVC的注解就可以来绑定服务提供方的REST接口，比如下面就是绑定<code>eureka-client</code>服务的<code>/dc</code>接口的例子：</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@FeignClient</span>(<span class="string">"eureka-client"</span>)</div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">DcClient</span> </span>&#123;</div><div class="line">    <span class="meta">@GetMapping</span>(<span class="string">"/dc"</span>)</div><div class="line">    <span class="function">String <span class="title">consumer</span><span class="params">()</span></span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure><ul><li>修改Controller。通过定义的feign客户端来调用服务提供方的接口：</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@RestController</span></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DcController</span> </span>&#123;</div><div class="line">    <span class="meta">@Autowired</span></div><div class="line">    DcClient dcClient;</div><div class="line">    <span class="meta">@GetMapping</span>(<span class="string">"/consumer"</span>)</div><div class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">dc</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> dcClient.consumer();</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>通过Spring Cloud Feign来实现服务调用的方式更加简单了，通过<code>@FeignClient</code>定义的接口来统一的生命我们需要依赖的微服务接口。而在具体使用的时候就跟调用本地方法一点的进行调用即可。由于Feign是基于Ribbon实现的，所以它自带了客户端负载均衡功能，也可以通过Ribbon的IRule进行策略扩展。另外，Feign还整合的Hystrix来实现服务的容错保护，在Dalston版本中，Feign的Hystrix默认是关闭的。待后文介绍Hystrix带领大家入门之后，我们再结合介绍Feign中的Hystrix以及配置方式。</p><p>在完成了上面你的代码编写之后，读者可以将<code>eureka-server</code>、<code>eureka-client</code>、<code>eureka-consumer-feign</code>都启动起来，然后访问<a href="http://localhost:2101/consumer" target="_blank" rel="external">http://localhost:2101/consumer</a> ，来跟踪观察<code>eureka-consumer-feign</code>服务是如何消费<code>ureka-client</code>服务的<code>/dc</code>接口的，并且也可以通过启动多个<code>eureka-client</code>服务来观察其负载均衡的效果。</p><h3 id="代码示例"><a href="#代码示例" class="headerlink" title="代码示例"></a>代码示例</h3><p>样例工程将沿用之前在码云和GitHub上创建的SpringCloud-Learning项目，重新做了一下整理。通过不同目录来区分Brixton和Dalston的示例。</p><ul><li>码云: <a href="https://gitee.com/didispace/SpringCloud-Learning/tree/master/2-Dalston%E7%89%88%E6%95%99%E7%A8%8B%E7%A4%BA%E4%BE%8B" target="_blank" rel="external">点击查看</a></li><li>GitHub: <a href="https://github.com/dyc87112/SpringCloud-Learning/tree/master/2-Dalston%E7%89%88%E6%95%99%E7%A8%8B%E7%A4%BA%E4%BE%8B" target="_blank" rel="external">点击查看</a></li></ul><p>具体工程说明如下：</p><ul><li>eureka的服务注册中心：eureka-server</li><li>eureka的服务提供方：eureka-client</li><li>eureka的服务消费者：eureka-consumer-feign</li></ul><p>原作者：程序员didi<br>原文出处：<a href="http://blog.didispace.com/spring-cloud-starter-dalston-2-3/" target="_blank" rel="external">http://blog.didispace.com/spring-cloud-starter-dalston-2-3/</a></p>]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;通过前两篇&lt;a href=&quot;https://winterchens.github.io/2017/10/17/spring-cloud-starter-dalston-2-1/&quot;&gt;《Spring Cloud构建微服务架构：服务消费（基础）》&lt;/a&gt;和&lt;a href=&quot;https://winterchens.github.io/2017/09/27/spring-cloud-starter-dalston-2-2/&quot;&gt;《Spring Cloud构建微服务架构：服务消费（Ribbon）》&lt;/a&gt;，我们已经学会了在Spring Cloud中基本的服务调用方式。本文我们将继续介绍Spring Cloud中的另外一个服务消费的工具：Spring Cloud Feign。&lt;br&gt;
    
    </summary>
    
      <category term="Spring Cloud" scheme="http://winterchens.github.io/categories/Spring-Cloud/"/>
    
    
      <category term="Spring Cloud" scheme="http://winterchens.github.io/tags/Spring-Cloud/"/>
    
      <category term="Feign" scheme="http://winterchens.github.io/tags/Feign/"/>
    
  </entry>
  
  <entry>
    <title>Spring Cloud构建微服务架构：服务消费（Ribbon）【Dalston版】</title>
    <link href="http://winterchens.github.io/2017/10/17/spring-cloud-starter-dalston-2-2/"/>
    <id>http://winterchens.github.io/2017/10/17/spring-cloud-starter-dalston-2-2/</id>
    <published>2017-10-17T11:49:00.000Z</published>
    <updated>2017-10-22T09:32:22.000Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>通过上一篇<a href="https://winterchens.github.io/2017/09/27/spring-cloud-starter-dalston-2-1/">《Spring Cloud构建微服务架构：服务消费（基础）》</a>，我们已经学会如何通过<code>LoadBalancerClient</code>接口来获取某个服务的具体实例，并根据实例信息来发起服务接口消费请求。但是这样的做法需要我们手工的去编写服务选取、链接拼接等繁琐的工作，对于开发人员来说非常的不友好。所以，下来我们看看Spring Cloud中针对客户端负载均衡的工具包：Spring Cloud Ribbon。<br><a id="more"></a></p></blockquote><h3 id="Spring-Cloud-Ribbon"><a href="#Spring-Cloud-Ribbon" class="headerlink" title="Spring Cloud Ribbon"></a>Spring Cloud Ribbon</h3><p>Spring Cloud Ribbon是基于Netflix Ribbon实现的一套客户端负载均衡的工具。它是一个基于HTTP和TCP的客户端负载均衡器。它可以通过在客户端中配置ribbonServerList来设置服务端列表去轮询访问以达到均衡负载的作用。</p><p>当Ribbon与Eureka联合使用时，ribbonServerList会被DiscoveryEnabledNIWSServerList重写，扩展成从Eureka注册中心中获取服务实例列表。同时它也会用NIWSDiscoveryPing来取代IPing，它将职责委托给Eureka来确定服务端是否已经启动。</p><p>而当Ribbon与Consul联合使用时，ribbonServerList会被ConsulServerList来扩展成从Consul获取服务实例列表。同时由ConsulPing来作为IPing接口的实现。</p><p>我们在使用Spring Cloud Ribbon的时候，不论是与Eureka还是Consul结合，都会在引入Spring Cloud Eureka或Spring Cloud Consul依赖的时候通过自动化配置来加载上述所说的配置内容，所以我们可以快速在Spring Cloud中实现服务间调用的负载均衡。</p><p>下面我们通过具体的例子来看看如何使用Spring Cloud Ribbon来实现服务的调用以及客户端均衡负载。</p><h3 id="动手试一试"><a href="#动手试一试" class="headerlink" title="动手试一试"></a>动手试一试</h3><p>下面的例子，我们将利用之前构建的<code>eureka-server</code>作为服务注册中心、<code>eureka-client</code>作为服务提供者作为基础。而基于Spring Cloud Ribbon实现的消费者，我们可以根据<code>eureka-consumer</code>实现的内容进行简单改在就能完成，具体步骤如下：</p><ul><li>根据<code>eureka-consumer</code>复制一个服务消费者工程，命名为：<code>eureka-consumer-ribbon</code>。在<code>pom.xml</code>中增加下面的依赖：</li></ul><figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></div><div class="line">    ...</div><div class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-ribbon<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></div></pre></td></tr></table></figure><ul><li>修改应用主类。为<code>RestTemplate</code>增加<code>@LoadBalanced</code>注解：</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@EnableDiscoveryClient</span></div><div class="line"><span class="meta">@SpringBootApplication</span></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Application</span> </span>&#123;</div><div class="line"><span class="meta">@Bean</span></div><div class="line"><span class="meta">@LoadBalanced</span></div><div class="line"><span class="function"><span class="keyword">public</span> RestTemplate <span class="title">restTemplate</span><span class="params">()</span> </span>&#123;</div><div class="line"><span class="keyword">return</span> <span class="keyword">new</span> RestTemplate();</div><div class="line">&#125;</div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</div><div class="line"><span class="keyword">new</span> SpringApplicationBuilder(Application.class).web(<span class="keyword">true</span>).run(args);</div><div class="line">&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><ul><li>修改<code>Controller</code>。去掉原来通过<code>LoadBalancerClient</code>选取实例和拼接URL的步骤，直接通过<code>RestTemplate</code>发起请求。</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"></div><div class="line"><span class="meta">@RestController</span></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DcController</span> </span>&#123;</div><div class="line">    <span class="meta">@Autowired</span></div><div class="line">    RestTemplate restTemplate;</div><div class="line">    <span class="meta">@GetMapping</span>(<span class="string">"/consumer"</span>)</div><div class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">dc</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> restTemplate.getForObject(<span class="string">"http://eureka-client/dc"</span>, String.class);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>可以看到这里，我们除了去掉了原来与<code>LoadBalancerClient</code>相关的逻辑之外，对于<code>RestTemplate</code>的使用，我们的第一个url参数有一些特别。这里请求的host位置并没有使用一个具体的IP地址和端口的形式，而是采用了服务名的方式组成。那么这样的请求为什么可以调用成功呢？因为Spring Cloud Ribbon有一个拦截器，它能够在这里进行实际调用的时候，自动的去选取服务实例，并将实际要请求的IP地址和端口替换这里的服务名，从而完成服务接口的调用。</p><p>在完成了上面你的代码编写之后，读者可以将<code>eureka-server</code>、<code>eureka-client</code>、<code>eureka-consumer-ribbon</code>都启动起来，然后访问<a href="http://localhost:2101/consumer" target="_blank" rel="external">http://localhost:2101/consumer</a> ，来跟踪观察<code>eureka-consumer-ribbon</code>服务是如何消费<code>eureka-client</code>服务的<code>/dc</code>接口的，并且也可以通过启动多个<code>eureka-client</code>服务来观察其负载均衡的效果。</p><h3 id="代码示例"><a href="#代码示例" class="headerlink" title="代码示例"></a>代码示例</h3><p><strong>样例工程将沿用之前在码云和GitHub上创建的SpringCloud-Learning项目，重新做了一下整理。通过不同目录来区分Brixton和Dalston的示例。</strong></p><ul><li>码云: <a href="https://gitee.com/didispace/SpringCloud-Learning/tree/master/2-Dalston%E7%89%88%E6%95%99%E7%A8%8B%E7%A4%BA%E4%BE%8B" target="_blank" rel="external">点击查看</a></li><li>GitHub: <a href="https://github.com/dyc87112/SpringCloud-Learning/tree/master/2-Dalston%E7%89%88%E6%95%99%E7%A8%8B%E7%A4%BA%E4%BE%8B" target="_blank" rel="external">点击查看</a></li></ul><p>具体工程说明如下：</p><ul><li>eureka的服务注册中心：eureka-server</li><li>eureka的服务提供方：eureka-client</li><li>eureka的服务消费者：eureka-consumer-ribbon</li></ul><p>原作者：程序员didi<br>原文出处：<a href="http://blog.didispace.com/spring-cloud-starter-dalston-2-2/" target="_blank" rel="external">http://blog.didispace.com/spring-cloud-starter-dalston-2-2/</a></p>]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;通过上一篇&lt;a href=&quot;https://winterchens.github.io/2017/09/27/spring-cloud-starter-dalston-2-1/&quot;&gt;《Spring Cloud构建微服务架构：服务消费（基础）》&lt;/a&gt;，我们已经学会如何通过&lt;code&gt;LoadBalancerClient&lt;/code&gt;接口来获取某个服务的具体实例，并根据实例信息来发起服务接口消费请求。但是这样的做法需要我们手工的去编写服务选取、链接拼接等繁琐的工作，对于开发人员来说非常的不友好。所以，下来我们看看Spring Cloud中针对客户端负载均衡的工具包：Spring Cloud Ribbon。&lt;br&gt;
    
    </summary>
    
      <category term="Spring Cloud" scheme="http://winterchens.github.io/categories/Spring-Cloud/"/>
    
    
      <category term="Spring Cloud" scheme="http://winterchens.github.io/tags/Spring-Cloud/"/>
    
      <category term="Ribbon" scheme="http://winterchens.github.io/tags/Ribbon/"/>
    
  </entry>
  
  <entry>
    <title>Spring Cloud构建微服务架构：服务消费（基础）【Dalston版】</title>
    <link href="http://winterchens.github.io/2017/10/17/spring-cloud-starter-dalston-2-1/"/>
    <id>http://winterchens.github.io/2017/10/17/spring-cloud-starter-dalston-2-1/</id>
    <published>2017-10-17T11:37:00.000Z</published>
    <updated>2017-10-17T12:24:25.000Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>通过上一篇 <a href="https://winterchens.github.io/2017/09/27/spring-cloud-starter-dalston-1/">《Spring Cloud构建微服务架构：服务注册与发现》</a>，我们已经成功地将服务提供者：eureka-client或consul-client注册到了Eureka服务注册中心或Consul服务端上了，同时我们也通过DiscoveryClient接口的getServices获取了当前客户端缓存的所有服务清单，那么接下来我们要学习的就是：如何去消费服务提供者的接口？<br><a id="more"></a></p><h3 id="使用LoadBalancerClient"><a href="#使用LoadBalancerClient" class="headerlink" title="使用LoadBalancerClient"></a>使用LoadBalancerClient</h3><p>在Spring Cloud Commons中提供了大量的与服务治理相关的抽象接口，包括<code>DiscoveryClient</code>、这里我们即将介绍的<code>LoadBalancerClient</code>等。对于这些接口的定义我们在上一篇介绍服务注册与发现时已经说过，Spring Cloud做这一层抽象，很好的解耦了服务治理体系，使得我们可以轻易的替换不同的服务治理设施。</p></blockquote><p>从<code>LoadBalancerClient</code>接口的命名中，我们就知道这是一个负载均衡客户端的抽象定义，下面我们就看看如何使用Spring Cloud提供的负载均衡器客户端接口来实现服务的消费。</p><p>下面的例子，我们将利用上一篇中构建的eureka-server作为服务注册中心、eureka-client作为服务提供者作为基础。</p><ul><li>我们先来创建一个服务消费者工程，命名为：<code>eureka-consumer</code>。并在<code>pom.xml</code>中引入依赖（这里省略了parent和dependencyManagement的配置）：</li></ul><figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-eureka<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-web<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-actuator<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></div></pre></td></tr></table></figure><ul><li><p>配置application.properties，指定eureka注册中心的地址：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">spring.application.name=eureka-consumer</div><div class="line">server.port=2101</div><div class="line">eureka.client.serviceUrl.defaultZone=http://localhost:1001/eureka/</div></pre></td></tr></table></figure></li><li><p>创建应用主类。初始化RestTemplate，用来真正发起REST请求。@EnableDiscoveryClient注解用来将当前应用加入到服务治理体系中。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@EnableDiscoveryClient</span></div><div class="line"><span class="meta">@SpringBootApplication</span></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Application</span> </span>&#123;</div><div class="line"><span class="meta">@Bean</span></div><div class="line"><span class="function"><span class="keyword">public</span> RestTemplate <span class="title">restTemplate</span><span class="params">()</span> </span>&#123;</div><div class="line"><span class="keyword">return</span> <span class="keyword">new</span> RestTemplate();</div><div class="line">&#125;</div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</div><div class="line"><span class="keyword">new</span> SpringApplicationBuilder(Application.class).web(<span class="keyword">true</span>).run(args);</div><div class="line">&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></li><li><p>创建一个接口用来消费eureka-client提供的接口：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@RestController</span></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DcController</span> </span>&#123;</div><div class="line">    <span class="meta">@Autowired</span></div><div class="line">    LoadBalancerClient loadBalancerClient;</div><div class="line">    <span class="meta">@Autowired</span></div><div class="line">    RestTemplate restTemplate;</div><div class="line">    <span class="meta">@GetMapping</span>(<span class="string">"/consumer"</span>)</div><div class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">dc</span><span class="params">()</span> </span>&#123;</div><div class="line">        ServiceInstance serviceInstance = loadBalancerClient.choose(<span class="string">"eureka-client"</span>);</div><div class="line">        String url = <span class="string">"http://"</span> + serviceInstance.getHost() + <span class="string">":"</span> + serviceInstance.getPort() + <span class="string">"/dc"</span>;</div><div class="line">        System.out.println(url);</div><div class="line">        <span class="keyword">return</span> restTemplate.getForObject(url, String.class);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></li></ul><p>可以看到这里，我们注入了<code>LoadBalancerClient</code>和<code>RestTemplate</code>，并在<code>/consumer</code>接口的实现中，先通过<code>loadBalancerClient</code>的<code>choose</code>函数来负载均衡的选出一个<code>eureka-client</code>的服务实例，这个服务实例的基本信息存储在<code>ServiceInstance</code>中，然后通过这些对象中的信息拼接出访问<code>/dc</code>接口的详细地址，最后再利用<code>estTemplate</code>对象实现对服务提供者接口的调用。</p><p>在完成了上面你的代码编写之后，读者可以将<code>eureka-server</code>、<code>eureka-client</code>、<code>eureka-consumer</code>都启动起来，然后访问<a href="http://localhost:2101/consumer" target="_blank" rel="external">http://localhost:2101/consumer</a> ，来跟踪观察<code>eureka-consumer</code>服务是如何消费<code>eureka-client</code>服务的<code>/dc</code>接口的。</p><p><strong>consul版的示例，可查看git仓库中的consul-client和consul-consumer</strong><br><strong>更多Spring Cloud内容请持续关注我的博客更新或在《Spring Cloud微服务实战》中获取。</strong></p><h3 id="代码示例"><a href="#代码示例" class="headerlink" title="代码示例"></a>代码示例</h3><p>样例工程将沿用之前在码云和GitHub上创建的SpringCloud-Learning项目，重新做了一下整理。通过不同目录来区分Brixton和Dalston的示例。</p><ul><li>码云: <a href="https://gitee.com/didispace/SpringCloud-Learning/tree/master/2-Dalston%E7%89%88%E6%95%99%E7%A8%8B%E7%A4%BA%E4%BE%8B" target="_blank" rel="external">点击查看</a></li><li>GitHub: <a href="https://github.com/dyc87112/SpringCloud-Learning/tree/master/2-Dalston%E7%89%88%E6%95%99%E7%A8%8B%E7%A4%BA%E4%BE%8B" target="_blank" rel="external">点击查看</a></li></ul><p>具体工程说明如下：</p><ul><li>eureka的服务注册中心：eureka-server</li><li>eureka的服务提供方：eureka-client</li><li>eureka的服务消费者：eureka-consumer</li><li>consul的服务提供方：consul-client</li><li>consul的服务消费者：consul-consumer</li></ul><p>原作者：程序员didi<br>原文出处：<a href="http://blog.didispace.com/spring-cloud-starter-dalston-2-1/" target="_blank" rel="external">http://blog.didispace.com/spring-cloud-starter-dalston-2-1/</a></p>]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;通过上一篇 &lt;a href=&quot;https://winterchens.github.io/2017/09/27/spring-cloud-starter-dalston-1/&quot;&gt;《Spring Cloud构建微服务架构：服务注册与发现》&lt;/a&gt;，我们已经成功地将服务提供者：eureka-client或consul-client注册到了Eureka服务注册中心或Consul服务端上了，同时我们也通过DiscoveryClient接口的getServices获取了当前客户端缓存的所有服务清单，那么接下来我们要学习的就是：如何去消费服务提供者的接口？&lt;br&gt;
    
    </summary>
    
      <category term="Spring Cloud" scheme="http://winterchens.github.io/categories/Spring-Cloud/"/>
    
    
      <category term="Spring Cloud" scheme="http://winterchens.github.io/tags/Spring-Cloud/"/>
    
  </entry>
  
  <entry>
    <title>Spring Cloud构建微服务架构：服务注册与发现（Eureka、Consul）【Dalston版】</title>
    <link href="http://winterchens.github.io/2017/09/27/spring-cloud-starter-dalston-1/"/>
    <id>http://winterchens.github.io/2017/09/27/spring-cloud-starter-dalston-1/</id>
    <published>2017-09-27T13:37:00.000Z</published>
    <updated>2017-10-17T11:46:33.000Z</updated>
    
    <content type="html"><![CDATA[<h3 id="Spring-Cloud简介"><a href="#Spring-Cloud简介" class="headerlink" title="Spring Cloud简介"></a>Spring Cloud简介</h3><p>Spring Cloud是一个基于Spring Boot实现的云应用开发工具，它为基于JVM的云应用开发中涉及的配置管理、服务发现、断路器、智能路由、微代理、控制总线、全局锁、决策竞选、分布式会话和集群状态管理等操作提供了一种简单的开发方式。<br><a id="more"></a><br>Spring Cloud包含了多个子项目（针对分布式系统中涉及的多个不同开源产品），比如：Spring Cloud Config、Spring Cloud Netflix、Spring Cloud0 CloudFoundry、Spring Cloud AWS、Spring Cloud Security、Spring Cloud Commons、Spring Cloud Zookeeper、Spring Cloud CLI等项目。</p><h3 id="微服务架构"><a href="#微服务架构" class="headerlink" title="微服务架构"></a>微服务架构</h3><p>“微服务架构”在这几年非常的火热，以至于关于微服务架构相关的开源产品被反复的提及（比如：netflix、dubbo），Spring Cloud也因Spring社区的强大知名度和影响力也被广大架构师与开发者备受关注。</p><p>那么什么是“微服务架构”呢？简单的说，微服务架构就是将一个完整的应用从数据存储开始垂直拆分成多个不同的服务，每个服务都能独立部署、独立维护、独立扩展，服务与服务间通过诸如RESTful API的方式互相调用。</p><p>对于“微服务架构”，大家在互联网可以搜索到很多相关的介绍和研究文章来进行学习和了解。也可以阅读始祖Martin Fowler的《Microservices》（中文版翻译<a href="http://mp.weixin.qq.com/s/fzk-kENu0I22P3F2Vu7KBA" target="_blank" rel="external">点击查看</a>），本文不做更多的介绍和描述。</p><h3 id="服务治理"><a href="#服务治理" class="headerlink" title="服务治理"></a>服务治理</h3><p>在简单介绍了Spring Cloud和微服务架构之后，下面回归本文的主旨内容，如何使用Spring Cloud来实现服务治理。</p><p>由于Spring Cloud为服务治理做了一层抽象接口，所以在Spring Cloud应用中可以支持多种不同的服务治理框架，比如：Netflix Eureka、Consul、Zookeeper。在Spring Cloud服务治理抽象层的作用下，我们可以无缝地切换服务治理实现，并且不影响任何其他的服务注册、服务发现、服务调用等逻辑。</p><p>所以，下面我们通过介绍两种服务治理的实现来体会Spring Cloud这一层抽象所带来的好处。</p><h3 id="Spring-Cloud-Eureka"><a href="#Spring-Cloud-Eureka" class="headerlink" title="Spring Cloud Eureka"></a>Spring Cloud Eureka</h3><p>首先，我们来尝试使用Spring Cloud Eureka来实现服务治理。</p><p>Spring Cloud Eureka是Spring Cloud Netflix项目下的服务治理模块。而Spring Cloud Netflix项目是Spring Cloud的子项目之一，主要内容是对Netflix公司一系列开源产品的包装，它为Spring Boot应用提供了自配置的Netflix OSS整合。通过一些简单的注解，开发者就可以快速的在应用中配置一下常用模块并构建庞大的分布式系统。它主要提供的模块包括：服务发现（Eureka），断路器（Hystrix），智能路由（Zuul），客户端负载均衡（Ribbon）等。</p><p>下面，就来具体看看如何使用Spring Cloud Eureka实现服务治理。</p><h3 id="创建“服务注册中心”"><a href="#创建“服务注册中心”" class="headerlink" title="创建“服务注册中心”"></a>创建“服务注册中心”</h3><p>创建一个基础的Spring Boot工程，命名为eureka-server，并在pom.xml中引入需要的依赖内容：<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">parent</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-parent<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.5.4.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">relativePath</span>/&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">parent</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-eureka-server<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">dependencyManagement</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></div><div class="line">           <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></div><div class="line">           <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-dependencies<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></div><div class="line">           <span class="tag">&lt;<span class="name">version</span>&gt;</span>Dalston.SR1<span class="tag">&lt;/<span class="name">version</span>&gt;</span></div><div class="line">           <span class="tag">&lt;<span class="name">type</span>&gt;</span>pom<span class="tag">&lt;/<span class="name">type</span>&gt;</span></div><div class="line">           <span class="tag">&lt;<span class="name">scope</span>&gt;</span>import<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></div><div class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">dependencyManagement</span>&gt;</span></div></pre></td></tr></table></figure></p><p>通过<code>@EnableEurekaServer</code>注解启动一个服务注册中心提供给其他应用进行对话。这一步非常的简单，只需要在一个普通的Spring Boot应用中添加这个注解就能开启此功能，比如下面的例子<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@EnableEurekaServer</span></div><div class="line"><span class="meta">@SpringBootApplication</span></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Application</span> </span>&#123;</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</div><div class="line">        <span class="keyword">new</span> SpringApplicationBuilder(Application.class)</div><div class="line">                    .web(<span class="keyword">true</span>).run(args);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p><p>在默认设置下，该服务注册中心也会将自己作为客户端来尝试注册它自己，所以我们需要禁用它的客户端注册行为，只需要在application.properties配置文件中增加如下信息：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">spring.application.name=eureka-server</div><div class="line">server.port=1001</div><div class="line">eureka.instance.hostname=localhost</div><div class="line">eureka.client.register-with-eureka=false</div><div class="line">eureka.client.fetch-registry=false</div></pre></td></tr></table></figure></p><p>为了与后续要进行注册的服务区分，这里将服务注册中心的端口通过server.port属性设置为1001。启动工程后，访问：<a href="http://localhost:1001/" target="_blank" rel="external">http://localhost:1001/</a>，可以看到下面的页面，其中还没有发现任何服务。<br><img src="http://blog.didispace.com/content/images/posts/spring-cloud-starter-dalston-1-1.png" alt="SpringCloud"></p><h3 id="创建“服务提供方”"><a href="#创建“服务提供方”" class="headerlink" title="创建“服务提供方”"></a>创建“服务提供方”</h3><p>下面我们创建提供服务的客户端，并向服务注册中心注册自己。本文我们主要介绍服务的注册与发现，所以我们不妨在服务提供方中尝试着提供一个接口来获取当前所有的服务信息。</p><p>首先，创建一个基本的Spring Boot应用。命名为<code>eureka-client</code>，在<code>pom.xml</code>中，加入如下配置：<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">parent</span>&gt;</span> </div><div class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-parent<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.5.4.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">relativePath</span>/&gt;</span> <span class="comment">&lt;!-- lookup parent from repository --&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">parent</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-eureka<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-web<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">dependencyManagement</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></div><div class="line">           <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></div><div class="line">           <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-dependencies<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></div><div class="line">           <span class="tag">&lt;<span class="name">version</span>&gt;</span>Dalston.SR1<span class="tag">&lt;/<span class="name">version</span>&gt;</span></div><div class="line">           <span class="tag">&lt;<span class="name">type</span>&gt;</span>pom<span class="tag">&lt;/<span class="name">type</span>&gt;</span></div><div class="line">           <span class="tag">&lt;<span class="name">scope</span>&gt;</span>import<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></div><div class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">dependencyManagement</span>&gt;</span></div></pre></td></tr></table></figure></p><p>其次，实现/dc请求处理接口，通过DiscoveryClient对象，在日志中打印出服务实例的相关内容。<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@RestController</span></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DcController</span> </span>&#123;</div><div class="line">    <span class="meta">@Autowired</span></div><div class="line">    DiscoveryClient discoveryClient;</div><div class="line">    <span class="meta">@GetMapping</span>(<span class="string">"/dc"</span>)</div><div class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">dc</span><span class="params">()</span> </span>&#123;</div><div class="line">        String services = <span class="string">"Services: "</span> + discoveryClient.getServices();</div><div class="line">        System.out.println(services);</div><div class="line">        <span class="keyword">return</span> services;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p><p>最后在应用主类中通过加上<code>@EnableDiscoveryClient</code>注解，该注解能激活Eureka中的DiscoveryClient实现，这样才能实现Controller中对服务信息的输出。<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@EnableDiscoveryClient</span></div><div class="line"><span class="meta">@SpringBootApplication</span></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Application</span> </span>&#123;</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</div><div class="line">        <span class="keyword">new</span> SpringApplicationBuilder(</div><div class="line">            ComputeServiceApplication.class)</div><div class="line">            .web(<span class="keyword">true</span>).run(args);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p><p>我们在完成了服务内容的实现之后，再继续对<code>application.properties</code>做一些配置工作，具体如下：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">spring.application.name=eureka-client</div><div class="line">server.port=2001</div><div class="line">eureka.client.serviceUrl.defaultZone=http://localhost:1001/eureka/</div></pre></td></tr></table></figure></p><p>通过<code>spring.application.name</code>属性，我们可以指定微服务的名称后续在调用的时候只需要使用该名称就可以进行服务的访问。<code>eureka.client.serviceUrl.defaultZone</code>属性对应服务注册中心的配置内容，指定服务注册中心的位置。为了在本机上测试区分服务提供方和服务注册中心，使用<code>server.port</code>属性设置不同的端口。</p><p>启动该工程后，再次访问：<a href="http://localhost:1001/" target="_blank" rel="external">http://localhost:1001/</a>。可以如下图内容，我们定义的服务被成功注册了。<br><img src="http://blog.didispace.com/content/images/posts/spring-cloud-starter-dalston-1-2.png" alt="springcloud-2"><br>当然，我们也可以通过直接访问<code>eureka-client</code>服务提供的<code>/dc</code>接口来获取当前的服务清单，只需要访问：<a href="http://localhost:2001/dc，我们可以得到如下输出返回：" target="_blank" rel="external">http://localhost:2001/dc，我们可以得到如下输出返回：</a><br><figure class="highlight yaml"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="attr">Services:</span> <span class="string">[eureka-client]</span></div></pre></td></tr></table></figure></p><p>其中，方括号中的<code>eureka-client</code>就是通过Spring Cloud定义的<code>DiscoveryClient</code>接口在eureka的实现中获取到的所有服务清单。由于Spring Cloud在服务发现这一层做了非常好的抽象，所以，对于上面的程序，我们可以无缝的从eureka的服务治理体系切换到consul的服务治理体系中区。</p><h3 id="Spring-Cloud-Consul"><a href="#Spring-Cloud-Consul" class="headerlink" title="Spring Cloud Consul"></a>Spring Cloud Consul</h3><p>Spring Cloud Consul项目是针对Consul的服务治理实现。Consul是一个分布式高可用的系统，它包含多个组件，但是作为一个整体，在微服务架构中为我们的基础设施提供服务发现和服务配置的工具。它包含了下面几个特性：</p><ul><li>服务发现</li><li>健康检查</li><li>Key/Value存储</li><li>多数据中心<br>由于Spring Cloud Consul项目的实现，我们可以轻松的将基于Spring Boot的微服务应用注册到Consul上，并通过此实现微服务架构中的服务治理。</li></ul><p>以之前实现的基于Eureka的示例（eureka-client）为基础，我们如何将之前实现的服务提供者注册到Consul上呢？方法非常简单，我们只需要在<code>pom.xml</code>中将eureka的依赖修改为如下依赖：<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-consul-discovery<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></div></pre></td></tr></table></figure></p><p>接下来再修改一下<code>application.properites</code>，将consul需要的配置信息加入即可，比如：（下面配置是默认值）<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">spring.cloud.consul.host=localhost</div><div class="line">spring.cloud.consul.port=8500</div></pre></td></tr></table></figure></p><p>到此为止，我们将eureka-client转换为基于consul服务治理的服务提供者就完成了。前文我们已经有提到过服务发现的接口<code>DiscoveryClient</code>是Spring Cloud对服务治理做的一层抽象，所以可以屏蔽Eureka和Consul服务治理的实现细节，我们的程序不需要做任何改变，只需要引入不同的服务治理依赖，并配置相关的配置属性就能轻松的将微服务纳入Spring Cloud的各个服务治理框架中。<br>下面可以尝试让consul的服务提供者运行起来。这里可能读者会问，不需要创建类似eureka-server的服务端吗？由于Consul自身提供了服务端，所以我们不需要像之前实现Eureka的时候创建服务注册中心，直接通过下载consul的服务端程序就可以使用。</p><p>我们可以用下面的命令启动consul的开发模式：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div></pre></td><td class="code"><pre><div class="line">$consul agent -dev</div><div class="line">==&gt; Starting Consul agent...</div><div class="line">==&gt; Starting Consul agent RPC...</div><div class="line">==&gt; Consul agent running!</div><div class="line">           Version: &apos;v0.7.2&apos;</div><div class="line">         Node name: &apos;Lenovo-zhaiyc&apos;</div><div class="line">        Datacenter: &apos;dc1&apos;</div><div class="line">            Server: true (bootstrap: false)</div><div class="line">       Client Addr: 127.0.0.1 (HTTP: 8500, HTTPS: -1, DNS: 8600, RPC: 8400)</div><div class="line">      Cluster Addr: 127.0.0.1 (LAN: 8301, WAN: 8302)</div><div class="line">    Gossip encrypt: false, RPC-TLS: false, TLS-Incoming: false</div><div class="line">             Atlas: &lt;disabled&gt;</div><div class="line">==&gt; Log data will now stream in as it occurs:</div><div class="line">    2017/06/22 07:50:54 [INFO] raft: Initial configuration (index=1): [&#123;Suffrage:Voter ID:127.0.0.1:8300 Address:127.0.0.1:8300&#125;]</div><div class="line">    2017/06/22 07:50:54 [INFO] raft: Node at 127.0.0.1:8300 [Follower] entering Follower state (Leader: &quot;&quot;)</div><div class="line">    2017/06/22 07:50:54 [INFO] serf: EventMemberJoin: Lenovo-zhaiyc 127.0.0.1</div><div class="line">    2017/06/22 07:50:54 [INFO] consul: Adding LAN server Lenovo-zhaiyc (Addr: tcp/127.0.0.1:8300) (DC: dc1)</div><div class="line">    2017/06/22 07:50:54 [INFO] serf: EventMemberJoin: Lenovo-zhaiyc.dc1 127.0.0.1</div><div class="line">    2017/06/22 07:50:54 [INFO] consul: Adding WAN server Lenovo-zhaiyc.dc1 (Addr: tcp/127.0.0.1:8300) (DC: dc1)</div><div class="line">    2017/06/22 07:51:01 [ERR] agent: failed to sync remote state: No cluster leader</div><div class="line">    2017/06/22 07:51:02 [WARN] raft: Heartbeat timeout from &quot;&quot; reached, starting election</div><div class="line">    2017/06/22 07:51:02 [INFO] raft: Node at 127.0.0.1:8300 [Candidate] entering Candidate state in term 2</div><div class="line">    2017/06/22 07:51:02 [DEBUG] raft: Votes needed: 1</div><div class="line">    2017/06/22 07:51:02 [DEBUG] raft: Vote granted from 127.0.0.1:8300 in term 2. Tally: 1</div><div class="line">    2017/06/22 07:51:02 [INFO] raft: Election won. Tally: 1</div><div class="line">    2017/06/22 07:51:02 [INFO] raft: Node at 127.0.0.1:8300 [Leader] entering Leader state</div><div class="line">    2017/06/22 07:51:02 [INFO] consul: cluster leadership acquired</div><div class="line">    2017/06/22 07:51:02 [INFO] consul: New leader elected: Lenovo-zhaiyc</div><div class="line">    2017/06/22 07:51:02 [DEBUG] consul: reset tombstone GC to index 3</div><div class="line">    2017/06/22 07:51:02 [INFO] consul: member &apos;Lenovo-zhaiyc&apos; joined, marking health alive</div><div class="line">    2017/06/22 07:51:02 [INFO] agent: Synced service &apos;consul&apos;</div><div class="line">    2017/06/22 07:51:02 [DEBUG] agent: Node info in sync</div></pre></td></tr></table></figure></p><p>consul服务端启动完成之后，我们再将之前改造后的consul服务提供者启动起来。consul与eureka一样，都提供了简单的ui界面来查看服务的注册情况：</p><p><img src="http://blog.didispace.com/content/images/posts/spring-cloud-starter-dalston-1-3.png" alt="SpringCloud-2"></p><p>更多关于Consul的使用指南，读者可查看官方文档：<a href="https://www.consul.io/" target="_blank" rel="external">https://www.consul.io/</a></p><h3 id="代码示例"><a href="#代码示例" class="headerlink" title="代码示例"></a>代码示例</h3><ul><li>码云：<a href="https://gitee.com/didispace/SpringCloud-Learning/tree/master/2-Dalston%E7%89%88%E6%95%99%E7%A8%8B%E7%A4%BA%E4%BE%8B" target="_blank" rel="external">点击查看</a></li><li>GitHub：<a href="https://gitee.com/didispace/SpringCloud-Learning/tree/master/2-Dalston%E7%89%88%E6%95%99%E7%A8%8B%E7%A4%BA%E4%BE%8B" target="_blank" rel="external">点击查看</a></li></ul><p>具体工程说明如下：</p><ul><li>eureka的服务注册中心：eureka-server</li><li>eureka的服务提供方：eureka-client</li><li>consul的服务提供方：consul-client</li></ul><p>原作者：程序员didi<br>原文出处：<a href="http://blog.didispace.com/spring-cloud-starter-dalston-1/" target="_blank" rel="external">http://blog.didispace.com/spring-cloud-starter-dalston-1/</a></p>]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;Spring-Cloud简介&quot;&gt;&lt;a href=&quot;#Spring-Cloud简介&quot; class=&quot;headerlink&quot; title=&quot;Spring Cloud简介&quot;&gt;&lt;/a&gt;Spring Cloud简介&lt;/h3&gt;&lt;p&gt;Spring Cloud是一个基于Spring Boot实现的云应用开发工具，它为基于JVM的云应用开发中涉及的配置管理、服务发现、断路器、智能路由、微代理、控制总线、全局锁、决策竞选、分布式会话和集群状态管理等操作提供了一种简单的开发方式。&lt;br&gt;
    
    </summary>
    
      <category term="Spring Cloud" scheme="http://winterchens.github.io/categories/Spring-Cloud/"/>
    
    
      <category term="Spring Cloud" scheme="http://winterchens.github.io/tags/Spring-Cloud/"/>
    
      <category term="Eureka" scheme="http://winterchens.github.io/tags/Eureka/"/>
    
      <category term="Consul" scheme="http://winterchens.github.io/tags/Consul/"/>
    
  </entry>
  
  <entry>
    <title>Spring中使用log4j详细配置</title>
    <link href="http://winterchens.github.io/2017/09/26/spring-log4j/"/>
    <id>http://winterchens.github.io/2017/09/26/spring-log4j/</id>
    <published>2017-09-26T08:39:00.000Z</published>
    <updated>2017-09-26T11:37:21.000Z</updated>
    
    <content type="html"><![CDATA[<p>第一步：导入log4j-1.2.17.jar包。<br>第二步：src同级创建并设置log4j.properties。<br>    log4j.properties的详细配置：<br><a id="more"></a><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div></pre></td><td class="code"><pre><div class="line"> ### 设置 ###</div><div class="line">log4j.rootLogger = debug,stdout,D,E</div><div class="line"></div><div class="line">### 输出信息到控制抬 ###</div><div class="line">log4j.appender.stdout = org.apache.log4j.ConsoleAppender</div><div class="line">log4j.appender.stdout.Target = System.out</div><div class="line">log4j.appender.stdout.layout = org.apache.log4j.PatternLayout</div><div class="line">log4j.appender.stdout.layout.ConversionPattern = [%-5p] %d&#123;yyyy-MM-dd HH:mm:ss,SSS&#125; method:%l%n%m%n</div><div class="line"></div><div class="line">### 输出DEBUG 级别以上的日志到=E://logs/error.log ###</div><div class="line">log4j.appender.D = org.apache.log4j.DailyRollingFileAppender</div><div class="line">log4j.appender.D.File = E://logs/log.log</div><div class="line">log4j.appender.D.Append = true</div><div class="line">log4j.appender.D.Threshold = DEBUG </div><div class="line">log4j.appender.D.layout = org.apache.log4j.PatternLayout</div><div class="line">log4j.appender.D.layout.ConversionPattern = %-d&#123;yyyy-MM-dd HH:mm:ss&#125;  [ %t:%r ] - [ %p ]  %m%n</div><div class="line"></div><div class="line">### 输出ERROR 级别以上的日志到=E://logs/error.log ###</div><div class="line">log4j.appender.E = org.apache.log4j.DailyRollingFileAppender</div><div class="line">log4j.appender.E.File =E://logs/error.log </div><div class="line">log4j.appender.E.Append = true</div><div class="line">log4j.appender.E.Threshold = ERROR </div><div class="line">log4j.appender.E.layout = org.apache.log4j.PatternLayout</div><div class="line">log4j.appender.E.layout.ConversionPattern = %-d&#123;yyyy-MM-dd HH:mm:ss&#125;  [ %t:%r ] - [ %p ]  %m%n</div></pre></td></tr></table></figure></p><p><a href="http://blog.csdn.net/qq_30175203/article/details/52084127" target="_blank" rel="external">更详细的log4j.properties配置</a></p><p>第三步：web.xml中加入配置详细：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"><span class="comment">&lt;!-- 设置根目录 --&gt;</span>  </div><div class="line"><span class="comment">&lt;!--初始化log4j.properties--&gt;</span></div><div class="line">   <span class="tag">&lt;<span class="name">context-param</span>&gt;</span>  </div><div class="line">    <span class="tag">&lt;<span class="name">param-name</span>&gt;</span>log4jConfigLocation<span class="tag">&lt;/<span class="name">param-name</span>&gt;</span>  </div><div class="line">    <span class="tag">&lt;<span class="name">param-value</span>&gt;</span>/WEB-INF/classes/log4j.properties<span class="tag">&lt;/<span class="name">param-value</span>&gt;</span>  </div><div class="line"><span class="tag">&lt;/<span class="name">context-param</span>&gt;</span>  </div><div class="line"><span class="comment">&lt;!-- 3000表示 开一条watchdog线程每60秒扫描一下配置文件的变化;这样便于日志存放位置的改变 --&gt;</span>  </div><div class="line"><span class="tag">&lt;<span class="name">context-param</span>&gt;</span>    </div><div class="line">        <span class="tag">&lt;<span class="name">param-name</span>&gt;</span>log4jRefreshInterval<span class="tag">&lt;/<span class="name">param-name</span>&gt;</span>    </div><div class="line">        <span class="tag">&lt;<span class="name">param-value</span>&gt;</span>3000<span class="tag">&lt;/<span class="name">param-value</span>&gt;</span>    </div><div class="line">   <span class="tag">&lt;/<span class="name">context-param</span>&gt;</span>   </div><div class="line"><span class="tag">&lt;<span class="name">listener</span>&gt;</span>  </div><div class="line">    <span class="tag">&lt;<span class="name">listener-class</span>&gt;</span>org.springframework.web.util.Log4jConfigListener<span class="tag">&lt;/<span class="name">listener-class</span>&gt;</span>  </div><div class="line"><span class="tag">&lt;/<span class="name">listener</span>&gt;</span></div></pre></td></tr></table></figure><p>applicationContext.xml就不需要配置了</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div></pre></td><td class="code"><pre><div class="line">&lt;?xml version="1.0" encoding="UTF-8"?&gt;  </div><div class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">"http://www.springframework.org/schema/beans"</span>  </span></div><div class="line"><span class="tag">    <span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span> <span class="attr">xmlns:context</span>=<span class="string">"http://www.springframework.org/schema/context"</span>  </span></div><div class="line"><span class="tag">    <span class="attr">xmlns:aop</span>=<span class="string">"http://www.springframework.org/schema/aop"</span>  </span></div><div class="line"><span class="tag">    <span class="attr">xsi:schemaLocation</span>=<span class="string">"    </span></span></div><div class="line"><span class="tag"><span class="string"></span></span></div><div class="line"><span class="tag"><span class="string">http://www.springframework.org/schema/beans</span></span></div><div class="line"><span class="tag"><span class="string"></span></span></div><div class="line"><span class="tag"><span class="string"></span></span></div><div class="line"><span class="tag"><span class="string">http://www.springframework.org/schema/beans/spring-beans-3.2.xsd</span></span></div><div class="line"><span class="tag"><span class="string"></span></span></div><div class="line"><span class="tag"><span class="string"></span></span></div><div class="line"><span class="tag"><span class="string">http://www.springframework.org/schema/aop</span></span></div><div class="line"><span class="tag"><span class="string"></span></span></div><div class="line"><span class="tag"><span class="string"></span></span></div><div class="line"><span class="tag"><span class="string">http://www.springframework.org/schema/aop/spring-aop-3.2.xsd</span></span></div><div class="line"><span class="tag"><span class="string"></span></span></div><div class="line"><span class="tag"><span class="string"></span></span></div><div class="line"><span class="tag"><span class="string">http://www.springframework.org/schema/context</span></span></div><div class="line"><span class="tag"><span class="string"></span></span></div><div class="line"><span class="tag"><span class="string">           http://www.springframework.org/schema/context/spring-context-3.2.xsd"</span>&gt;</span>  </div><div class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></div></pre></td></tr></table></figure><p>然后日志就可以随着spring的启动而启动了。</p><p>如果想把日志文件打印到Tomcat日志文件中：<br>log4j.appender.R.File=${catalina.home}/logs/youLogFile.log </p><p>这个方法只能Tomcat使用，其它容器就不行了。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;第一步：导入log4j-1.2.17.jar包。&lt;br&gt;第二步：src同级创建并设置log4j.properties。&lt;br&gt;    log4j.properties的详细配置：&lt;br&gt;
    
    </summary>
    
      <category term="spring" scheme="http://winterchens.github.io/categories/spring/"/>
    
    
      <category term="spring" scheme="http://winterchens.github.io/tags/spring/"/>
    
      <category term="log4j" scheme="http://winterchens.github.io/tags/log4j/"/>
    
  </entry>
  
  <entry>
    <title>解决Mysql存入大量TEXT类型的数据报错</title>
    <link href="http://winterchens.github.io/2017/09/26/mysql-text/"/>
    <id>http://winterchens.github.io/2017/09/26/mysql-text/</id>
    <published>2017-09-26T08:37:00.000Z</published>
    <updated>2017-09-26T11:37:05.000Z</updated>
    
    <content type="html"><![CDATA[<p>主要的原因是因为max_sort_length的默认值为1024,=<br>解决办法：该参数是动态参数，任何客户端都可以在Mysql数据库运行时更改该参数的值，例如：<br>1.首先应该查询一下这个参数的默认值为多少<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">mysql&gt; SELECT @@global.max_sort_length;</div></pre></td></tr></table></figure></p><a id="more"></a><p>2.然后去设置这个值：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">mysql&gt; SET GLOBAL max_sort_length=2048;  //2048这个数值由你了</div></pre></td></tr></table></figure><p>3.然后再查询一下这个参数的默认值：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">mysql&gt; SELECT @@global.max_sort_length;</div></pre></td></tr></table></figure></p><p>以上问题就解决了</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;主要的原因是因为max_sort_length的默认值为1024,=&lt;br&gt;解决办法：该参数是动态参数，任何客户端都可以在Mysql数据库运行时更改该参数的值，例如：&lt;br&gt;1.首先应该查询一下这个参数的默认值为多少&lt;br&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;mysql&amp;gt; SELECT @@global.max_sort_length;&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="mysql" scheme="http://winterchens.github.io/categories/mysql/"/>
    
    
      <category term="mysql" scheme="http://winterchens.github.io/tags/mysql/"/>
    
  </entry>
  
  <entry>
    <title>Spring boot Mybatis 整合（完整版）</title>
    <link href="http://winterchens.github.io/2017/09/25/springboot-mybatis/"/>
    <id>http://winterchens.github.io/2017/09/25/springboot-mybatis/</id>
    <published>2017-09-25T15:41:00.000Z</published>
    <updated>2017-10-21T12:21:41.000Z</updated>
    
    <content type="html"><![CDATA[<p><strong>本项目使用的环境：</strong></p><ul><li>开发工具：Intellij IDEA 2017.1.3</li><li>jdk：1.7.0_79</li><li>3.maven:3.3.9<a id="more"></a></li></ul><p><strong>额外功能</strong></p><ul><li>PageHelper 分页插件</li><li>mybatis generator 自动生成代码插件</li></ul><p><strong>步骤：</strong><br><strong>1.创建一个springboot项目：</strong><br><img src="http://img.blog.csdn.net/20170816140405925?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvV2ludGVyX2NoZW4wMDE=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast" alt="这里写图片描述"><br><strong>2.创建项目的文件结构以及jdk的版本</strong><br><img src="http://img.blog.csdn.net/20170816140434993?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvV2ludGVyX2NoZW4wMDE=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast" alt="这里写图片描述"><br><strong>3.选择项目所需要的依赖</strong><br><img src="http://img.blog.csdn.net/20170816140515008?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvV2ludGVyX2NoZW4wMDE=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast" alt="这里写图片描述"><br><img src="http://img.blog.csdn.net/20170816140558735?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvV2ludGVyX2NoZW4wMDE=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast" alt="这里写图片描述"><br>然后点击finish</p><p><strong>5.看一下文件的结构：</strong><br><img src="http://img.blog.csdn.net/20170816140832910?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvV2ludGVyX2NoZW4wMDE=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast" alt="这里写图片描述"></p><p><strong>6.查看一下pom.xml：</strong></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div><div class="line">109</div><div class="line">110</div><div class="line">111</div><div class="line">112</div><div class="line">113</div></pre></td><td class="code"><pre><div class="line">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</div><div class="line"><span class="tag">&lt;<span class="name">project</span> <span class="attr">xmlns</span>=<span class="string">"http://maven.apache.org/POM/4.0.0"</span> <span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span></span></div><div class="line"><span class="tag"><span class="attr">xsi:schemaLocation</span>=<span class="string">"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd"</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">modelVersion</span>&gt;</span>4.0.0<span class="tag">&lt;/<span class="name">modelVersion</span>&gt;</span></div><div class="line"></div><div class="line"><span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.winter<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>springboot-mybatis-demo<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">version</span>&gt;</span>0.0.1-SNAPSHOT<span class="tag">&lt;/<span class="name">version</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">packaging</span>&gt;</span>jar<span class="tag">&lt;/<span class="name">packaging</span>&gt;</span></div><div class="line"></div><div class="line"><span class="tag">&lt;<span class="name">name</span>&gt;</span>springboot-mybatis-demo<span class="tag">&lt;/<span class="name">name</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">description</span>&gt;</span>Demo project for Spring Boot<span class="tag">&lt;/<span class="name">description</span>&gt;</span></div><div class="line"></div><div class="line"><span class="tag">&lt;<span class="name">parent</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-parent<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">version</span>&gt;</span>1.5.6.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">relativePath</span>/&gt;</span> <span class="comment">&lt;!-- lookup parent from repository --&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">parent</span>&gt;</span></div><div class="line"></div><div class="line"><span class="tag">&lt;<span class="name">properties</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">project.build.sourceEncoding</span>&gt;</span>UTF-8<span class="tag">&lt;/<span class="name">project.build.sourceEncoding</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">project.reporting.outputEncoding</span>&gt;</span>UTF-8<span class="tag">&lt;/<span class="name">project.reporting.outputEncoding</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">java.version</span>&gt;</span>1.7<span class="tag">&lt;/<span class="name">java.version</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">properties</span>&gt;</span></div><div class="line"></div><div class="line"><span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-jdbc<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.mybatis.spring.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mybatis-spring-boot-starter<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">version</span>&gt;</span>1.3.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-thymeleaf<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-web<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></div><div class="line"></div><div class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-test<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">scope</span>&gt;</span>test<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">groupId</span>&gt;</span>mysql<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mysql-connector-java<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">version</span>&gt;</span>5.1.35<span class="tag">&lt;/<span class="name">version</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></div><div class="line"><span class="comment">&lt;!-- alibaba的druid数据库连接池 --&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.alibaba<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>druid<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">version</span>&gt;</span>1.0.11<span class="tag">&lt;/<span class="name">version</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.fasterxml.jackson.core<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>jackson-core<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.fasterxml.jackson.core<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>jackson-databind<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.fasterxml.jackson.datatype<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>jackson-datatype-joda<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.fasterxml.jackson.module<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>jackson-module-parameter-names<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></div><div class="line"><span class="comment">&lt;!-- 分页插件 --&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.github.pagehelper<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>pagehelper-spring-boot-starter<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">version</span>&gt;</span>1.1.2<span class="tag">&lt;/<span class="name">version</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></div><div class="line"><span class="comment">&lt;!-- alibaba的druid数据库连接池 --&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.alibaba<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>druid-spring-boot-starter<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">version</span>&gt;</span>1.1.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></div><div class="line"></div><div class="line"><span class="tag">&lt;<span class="name">build</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">plugins</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">plugin</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-maven-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></div><div class="line"><span class="comment">&lt;!-- mybatis generator 自动生成代码插件 --&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">plugin</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.mybatis.generator<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mybatis-generator-maven-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">version</span>&gt;</span>1.3.2<span class="tag">&lt;/<span class="name">version</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">configuration</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">configurationFile</span>&gt;</span>$&#123;basedir&#125;/src/main/resources/generator/generatorConfig.xml<span class="tag">&lt;/<span class="name">configurationFile</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">overwrite</span>&gt;</span>true<span class="tag">&lt;/<span class="name">overwrite</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">verbose</span>&gt;</span>true<span class="tag">&lt;/<span class="name">verbose</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">plugins</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">build</span>&gt;</span></div><div class="line"></div><div class="line"></div><div class="line"><span class="tag">&lt;/<span class="name">project</span>&gt;</span></div></pre></td></tr></table></figure><p><strong>7.项目不使用application.properties文件 而使用更加简洁的application.yml文件：</strong><br><strong>将原有的resource文件夹下的application.properties文件删除，创建一个新的application.yml配置文件，</strong><br><strong>文件的内容如下：</strong><br><figure class="highlight yaml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div></pre></td><td class="code"><pre><div class="line"></div><div class="line"><span class="attr">server:</span></div><div class="line"><span class="attr">  port:</span> <span class="number">8080</span></div><div class="line"></div><div class="line"><span class="attr">spring:</span></div><div class="line"><span class="attr">    datasource:</span></div><div class="line"><span class="attr">        name:</span> <span class="string">test</span></div><div class="line"><span class="attr">        url:</span> <span class="attr">jdbc:mysql://127.0.0.1:3306/depot</span></div><div class="line"><span class="attr">        username:</span> <span class="string">root</span></div><div class="line"><span class="attr">        password:</span> <span class="string">root</span></div><div class="line">        <span class="comment"># 使用druid数据源</span></div><div class="line"><span class="attr">        type:</span> <span class="string">com.alibaba.druid.pool.DruidDataSource</span></div><div class="line"><span class="attr">        driver-class-name:</span> <span class="string">com.mysql.jdbc.Driver</span></div><div class="line"><span class="attr">        filters:</span> <span class="string">stat</span></div><div class="line"><span class="attr">        maxActive:</span> <span class="number">20</span></div><div class="line"><span class="attr">        initialSize:</span> <span class="number">1</span></div><div class="line"><span class="attr">        maxWait:</span> <span class="number">60000</span></div><div class="line"><span class="attr">        minIdle:</span> <span class="number">1</span></div><div class="line"><span class="attr">        timeBetweenEvictionRunsMillis:</span> <span class="number">60000</span></div><div class="line"><span class="attr">        minEvictableIdleTimeMillis:</span> <span class="number">300000</span></div><div class="line"><span class="attr">        validationQuery:</span> <span class="string">select</span> <span class="string">'x'</span></div><div class="line"><span class="attr">        testWhileIdle:</span> <span class="literal">true</span></div><div class="line"><span class="attr">        testOnBorrow:</span> <span class="literal">false</span></div><div class="line"><span class="attr">        testOnReturn:</span> <span class="literal">false</span></div><div class="line"><span class="attr">        poolPreparedStatements:</span> <span class="literal">true</span></div><div class="line"><span class="attr">        maxOpenPreparedStatements:</span> <span class="number">20</span></div><div class="line"><span class="attr">mybatis:</span></div><div class="line"><span class="attr">  mapper-locations:</span> <span class="attr">classpath:mapping/*.xml</span></div><div class="line"><span class="attr">  type-aliases-package:</span> <span class="string">com.winter.model</span></div><div class="line"></div><div class="line"><span class="comment">#pagehelper分页插件</span></div><div class="line"><span class="attr">pagehelper:</span></div><div class="line"><span class="attr">    helperDialect:</span> <span class="string">mysql</span></div><div class="line"><span class="attr">    reasonable:</span> <span class="literal">true</span></div><div class="line"><span class="attr">    supportMethodsArguments:</span> <span class="literal">true</span></div><div class="line"><span class="attr">    params:</span> <span class="string">count=countSql</span></div></pre></td></tr></table></figure></p><p><strong>8.创建数据库：</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">CREATE DATABASE mytest;</div><div class="line"></div><div class="line">CREATE TABLE t_user(</div><div class="line">  user_id INT NOT NULL PRIMARY KEY AUTO_INCREMENT,</div><div class="line">  user_name VARCHAR(255) NOT NULL ,</div><div class="line">  password VARCHAR(255) NOT NULL ,</div><div class="line">  phone VARCHAR(255) NOT NULL</div><div class="line">) ENGINE=INNODB AUTO_INCREMENT=1000 DEFAULT CHARSET=utf8;</div></pre></td></tr></table></figure><p><strong>9.使用mybatis generator 自动生成代码：</strong><br>    a.配置pom.xml中generator 插件所对应的配置文件       ${basedir}/src/main/resources/generator/generatorConfig.xml</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div></pre></td><td class="code"><pre><div class="line">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</div><div class="line"><span class="meta">&lt;!DOCTYPE generatorConfiguration</span></div><div class="line"><span class="meta">        PUBLIC "-//mybatis.org//DTD MyBatis Generator Configuration 1.0//EN"</span></div><div class="line"><span class="meta">        "http://mybatis.org/dtd/mybatis-generator-config_1_0.dtd"&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">generatorConfiguration</span>&gt;</span></div><div class="line">    <span class="comment">&lt;!-- 数据库驱动:选择你的本地硬盘上面的数据库驱动包--&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">classPathEntry</span>  <span class="attr">location</span>=<span class="string">"E:\developer\mybatis-generator-core-1.3.2\lib\mysql-connector-java-5.1.25-bin.jar"</span>/&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">context</span> <span class="attr">id</span>=<span class="string">"DB2Tables"</span>  <span class="attr">targetRuntime</span>=<span class="string">"MyBatis3"</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">commentGenerator</span>&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"suppressDate"</span> <span class="attr">value</span>=<span class="string">"true"</span>/&gt;</span></div><div class="line">            <span class="comment">&lt;!-- 是否去除自动生成的注释 true：是 ： false:否 --&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"suppressAllComments"</span> <span class="attr">value</span>=<span class="string">"true"</span>/&gt;</span></div><div class="line">        <span class="tag">&lt;/<span class="name">commentGenerator</span>&gt;</span></div><div class="line">        <span class="comment">&lt;!--数据库链接URL，用户名、密码 --&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">jdbcConnection</span> <span class="attr">driverClass</span>=<span class="string">"com.mysql.jdbc.Driver"</span> <span class="attr">connectionURL</span>=<span class="string">"jdbc:mysql://127.0.0.1/mytest"</span> <span class="attr">userId</span>=<span class="string">"root"</span> <span class="attr">password</span>=<span class="string">"root"</span>&gt;</span></div><div class="line">        <span class="tag">&lt;/<span class="name">jdbcConnection</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">javaTypeResolver</span>&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"forceBigDecimals"</span> <span class="attr">value</span>=<span class="string">"false"</span>/&gt;</span></div><div class="line">        <span class="tag">&lt;/<span class="name">javaTypeResolver</span>&gt;</span></div><div class="line">        <span class="comment">&lt;!-- 生成模型的包名和位置--&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">javaModelGenerator</span> <span class="attr">targetPackage</span>=<span class="string">"main.java.com.winter.model"</span> <span class="attr">targetProject</span>=<span class="string">"src"</span>&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"enableSubPackages"</span> <span class="attr">value</span>=<span class="string">"true"</span>/&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"trimStrings"</span> <span class="attr">value</span>=<span class="string">"true"</span>/&gt;</span></div><div class="line">        <span class="tag">&lt;/<span class="name">javaModelGenerator</span>&gt;</span></div><div class="line">        <span class="comment">&lt;!-- 生成映射文件的包名和位置--&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">sqlMapGenerator</span> <span class="attr">targetPackage</span>=<span class="string">"main.resources.mapping"</span> <span class="attr">targetProject</span>=<span class="string">"src"</span>&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"enableSubPackages"</span> <span class="attr">value</span>=<span class="string">"true"</span>/&gt;</span></div><div class="line">        <span class="tag">&lt;/<span class="name">sqlMapGenerator</span>&gt;</span></div><div class="line">        <span class="comment">&lt;!-- 生成DAO的包名和位置--&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">javaClientGenerator</span> <span class="attr">type</span>=<span class="string">"XMLMAPPER"</span> <span class="attr">targetPackage</span>=<span class="string">"main.java.com.winter.mapper"</span> <span class="attr">targetProject</span>=<span class="string">"src"</span>&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"enableSubPackages"</span> <span class="attr">value</span>=<span class="string">"true"</span>/&gt;</span></div><div class="line">        <span class="tag">&lt;/<span class="name">javaClientGenerator</span>&gt;</span></div><div class="line">        <span class="comment">&lt;!-- 要生成的表 tableName是数据库中的表名或视图名 domainObjectName是实体类名--&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">table</span> <span class="attr">tableName</span>=<span class="string">"t_user"</span> <span class="attr">domainObjectName</span>=<span class="string">"User"</span> <span class="attr">enableCountByExample</span>=<span class="string">"false"</span> <span class="attr">enableUpdateByExample</span>=<span class="string">"false"</span> <span class="attr">enableDeleteByExample</span>=<span class="string">"false"</span> <span class="attr">enableSelectByExample</span>=<span class="string">"false"</span> <span class="attr">selectByExampleQueryId</span>=<span class="string">"false"</span>&gt;</span><span class="tag">&lt;/<span class="name">table</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">context</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">generatorConfiguration</span>&gt;</span></div></pre></td></tr></table></figure><pre><code>b.点击run-Edit Configurations </code></pre><p><img src="http://img.blog.csdn.net/20170816144245035?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvV2ludGVyX2NoZW4wMDE=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast" alt="这里写图片描述"></p><pre><code>c.添加配置</code></pre><p><img src="http://img.blog.csdn.net/20170816144723793?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvV2ludGVyX2NoZW4wMDE=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast" alt="这里写图片描述"></p><pre><code>d.运行</code></pre><p><img src="http://img.blog.csdn.net/20170816144801010?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvV2ludGVyX2NoZW4wMDE=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast" alt="这里写图片描述"></p><pre><code>最后生成的文件以及结构：</code></pre><p><img src="http://img.blog.csdn.net/20170816145500163?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvV2ludGVyX2NoZW4wMDE=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast" alt="这里写图片描述"></p><p><strong>10.我们还需要修改有点东西，因为生成的类中的路径写了全路径，所以我们要把前面多余的删掉：</strong><br><img src="http://img.blog.csdn.net/20170816151845380?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvV2ludGVyX2NoZW4wMDE=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast" alt="这里写图片描述"></p><p><strong>UserMapper.java</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> com.winter.mapper;</div><div class="line"></div><div class="line"><span class="keyword">import</span> com.winter.model.User;</div><div class="line"></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">UserMapper</span> </span>&#123;</div><div class="line">    <span class="function"><span class="keyword">int</span> <span class="title">deleteByPrimaryKey</span><span class="params">(Integer userId)</span></span>;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">int</span> <span class="title">insert</span><span class="params">(User record)</span></span>;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">int</span> <span class="title">insertSelective</span><span class="params">(User record)</span></span>;</div><div class="line"></div><div class="line">    <span class="function">User <span class="title">selectByPrimaryKey</span><span class="params">(Integer userId)</span></span>;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">int</span> <span class="title">updateByPrimaryKeySelective</span><span class="params">(User record)</span></span>;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">int</span> <span class="title">updateByPrimaryKey</span><span class="params">(User record)</span></span>;</div><div class="line"><span class="comment">//这个方式我自己加的</span></div><div class="line"><span class="function">List&lt;User&gt; <span class="title">selectAllUser</span><span class="params">()</span></span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure><p><strong>User.java</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> com.winter.model;</div><div class="line"></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">User</span> </span>&#123;</div><div class="line">    <span class="keyword">private</span> Integer userId;</div><div class="line"></div><div class="line">    <span class="keyword">private</span> String userName;</div><div class="line"></div><div class="line">    <span class="keyword">private</span> String password;</div><div class="line"></div><div class="line">    <span class="keyword">private</span> String phone;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> Integer <span class="title">getUserId</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> userId;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setUserId</span><span class="params">(Integer userId)</span> </span>&#123;</div><div class="line">        <span class="keyword">this</span>.userId = userId;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getUserName</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> userName;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setUserName</span><span class="params">(String userName)</span> </span>&#123;</div><div class="line">        <span class="keyword">this</span>.userName = userName == <span class="keyword">null</span> ? <span class="keyword">null</span> : userName.trim();</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getPassword</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> password;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setPassword</span><span class="params">(String password)</span> </span>&#123;</div><div class="line">        <span class="keyword">this</span>.password = password == <span class="keyword">null</span> ? <span class="keyword">null</span> : password.trim();</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getPhone</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> phone;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setPhone</span><span class="params">(String phone)</span> </span>&#123;</div><div class="line">        <span class="keyword">this</span>.phone = phone == <span class="keyword">null</span> ? <span class="keyword">null</span> : phone.trim();</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><p><strong>对于映射文件xml有一个快捷的方式把所有德多余的代码一次删掉：</strong><br>    <strong>Ctrl+F 进行搜索“main.java.”:</strong><br>    <img src="http://img.blog.csdn.net/20170816152502755?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvV2ludGVyX2NoZW4wMDE=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast" alt="这里写图片描述"></p><p>对于sql语句这种黄色的背景，真心是看不下去了（解决方案）：<br><img src="http://img.blog.csdn.net/20170816162410282?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvV2ludGVyX2NoZW4wMDE=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast" alt="这里写图片描述"></p><p><strong>UserMapper.xml    </strong><br><figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">&lt;?xml version="1.0" encoding="UTF-8" ?&gt;</div><div class="line"><span class="meta">&lt;!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd" &gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">mapper</span> <span class="attr">namespace</span>=<span class="string">"com.winter.mapper.UserMapper"</span> &gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">resultMap</span> <span class="attr">id</span>=<span class="string">"BaseResultMap"</span> <span class="attr">type</span>=<span class="string">"com.winter.model.User"</span> &gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">id</span> <span class="attr">column</span>=<span class="string">"user_id"</span> <span class="attr">property</span>=<span class="string">"userId"</span> <span class="attr">jdbcType</span>=<span class="string">"INTEGER"</span> /&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">result</span> <span class="attr">column</span>=<span class="string">"user_name"</span> <span class="attr">property</span>=<span class="string">"userName"</span> <span class="attr">jdbcType</span>=<span class="string">"VARCHAR"</span> /&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">result</span> <span class="attr">column</span>=<span class="string">"password"</span> <span class="attr">property</span>=<span class="string">"password"</span> <span class="attr">jdbcType</span>=<span class="string">"VARCHAR"</span> /&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">result</span> <span class="attr">column</span>=<span class="string">"phone"</span> <span class="attr">property</span>=<span class="string">"phone"</span> <span class="attr">jdbcType</span>=<span class="string">"VARCHAR"</span> /&gt;</span></div><div class="line">  <span class="tag">&lt;/<span class="name">resultMap</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">sql</span> <span class="attr">id</span>=<span class="string">"Base_Column_List"</span> &gt;</span></div><div class="line">    user_id, user_name, password, phone</div><div class="line">  <span class="tag">&lt;/<span class="name">sql</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">"selectByPrimaryKey"</span> <span class="attr">resultMap</span>=<span class="string">"BaseResultMap"</span> <span class="attr">parameterType</span>=<span class="string">"java.lang.Integer"</span> &gt;</span></div><div class="line">    select </div><div class="line">    <span class="tag">&lt;<span class="name">include</span> <span class="attr">refid</span>=<span class="string">"Base_Column_List"</span> /&gt;</span></div><div class="line">    from t_user</div><div class="line">    where user_id = #&#123;userId,jdbcType=INTEGER&#125;</div><div class="line">  <span class="tag">&lt;/<span class="name">select</span>&gt;</span></div><div class="line">  <span class="comment">&lt;!-- 这个方法是我自己加的 --&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">"selectAllUser"</span> <span class="attr">resultMap</span>=<span class="string">"BaseResultMap"</span>&gt;</span></div><div class="line">    select</div><div class="line">    <span class="tag">&lt;<span class="name">include</span> <span class="attr">refid</span>=<span class="string">"Base_Column_List"</span> /&gt;</span></div><div class="line">    from t_user</div><div class="line">  <span class="tag">&lt;/<span class="name">select</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">delete</span> <span class="attr">id</span>=<span class="string">"deleteByPrimaryKey"</span> <span class="attr">parameterType</span>=<span class="string">"java.lang.Integer"</span> &gt;</span></div><div class="line">    delete from t_user</div><div class="line">    where user_id = #&#123;userId,jdbcType=INTEGER&#125;</div><div class="line">  <span class="tag">&lt;/<span class="name">delete</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">insert</span> <span class="attr">id</span>=<span class="string">"insert"</span> <span class="attr">parameterType</span>=<span class="string">"com.winter.model.User"</span> &gt;</span></div><div class="line">    insert into t_user (user_id, user_name, password, </div><div class="line">      phone)</div><div class="line">    values (#&#123;userId,jdbcType=INTEGER&#125;, #&#123;userName,jdbcType=VARCHAR&#125;, #&#123;password,jdbcType=VARCHAR&#125;, </div><div class="line">      #&#123;phone,jdbcType=VARCHAR&#125;)</div><div class="line">  <span class="tag">&lt;/<span class="name">insert</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">insert</span> <span class="attr">id</span>=<span class="string">"insertSelective"</span> <span class="attr">parameterType</span>=<span class="string">"com.winter.model.User"</span> &gt;</span></div><div class="line">    insert into t_user</div><div class="line">    <span class="tag">&lt;<span class="name">trim</span> <span class="attr">prefix</span>=<span class="string">"("</span> <span class="attr">suffix</span>=<span class="string">")"</span> <span class="attr">suffixOverrides</span>=<span class="string">","</span> &gt;</span></div><div class="line">      <span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">"userId != null"</span> &gt;</span></div><div class="line">        user_id,</div><div class="line">      <span class="tag">&lt;/<span class="name">if</span>&gt;</span></div><div class="line">      <span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">"userName != null"</span> &gt;</span></div><div class="line">        user_name,</div><div class="line">      <span class="tag">&lt;/<span class="name">if</span>&gt;</span></div><div class="line">      <span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">"password != null"</span> &gt;</span></div><div class="line">        password,</div><div class="line">      <span class="tag">&lt;/<span class="name">if</span>&gt;</span></div><div class="line">      <span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">"phone != null"</span> &gt;</span></div><div class="line">        phone,</div><div class="line">      <span class="tag">&lt;/<span class="name">if</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">trim</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">trim</span> <span class="attr">prefix</span>=<span class="string">"values ("</span> <span class="attr">suffix</span>=<span class="string">")"</span> <span class="attr">suffixOverrides</span>=<span class="string">","</span> &gt;</span></div><div class="line">      <span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">"userId != null"</span> &gt;</span></div><div class="line">        #&#123;userId,jdbcType=INTEGER&#125;,</div><div class="line">      <span class="tag">&lt;/<span class="name">if</span>&gt;</span></div><div class="line">      <span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">"userName != null"</span> &gt;</span></div><div class="line">        #&#123;userName,jdbcType=VARCHAR&#125;,</div><div class="line">      <span class="tag">&lt;/<span class="name">if</span>&gt;</span></div><div class="line">      <span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">"password != null"</span> &gt;</span></div><div class="line">        #&#123;password,jdbcType=VARCHAR&#125;,</div><div class="line">      <span class="tag">&lt;/<span class="name">if</span>&gt;</span></div><div class="line">      <span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">"phone != null"</span> &gt;</span></div><div class="line">        #&#123;phone,jdbcType=VARCHAR&#125;,</div><div class="line">      <span class="tag">&lt;/<span class="name">if</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">trim</span>&gt;</span></div><div class="line">  <span class="tag">&lt;/<span class="name">insert</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">update</span> <span class="attr">id</span>=<span class="string">"updateByPrimaryKeySelective"</span> <span class="attr">parameterType</span>=<span class="string">"com.winter.model.User"</span> &gt;</span></div><div class="line">    update t_user</div><div class="line">    <span class="tag">&lt;<span class="name">set</span> &gt;</span></div><div class="line">      <span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">"userName != null"</span> &gt;</span></div><div class="line">        user_name = #&#123;userName,jdbcType=VARCHAR&#125;,</div><div class="line">      <span class="tag">&lt;/<span class="name">if</span>&gt;</span></div><div class="line">      <span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">"password != null"</span> &gt;</span></div><div class="line">        password = #&#123;password,jdbcType=VARCHAR&#125;,</div><div class="line">      <span class="tag">&lt;/<span class="name">if</span>&gt;</span></div><div class="line">      <span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">"phone != null"</span> &gt;</span></div><div class="line">        phone = #&#123;phone,jdbcType=VARCHAR&#125;,</div><div class="line">      <span class="tag">&lt;/<span class="name">if</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">set</span>&gt;</span></div><div class="line">    where user_id = #&#123;userId,jdbcType=INTEGER&#125;</div><div class="line">  <span class="tag">&lt;/<span class="name">update</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">update</span> <span class="attr">id</span>=<span class="string">"updateByPrimaryKey"</span> <span class="attr">parameterType</span>=<span class="string">"com.winter.model.User"</span> &gt;</span></div><div class="line">    update t_user</div><div class="line">    set user_name = #&#123;userName,jdbcType=VARCHAR&#125;,</div><div class="line">      password = #&#123;password,jdbcType=VARCHAR&#125;,</div><div class="line">      phone = #&#123;phone,jdbcType=VARCHAR&#125;</div><div class="line">    where user_id = #&#123;userId,jdbcType=INTEGER&#125;</div><div class="line">  <span class="tag">&lt;/<span class="name">update</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">mapper</span>&gt;</span></div></pre></td></tr></table></figure></p><p><strong>11.打开类SpringbootMybatisDemoApplication.java，这个是springboot的启动类。我们需要添加点东西：</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> com.winter;</div><div class="line"></div><div class="line"><span class="keyword">import</span> org.mybatis.spring.annotation.MapperScan;</div><div class="line"><span class="keyword">import</span> org.springframework.boot.SpringApplication;</div><div class="line"><span class="keyword">import</span> org.springframework.boot.autoconfigure.SpringBootApplication;</div><div class="line"></div><div class="line"><span class="meta">@SpringBootApplication</span></div><div class="line"><span class="meta">@MapperScan</span>(<span class="string">"com.winter.mapper"</span>)<span class="comment">//将项目中对应的mapper类的路径加进来就可以了</span></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SpringbootMybatisDemoApplication</span> </span>&#123;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</div><div class="line">SpringApplication.run(SpringbootMybatisDemoApplication.class, args);</div><div class="line">&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><p><strong>12.到这里所有的搭建工作都完成了，接下来就是测试的工作，没使用junit4进行测试：</strong><br><strong>首先看一下完成之后的文件的结构：</strong><br><img src="http://img.blog.csdn.net/20170816155352126?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvV2ludGVyX2NoZW4wMDE=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast" alt="这里写图片描述"></p><p><strong>现在controller，service层的代码都写好：</strong></p><p><strong>UserController.java</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> com.winter.Controller;</div><div class="line"></div><div class="line"><span class="keyword">import</span> com.winter.model.User;</div><div class="line"><span class="keyword">import</span> com.winter.service.UserService;</div><div class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Autowired;</div><div class="line"><span class="keyword">import</span> org.springframework.stereotype.Controller;</div><div class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.PathVariable;</div><div class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RequestMapping;</div><div class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.ResponseBody;</div><div class="line"></div><div class="line"><span class="comment">/**</span></div><div class="line"><span class="comment"> * Created by Administrator on 2017/8/16.</span></div><div class="line"><span class="comment"> */</span></div><div class="line"><span class="meta">@Controller</span></div><div class="line"><span class="meta">@RequestMapping</span>(value = <span class="string">"/user"</span>)</div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserController</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="meta">@Autowired</span></div><div class="line">    <span class="keyword">private</span> UserService userService;</div><div class="line"></div><div class="line">    <span class="meta">@ResponseBody</span></div><div class="line">    <span class="meta">@RequestMapping</span>(value = <span class="string">"/add"</span>, produces = &#123;<span class="string">"application/json;charset=UTF-8"</span>&#125;)</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">addUser</span><span class="params">(User user)</span></span>&#123;</div><div class="line">        <span class="keyword">return</span> userService.addUser(user);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@RequestMapping</span>(value = <span class="string">"/all/&#123;pageNum&#125;/&#123;pageSize&#125;"</span>, produces = &#123;<span class="string">"application/json;charset=UTF-8"</span>&#125;)</div><div class="line">    <span class="function"><span class="keyword">public</span> Object <span class="title">findAllUser</span><span class="params">(@PathVariable(<span class="string">"pageNum"</span>)</span> <span class="keyword">int</span> pageNum, @<span class="title">PathVariable</span><span class="params">(<span class="string">"pageSize"</span>)</span> <span class="keyword">int</span> pageSize)</span>&#123;</div><div class="line"></div><div class="line">        <span class="keyword">return</span> userService.findAllUser(pageNum,pageSize);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><p><strong>UserService.java</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> com.winter.service;</div><div class="line"></div><div class="line"><span class="keyword">import</span> com.winter.model.User;</div><div class="line"></div><div class="line"><span class="keyword">import</span> java.util.List;</div><div class="line"></div><div class="line"><span class="comment">/**</span></div><div class="line"><span class="comment"> * Created by Administrator on 2017/8/16.</span></div><div class="line"><span class="comment"> */</span></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">UserService</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">int</span> <span class="title">addUser</span><span class="params">(User user)</span></span>;</div><div class="line"></div><div class="line">    <span class="function">List&lt;User&gt; <span class="title">findAllUser</span><span class="params">(<span class="keyword">int</span> pageNum, <span class="keyword">int</span> pageSize)</span></span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure><p><strong>UserServiceImpl.java</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> com.winter.service.impl;</div><div class="line"></div><div class="line"><span class="keyword">import</span> com.github.pagehelper.PageHelper;</div><div class="line"><span class="keyword">import</span> com.winter.mapper.UserMapper;</div><div class="line"><span class="keyword">import</span> com.winter.model.User;</div><div class="line"><span class="keyword">import</span> com.winter.service.UserService;</div><div class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Autowired;</div><div class="line"><span class="keyword">import</span> org.springframework.stereotype.Service;</div><div class="line"></div><div class="line"><span class="keyword">import</span> java.util.List;</div><div class="line"></div><div class="line"><span class="comment">/**</span></div><div class="line"><span class="comment"> * Created by Administrator on 2017/8/16.</span></div><div class="line"><span class="comment"> */</span></div><div class="line"><span class="meta">@Service</span>(value = <span class="string">"userService"</span>)</div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserServiceImpl</span> <span class="keyword">implements</span> <span class="title">UserService</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="meta">@Autowired</span></div><div class="line">    <span class="keyword">private</span> UserMapper userMapper;<span class="comment">//这里会报错，但是并不会影响</span></div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">addUser</span><span class="params">(User user)</span> </span>&#123;</div><div class="line"></div><div class="line">        <span class="keyword">return</span> userMapper.insertSelective(user);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">/*</span></div><div class="line"><span class="comment">    * 这个方法中用到了我们开头配置依赖的分页插件pagehelper</span></div><div class="line"><span class="comment">    * 很简单，只需要在service层传入参数，然后将参数传递给一个插件的一个静态方法即可；</span></div><div class="line"><span class="comment">    * pageNum 开始页数</span></div><div class="line"><span class="comment">    * pageSize 每页显示的数据条数</span></div><div class="line"><span class="comment">    * */</span></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> List&lt;User&gt; <span class="title">findAllUser</span><span class="params">(<span class="keyword">int</span> pageNum, <span class="keyword">int</span> pageSize)</span> </span>&#123;</div><div class="line">        <span class="comment">//将参数传给这个方法就可以实现物理分页了，非常简单。</span></div><div class="line">        PageHelper.startPage(pageNum, pageSize);</div><div class="line">        <span class="keyword">return</span> userMapper.selectAllUser();</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>如果强迫症看不下去那个报错：（解决方法）<br><img src="http://img.blog.csdn.net/20170816162144297?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvV2ludGVyX2NoZW4wMDE=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast" alt="这里写图片描述"></p><p><strong>测试我使用了idea一个很用心的功能。</strong><br><strong>可以发http请求的插件</strong>：<br><img src="http://img.blog.csdn.net/20170816155644604?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvV2ludGVyX2NoZW4wMDE=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast" alt="这里写图片描述"></p><p><img src="http://img.blog.csdn.net/20170816155701675?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvV2ludGVyX2NoZW4wMDE=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast" alt="这里写图片描述"></p><p>点击左侧的运行按钮就可以发送请求了；<br>如果返回值正确 说明你已经搭建成功了！！</p><p>源码地址：<a href="https://github.com/WinterChenS/springboot-mybatis-demo" target="_blank" rel="external">https://github.com/WinterChenS/springboot-mybatis-demo</a></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;strong&gt;本项目使用的环境：&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;开发工具：Intellij IDEA 2017.1.3&lt;/li&gt;
&lt;li&gt;jdk：1.7.0_79&lt;/li&gt;
&lt;li&gt;3.maven:3.3.9
    
    </summary>
    
      <category term="spring boot" scheme="http://winterchens.github.io/categories/spring-boot/"/>
    
    
      <category term="springboot" scheme="http://winterchens.github.io/tags/springboot/"/>
    
      <category term="mybatis" scheme="http://winterchens.github.io/tags/mybatis/"/>
    
  </entry>
  
  <entry>
    <title>java优雅的输出helloWorld</title>
    <link href="http://winterchens.github.io/2017/09/25/java-print-helloworld/"/>
    <id>http://winterchens.github.io/2017/09/25/java-print-helloworld/</id>
    <published>2017-09-25T14:41:00.000Z</published>
    <updated>2017-09-26T11:36:54.000Z</updated>
    
    <content type="html"><![CDATA[<h4 id="在java中很优雅的输出helloworld，可以试一试"><a href="#在java中很优雅的输出helloworld，可以试一试" class="headerlink" title="在java中很优雅的输出helloworld，可以试一试"></a>在java中很优雅的输出helloworld，可以试一试</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test</span></span>&#123;</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</div><div class="line">    System.out.println(randomString(-<span class="number">229985452</span>) + <span class="string">" "</span> + randomString(-<span class="number">147909649</span>));</div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> String <span class="title">randomString</span><span class="params">(<span class="keyword">int</span> seed)</span></span>&#123;</div><div class="line">    Random rand = <span class="keyword">new</span> Random(seed);</div><div class="line">    StringBuilder sb = <span class="keyword">new</span> StringBuilder();</div><div class="line">    <span class="keyword">while</span>(<span class="keyword">true</span>)&#123;</div><div class="line">    <span class="keyword">int</span> n = rand.nextInt(<span class="number">27</span>);</div><div class="line">    <span class="keyword">if</span>(n==<span class="number">0</span>) <span class="keyword">break</span>;</div><div class="line">    sb.append((<span class="keyword">char</span>)(<span class="string">'`'</span>+n));</div><div class="line">    </div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> sb.toString();</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h4 id=&quot;在java中很优雅的输出helloworld，可以试一试&quot;&gt;&lt;a href=&quot;#在java中很优雅的输出helloworld，可以试一试&quot; class=&quot;headerlink&quot; title=&quot;在java中很优雅的输出helloworld，可以试一试&quot;&gt;&lt;/a&gt;在j
      
    
    </summary>
    
      <category term="java基础" scheme="http://winterchens.github.io/categories/java%E5%9F%BA%E7%A1%80/"/>
    
    
      <category term="java" scheme="http://winterchens.github.io/tags/java/"/>
    
  </entry>
  
</feed>
